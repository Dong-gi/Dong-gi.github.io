include ../../source/skeleton.pug

+post({
    title: 'OpenAPI',
    description: 'OpenAPI란? 그 사용법은?',
})

    h1 참고자료
    ul
        li: +asA('https://www.openapis.org/', 'OpenAPI 홈페이지')
        li: +asA('https://github.com/OAI/OpenAPI-Specification', 'OpenAPI GitHub')
        li: +asA('https://oai.github.io/Documentation/', 'OpenAPI 설명서')
        p OpenAPI 명세는 길면서도 정제된 표현만을 담고 있다. 설명서에서는 초심자를 위하여, 명세에 대한 해설과 모범 사례들을 보여준다
        li: +asA('https://swagger.io/', 'Swagger')
        p Swagger는 OpenAPI, Async API 등의 명세를 준수하는 API 개발을 용이하게 하는 여러 툴을 제공한다
        ul
            li Codegen : API 명세로부터 서버 코드 골격과 클라이언트에서 호출에 이용할 라이브러리 생성
            li Editor : GUI 편집기
            li UI : API 문서화
        li: +asA('https://tools.openapis.org/', 'OpenAPI 관련 툴')


    h1 OpenAPI 3.1.0 설명서
    p 아래 문서의 출처는 #[+asA('https://oai.github.io/Documentation/', 'https://oai.github.io/Documentation/')]이며, 저작권자는 OpenAPI Initiative입니다
        |<a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/80x15.png"></a>
    p #[+asA('http://creativecommons.org/licenses/by/4.0/', 'Creative Commons Attribution 4.0 International License')]에 의거하여 인용 및 수정을 가했습니다
    div
        h2 Getting Started
        p OpenAPI는 기계적으로 해석할 수 있는 HTTP 기반 API 명세를 작성하는 방법을 정의합니다. OpenAPI를 사용하면 아래와 같은 이점을 얻을 수 있습니다
        ul
            li API 요청 및 응답 검증
            li 사람이 읽을 수 있는 문서로 변환
            li 코드 생성 : 다양한 서버/클라이언트 개발 환경에 맞는 API 코드 골격을 자동으로 생성
            li GUI 편집

        h2 The OpenAPI Specification Explained
        div
            h3 Structure of an OpenAPI Document: JSON, YAML, <mark>openapi</mark>, <mark>info</mark>
            div
                h4.fake Document Syntax
                p OpenAPI 문서는 텍스트 파일로 작성되며, 일반적으로 <mark>openapi.json</mark>, <mark>openapi.yaml</mark>를 파일명으로 붙입니다.

                h4.fake Minimal Documnt Structure
                p OpenAPI 문서는 단일 JSON 객체로 표현되며 포함되는 필드는 OpenAPI 명세(OAS)를 따릅니다. OAS 구조는 매우 길고 복잡하므로 #[+asA('https://openapi-map.apihandyman.io/', 'OpenAPI Map')]과 같은 시각적 도구가 구조를 파악하는데 도움이 될 수 있습니다.
                p OpenAPI 문서의 루트 객체는 #[+asA('https://spec.openapis.org/oas/v3.1.0#openapi-object', 'OpenAPI Object')]이고, 최소 세 개의 필드를 반드시 포함해야 합니다: <mark>openapi</mark>, <mark>info</mark>. (<mark>paths</mark>, <mark>components</mark>, <mark>webhooks</mark> 중 하나)
                ul
                    li <mark>openapi</mark> (string)
                    p OAS 버전을 나타냅니다. 예. 3.1.0
                    li <mark>info</mark> (#[+asA('https://spec.openapis.org/oas/v3.1.0#info-object', 'Info Object')])
                    p API에 대한 일반적인 정보를 포함합니다. 아래의 두 개 필드만 필수입니다
                    ul
                        li <mark>title</mark> (string) : 문서 제목
                        li <mark>version</mark> (string) : 문서 버전
                    li <mark>paths</mark> (#[+asA('https://spec.openapis.org/oas/v3.1.0#paths-object', 'Paths Object')])
                    p 모든 API 엔드포인트 목록을 기술합니다

            h3 API Endpoints: <mark>paths</mark>, <mark>response</mark>
            div
                h4.fake The Endpoints List
                p #[+asA('https://spec.openapis.org/oas/v3.1.0#paths-object', 'Paths Object')]는 정의하는 API가 제공하는 모든 작업에 대한 목록을 담는다. Paths Object의 자료 구조는 배열이 아니라 키(path)-값(#[+asA('https://spec.openapis.org/oas/v3.1.0#path-item-object', 'Path Item Object')]) 쌍을 갖는 객체인데, 별도의 검증 로직 없이 문맥 검사 단계에서 path의 중복을 방지할 수 있다는 장점이 있다
                p 각 path는 반드시 '/'로 시작해야 한다
                +asCode('yaml').
                    paths:
                        /endpoint1:
                        /endpoint2:

                h4.fake The Path Item Object
                p #[+asA('https://spec.openapis.org/oas/v3.1.0#path-item-object', 'Path Item Object')]는 특정 엔드포인트에 대하여, HTTP 각 메서드(GET, POST, ...)들 중 API가 제공하는 작업(#[+asA('https://spec.openapis.org/oas/v3.1.0#operation-object', 'Operation Object')])을 정의한다
                +asCode('yaml').
                    paths:
                        /endpoint1:
                            get:
                            put:
                        /endpoint2:

                h4.fake The Operation Object
                p #[+asA('https://spec.openapis.org/oas/v3.1.0#operation-object', 'Operation Object')]는 작업의 개요와 함께, 요청과 응답 형식을 정의한다
                +asCode('yaml').
                    paths:
                        /endpoint1:
                            get:
                                summary: Do something(short)
                                description: Do something(long)
                                parameters:
                                requestBody:
                                responses:
                            put:
                        /endpoint2:


            h3 Content of Message Bodies: <mark>content</mark>, <mark>schema</mark>
            p <mark>content</mark> 필드는 #[+asA('https://spec.openapis.org/oas/v3.1.0#response-object', 'Response Object')]와 #[+asA('https://spec.openapis.org/oas/v3.1.0#request-body-object', 'Request Body Object')] 모두에 사용되는, #[+asA('https://tools.ietf.org/html/rfc6838', 'RFC6838 Media Types')] -&gt; #[+asA('https://spec.openapis.org/oas/v3.1.0#media-type-object', 'Media Type Object')] 매핑 정보다
            +asCode('yaml').
                content:
                    application/json:
                        schema:
                        examples:
                        encoding:
                    text/*:
                        ...

            h3 Parameters and Payload of an Operation: <mark>parameters</mark>, <mark>requestBody</mark>
            p #[+asA('https://spec.openapis.org/oas/v3.1.0#parameter-object', 'Parameter Object')]는 요청 body 외 부분에서 얻을 수 있는 변수를 정의한다
            div
                h4.fake Parameter Location
                p <mark>in</mark> 속성을 이용해 파라미터의 위치를 지정한다
                ul
                    li query : URL 쿼리 문자열
                    li header : HTTP 사용자 정의 헤더. 대소문자 구별하지 않음에 유의
                    li path : URL 경로
                    +asCode('yaml').
                        paths:
                            /users/{id}:
                                get:
                                    parameters:
                                    - name: id
                                      in: path
                                      required: true
                    li cookie : 쿠키

                h4.fake Parameter Serialization Control
                p 파라미터의 위치가 다양한 만큼 그 표현 방법도 다양하며, 따라서 직렬화/역직렬화에 필요한 포맷 정보를 <mark>style</mark> 속성에 설정할 수 있다
                ul
                    li 원시 타입: 예. 정수 id = 1234
                    +table()
                        +ths('style:', 'simple', 'form', 'label', 'matrix')
                        +tds('', '1234', 'id=1234', '.1234', ';id=1234')
                    li 배열 타입: 예. ids = [1, 2, 3]
                    +table()
                        +ths('style:', 'simple', 'form', 'label', 'matrix')
                        +tds('explode=false', '1,2,3', 'ids=1,2,3', '.1.2.3', ';ids=1,2,3')
                        +tds('explode=true', '1,2,3', 'ids=1&ids=2&ids=3', '.1.2.3', ';ids=1;ids=2;ids=3')
                    li 객체 타입: 예. color = {R, G, B}
                    +table()
                        +ths('style:', 'simple', 'form', 'label', 'matrix')
                        +tds('explode=false', 'R,1,G,2,B,3', 'color=R,1,G,2,B,3', '.R.1.G.2.B.3', ';color=R,1,G,2,B,3')
                        +tds('explode=true', 'R=1,G=2,B=3', 'R=1&G=2&B=3', '.R=1.G=2.B=3', ';R=1;G=2;B=3')

            h3 Reusing Descriptions: <mark>components</mark>, <mark>$ref</mark>
            p API 구성 요소의 재정의를 피하기 위해, 루트 객체의 <mark>components</mark> 필드에 각 요소들을 정의하고, <mark>$ref</mark> 속성으로 이를 지정하여 재사용할 수 있다
            +asCode('yaml').
                # 동일 파일 내 참조 예:
                $ref: "#/components/schemas/coordinate"
                # 외부 로컬 파일 내 참조 예:
                $ref: './another_file.yaml#rowParam'
                # 원격 파일 내 참조 예:
                $ref: 'https://gigantic-server.com/schemas/Monster/schema.yaml'

            h3 Providing Documentation and Examples: <mark>example</mark>, <mark>examples</mark>
            div
                h4.fake YAML에서 긴 설명문을 표기하는 방법
                ul
                    li Literal mode
                    +asCode('yaml').
                        description: |
                            This is a string
                            in multiple lines.

                            And an extra one.
                    +asCode('text', 'Output').
                        This is a string
                        in multiple lines.

                        And an extra one.

                    li Folded mode
                    +asCode('yaml').
                        description: &gt;
                            This is a string
                            in multiple lines.

                            And an extra one.
                    +asCode('text', 'Output').
                        This is a string in multiple lines.
                        And an extra one.
                
                h4.fake CommonMark Syntax
                ul
                    li Headings
                    +asCode().
                        # Level 1
                        ## Level 2
                        ### Level 3
                    
                    li Emphasis
                    +asCode().
                        *Emphasis*
                        **Strong Emphasis**
                        ***Both***
                    
                    li Lists
                    +asCode().
                        - Item 1
                        - Item 2
                        - Item 2.1
                    
                    li Code
                    +asCode().
                        An inline `code span`

                        ```
                        A fenced code block
                        ```
                    
                    li Links
                    +asCode().
                        [Link text](Link URL)
                        ![Alt text](Image URL)

        h2 Best Practices
        ul
            li OpenAPI는 모든 HTTP API를 기술할 수 없다
            p 실제 구현과 문서의 오차를 줄이기 위해, 다소 편법으로 API를 정의할 수도 있을 것이다

            li 대신 OpenAPI는 코드 생성, 문서화, 유효성 검증 등 풍부한 자동화 도구를 제공한다

            li 정보는 다른 곳에 중복하여 기술하면 안 된다
            p 언젠가 한 쪽만 수정된 상황이 발생할 수 있다
