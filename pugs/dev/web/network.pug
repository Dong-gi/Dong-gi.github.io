include ../../../source/skeleton.pug

+post({
    title: 'Network',
    description: '네트워크 관련 사항 정리',
})

    h1 TCP/IP 프로토콜 계층
    ol
        li 물리 계층
        ul
            li 두 노드 사이의 연결을 위한 물리적 사양
            li 전송 단위 : 비트
            li 프로토콜 예 : 전선, 전파, 광섬유
            li 주소 : 물리적으로 연결되는 매체 그 자체이므로, 별도 주소는 없다
        
        li 데이터 링크 계층
        ul
            li 같은 네트워크 상에서, 두 노드 사이의 연결을 위한 논리적 사양
            p 물리 계층의 전송 설비를 신뢰할 수 있는 링크로 변환한다
            li 전송 단위 : 프레임
            li 프로토콜 예 : 이더넷, Wi-Fi
            li 주소 : 노드의 구분을 위해 물리적 주소(예. MAC 주소)를 이용한다
            p 다른 네트워크에 존재하는 노드가 수신자라면, 수신자 주소는 다음 네트워크로 가도록 연결된 노드의 주소가 된다
        p 기타 특성
        ul
            li 흐름 제어 : 수신자의 처리율이 송신자보다 낮은 경우 실행된다
            li 접근 제어 : 둘 이상의 장치가 같은 링크에 연결되어 있다면, 어느 시간에 어느 장치가 링크를 이용할 지 결정한다

        li 네트워크 계층
        ul
            li 다중 네트워크 상에서, 종단(end-point)간 데이터 전송을 위한 사양
            li 전송 단위 : 데이터그램
            li 프로토콜 : IP
            li 주소 : 노드의 구분을 위해 논리적 주소(IP 주소)를 이용한다
        p 기타 특성
        ul
            li 경로 지정 : 네트워크 간 연결을 위해 목적지 주소 별로 어느 노드로 데이터그램을 전달(라우팅)할 지 결정한다

        li 전송 계층
        ul
            li 프로세스간 데이터 전송을 위한 사양
            li 전송 단위 : 프로토콜에 따라 세그먼트, 데이터그램, 패킷
            li 프로토콜 예 : TCP, UDP, SCTP
            li 주소 : 프로세스의 구분을 위해 포트 번호를 이용한다
        p 기타 특성
        ul
            li 분할과 재조립 : 응용 계층의 메시지를 전송 단위로 잘게 나누어 보내고, 수신하는 쪽은 이를 재조립한 뒤 손실되거나 변조된 것을 식별해낸다
            li 연결 제어 : 연결 지향 프로토콜은 데이터를 보내기 전에 먼저 연결을 수립하고, 데이터를 모두 보낸 뒤 연결을 종료한다

        li 응용 계층
        ul
            li 사용자(사람이든 프로그램이든)가 네트워크에 접속하는 것을 가능하게 한다
            li 전송 단위 : 메시지
            li 프로토콜 예 : DNS, HTTP, FTP, VPN
            li 주소 : 특정 응용 프로그램끼리 호환되는 주소를 이용할 수 있다 -- 이메일 주소, URL 등
        p 기타 특성
        ul
            li OSI 5 ~ 7 계층을 모두 포함한다
            ul
                li 5레벨; 세션 계층 : 응용 계층 통신이 수행될 채널을 관리
                li 6레벨; 표현 계층 : 응용 계층 데이터 번역 -- 인코딩, 압축, 암호화 등
        
        li 게이트웨이 : 한 네트워크에서 서로 다른 네트워크와 연결하기 위해 패킷을 송/수신하는 중계자

        li 캡슐화; Encapsulation
        p 데이터를 하위 계층에 보내기 전에, 자기 계층에서의 동작에 필요한 헤더/트레일러를 붙이는 것

        li 역캡슐화; Decapsulation
        p 데이터를 상위 계층에 보내기 전에, 자기 계층의 헤더/트레일러를 제거하는 것

        li 정확한 전달을 위해, 상위 계층 프로토콜의 종류를 미리 알아야 하는 경우가 있다
        ul
            li 데이터 링크 계층의 이더넷 : type 필드 이용 -- 0x0800(IPv4), ...
            li 네트워크 계층의 IP : protocol 필드 이용 -- 6(TCP), 17(UDP), ...

        li 에러검출에 사용되는 체크섬은 자기 계층에서 붙인 비트열만 대상으로 한다 -- 상위 계층의 메시지는 체크섬에 포함하지 않는다


    h1 IP
    div
        h2 IPv4
        ul
            li 32bit : [0-255].[0-255].[0-255].[0-255]
            li Subnet & CIDR
            ul
                li 주소 소유자는 예약한 특정 접두 주소(subnet mask)를 제외한 나머지 부분을 자유롭게 할당하여 사용할 수 있다
                li A-class : 앞 8비트를 예약하고, 나머지 24비트를 자유롭게 할당. 예. 123.0.0.0/8
                li B-class : 앞 16비트를 예약하고, 나머지 16비트를 자유롭게 할당. 예. 123.123.0.0/16
                li 기타 관용적인 사설 네트워크 서브넷 : 10.0.0.0/8, 192.168.0.0/16
                li CIDR; Classless Inter-Domain Routing
                p 클래스없이 주소 블록 할당. 예. 123.123.123.123/7

        h2 IPv6
        ul
            li 128bit : [0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]
            li 접두 0은 제거할 수 있다 + 반복 적용 가능; 0123:A:0123 == 123:A:123
            li 0:0(:0)*은 :으로 축약할 수 있다 + 전체 주소에 대해 1회만 적용 가능; A:0:0:B == A::B

    h1 UDP; User Datagram Protocol
    div
        h2 특징
        ul
            li 비연결형
            p 특정 소켓으로의 전송, 임의 소켓으로부터의 수신 기능만 존재. 각 데이터그램은 모두 독립적이며, 65507 바이트보다 큰 메시지를 알아서 쪼개고 합치지 않는다.
            li 신뢰성 없음
            p 확인응답 없음 + 데이터그램 오류 탐지 시 단순 폐기
        h2 Datagram
        p Source port 16비트 | Destination port 16비트 | Total length(최대 65507바이트) 16비트 | Checksum 16비트 | Data


    h1 TCP; Transmission Control Protocol
    div
        h2 특징
        ul
            li 연결 지향
            p 연결 지속되는 채널을 이용해 <b>스트림</b> 전송. 스트림은 패킷들로 나눠지고, 이때 패킷은 IP 계층 전송 단위에 맞게 세그먼트로 표현된다
            li 송신 버퍼 + 수신 버퍼를 이용한 생산/소비 균형 조절
            li 신뢰성 있음
            p 패킷 순서 보장. ack 응답 및 응답 시간제한, 재전송 기능 제공
            li 전이중 통신
            p 동시에 양방향으로 패킷 전송 가능

        h2 연결 수립; 3-way handshaking
        ol
            li A -> B : SYN 세그먼트(#seq=a)
            li B -> A : SYN + ACK 세그먼트(#seq=b,#ack=a+1)
            li A -> B : ACK 세그먼트(#seq=a+1,#ack=b+1)
            p 양쪽이 동시에 연결을 요구하더라도 연결은 하나만 수립된다

        h2 연결 종료; 3-way handshaking
        ol
            li A -> B : FIN (+ ACK) 세그먼트(#seq=a,#ack=b)
            li B -> A : FIN + ACK 세그먼트(#seq=b,#ack=a+1)
            li A -> B : ACK 세그먼트(#seq=a+1,#ack=b+1)

        h2 연결 종료; 4-way handshaking
        ol
            p 데이터를 보낼 게 남아있다면, FIN 요청은 수락한 뒤, 데이터를 마저 보낸 후 FIN 응답한다
            li A -> B : FIN (+ ACK) 세그먼트(#seq=a,#ack=b1)
            li B -> A : ACK 세그먼트(#seq=b1,#ack=a+1)
            li 남은 데이터 전송
            ul
                li B -> A : 데이터 세그먼트
                li A -> B : ACK 세그먼트
            li B -> A : FIN 세그먼트(#seq=b2,#ack=a+1)
            li A -> B : ACK 세그먼트(#seq=a+1,#ack=b2+1)

        h2 TCP 소켓 상태
        +w3img('https://upload.wikimedia.org/wikipedia/commons/f/f6/Tcp_state_diagram_fixed_new.svg')
        ul
            li CLOSED : 연결 없음
            li LISTEN : Passive open; 서버 소켓 개방 -> SYN 대기
            li SYN SENT : Active open; 클라이언트 SYN 전송 -> ACK 대기
            li SYN RECEIVED : SYN+ACK 전송 -> ACK 대기
            li ESTABLISHED : 연결 수립. 데이터 전송 가능
            li FIN WAIT 1 : 클라이언트가 ESTABLISHED 상태에서 연결 종료하기로 결정 -> 1번째 FIN 전송 -> ACK 대기
            li FIN WAIT 2 : FIN WAIT 1에서 ACK 수신 -> 2번째 FIN 대기
            li CLOSING : FIN WAIT 1 상태에서 FIN 수신 == 동시 종료 결정
            li TIME WAIT : 연결 종료; 일정 시간 후 CLOSED 천이
            li CLOSE WAIT : 서버가 ESTABLISHED 상태에서 1번째 FIN 수신 -> ACK 전송 -> 애플리케이션의 소켓 연결 종료 대기
            li LAST ACK : CLOSE WAIT 상태에서 연결 종료 결정 -> 2번째 FIN 전송 -> ACK 대기

            h3 RST 세그먼트
            ul
                li 연결 요청 거부 -> 즉시 CLOSED 천이
                li 기존 연결 중단 -> 즉시 CLOSED 천이
                li 휴지 상태 연결 종료 -> 즉시 CLOSED 천이
                li RST 세그먼트를 수신한 쪽도 즉시 CLOSED 천이

    h1 SO_REUSEADDR, SO_REUSEPORT
    ul
        li: +asA('https://stackoverflow.com/questions/14388706/how-do-so-reuseaddr-and-so-reuseport-differ', '참고 자료')
        li TCP/UDP 연결은 다음의 5가지 값으로 식별된다
        p &lt;protocol&gt;, &lt;src addr&gt;, &lt;src port&gt;, &lt;dest addr&gt;, &lt;dest port&gt;
        li protocol 값은 socket() 함수로 소켓이 생성될 때 설정된다
        li src addr, src port는 bind() 함수를 통해 설정된다
        li dest addr, dest port는 connect() 함수를 통해 설정된다
        li 명시적으로 포트를 바인드할 때, 0번 포트(any port)를 설정할 수 있다
        p OS는 특정 범위 내에서 포트를 자동으로 할당한다
        li 명시적으로 주소를 바인드할 때, 0.0.0.0, ::를 설정(any address)할 수 있다
        p 포트와는 다르게 OS는 모든 로컬 네트워크 인터페이스의 모든 로컬 주소에 대하여 소켓을 바인드한다. 이후 연결할 때는 특정 로컬 주소 하나로 대체된다.
        p → 192.168.0.1:21, 10.0.0.1:21 바인딩은 동시에 존재할 수 있지만, 0.0.0.0:21 바인딩과 다른 21포트로의 바인딩은 동시에 존재할 수 없다.
    div
        p BSD 소켓 구현은 모든 다른 구현들의 조상이다
        h3 BSD - SO_REUSEADDR
        ul
            li 소켓을 바인드하기 전에 SO_REUSEADDR를 사용 설정하면, 0.0.0.0:21, 192.168.0.1:21 바인딩이 동시에 존재할 수 있다
            li SO_REUSEADDR 설정된 TCP 소켓이 TIME_WAIT 상태가 되면, 같은 로컬 주소:포트의 바인딩이 새로 가능해진다
        h3 BSD - SO_REUSEPORT
        ul
            li 특정 포트에 대한 소켓이 SO_REUSEPORT 사용 설정된 상태에서 바인드된 경우, SO_REUSEPORT 사용 설정된 다른 소켓들도 같은 로컬 주소:포트로 바인드 가능하다
            li SO_REUSEPORT는 SO_REUSEADDR를 포함하는 옵션이 아니다. SO_REUSEADDR만 설정된 소켓이 TIME_WAIT 상태가 되었다고 SO_REUSEPORT 사용 설정된 새 소켓이 같은 로컬 주소:포트로 바인드되지 않는다.
            li SO_REUSEPORT를 통해 소켓 속성이 모두 같은 두 TCP 소켓이 동시에 존재할 수는 있지만, 연결에 성공하는 건 하나 뿐이다

    h1 SCTP; Stream Control Transport Protocol
    div
        h2 정의
        ul
            li Association ::= 두 SCTP 종단점 사이의 연결
            ul
                li 서버, 클라이언트 각각은 SCTP 헤더의 VT(Verification Tag)에 각자의 association 구별을 위한 32비트 값을 설정한다
                p 즉, 양쪽에서 전송하는 VT는 서로 다를 수 있다
                li 서버, 클라이언트 각각은 수신한 VT와 동일한 값으로 응답 패킷의 VT를 설정한다
                p 따라서, 응답받은 쪽은 응답 VT를 이용해 어떤 association으로 보냈는지 판별 가능
                li 따라서 TCP와 달리, 같은 소켓으로부터 패킷이 오더라도 실제로 유효한 연결(association)에 해당하는 패킷인지 구별할 수 있다
            li Chunk ::= SCTP의 데이터 전송 단위
            p TCP의 스트림과 달리, 단편화가 이뤄지더라도 메시지의 시작과 끝이 명확히 구분된다

        h2 특징
        ul
            li 하나의 association 내에서 다중스트림 지원
            p 스트림 하나가 블록되더라도 다른 스트림들은 전송을 계속할 수 있다
            li Multi-homing 지원
            p Primary 주소가 비가용 상태가 되더라도 alternative 주소를 통해 연결을 지속할 수 있다
            li TCP와 마찬가지로 전이중, 신뢰성 있는 통신 제공
            p + 흐름 제어, 오류 제어, 혼잡 제어 기능 제공
            li TCP는 제어 정보를 헤더로 이용하는 반면, SCTP는 제어 정보 또한 하나의 chunk로 전송한다
            p 따라서 SCTP는 12바이트 고정 헤더를 사용한다
            li 하나의 SCTP 패킷이 여러 chunk들을 포함할 수 있다
            p 이때 각 chunk들은 각각 다른 스트림에 속할 수 있다
            li TCP의 ACK, FIN 세그먼트와 달리, SCTP의 확인 응답 등에 이용되는 제어 chunk는 TSN을 필요로 하지 않는다
            p 제어 chunk는 다른 종류의 제어 chunk에 의해 응답되고, 일부는 아예 응답이 필요하지 않다
            li Numbering
            ul
                li 스트림은 16비트 SI(Stream Identifier)를 갖는다
                li DATA Chunk 전송 순서를 위해 순차적인 32비트 TSN(Transmission Sequence Number)을 사용한다
                li 스트림 내 chunk 순서를 표시하기 위해 SSN(Stream Sequence Number)을 사용한다
                p SI와 SSN을 이용해 chunk가 목적지에 도달하면 적절한 스트림에 전달되어 올바른 순서에 놓인다

        h2 Chunk 종류
        +table()
            +tds('0', 'DATA', 'User data. TSN을 사용하는 유일한 chunk type')
            +tds('1', 'INIT', 'Association 시작. 다른 chunk와 같이 보낼 수 없다')
            +tds('2', 'INIT ACK', 'INIT에 대한 확인응답. 다른 chunk와 같이 보낼 수 없다')
            +tds('10', 'COOKIE ECHO', 'INIT ACK에 포함된 쿠키를 되돌려 보낸다')
            +tds('11', 'COOKIE ACK', 'COOKIE ECHO에 대한 확인응답')
            +tds('3', 'SACK', '데이터 chunk에 대한 확인응답')
            +tds('4', 'HEARTBEAT', '살아있는 지 문의')
            +tds('5', 'HEARTBEAT ACK', 'HEARTBEAT에 대한 확인응답')
            +tds('7', 'SHUTDOWN', 'Association 종료')
            +tds('8', 'SHUTDOWN ACK', 'SHUTDOWN에 대한 확인응답')
            +tds('14', 'SHUTDOWN COMPLETE', 'SHUTDOWN ACK에 대한 확인응답')
            +tds('9', 'ERROR', '수신한 패킷에서 오류를 검출한 경우')
            +tds('6', 'ABORT', '오류로 인해 association을 종결해야 하는 경우')
            +tds('192', 'FORWARD TSN', '누적 TSN을 조정하려는 경우')

        h2 쿠키를 이용한 SYN 플러딩 방지
        ul
            li SCTP는 COOKIE ECHO chunk를 받은 후에야 비로소 리소스를 할당한다
            li COOKIE ECHO가 실제로 INIT -> INIT ACK를 거쳤다는 것을 검증하기 위해, 쿠키에는 서버의 비밀키가 연관된 digest가 담긴다

        h2 상태 천이 다이어그램
        +w3img('/imgs/no-date/SCTP-state-diagram.png')
        ul
            li Closed : Association 없음
            li Cookie Wait : INIT 보낸 후 INIT ACK에 포함된 쿠키 대기 중
            li Cookie Echoed : COOKIE ECHO 보낸 후 COOKIE ACK 대기 중
            li Established : COOKIE ACK를 받아 association 수립
            li Shutdown Pending : close 신호를 받아 SHUTDOWN을 보내기 전에, 남은 데이터 chunk를 보내는 중
            li Shutdown Sent : 남은 데이터 chunk가 없어 SHUTDOWN 전송하고 SHUTDOWN ACK 대기; 이후 데이터 chunk는 전송되지 않는다
            li Shutdown Received : SHUTDOWN 수신. 남은 데이터 chunk가 있다면 마저 보낸 뒤 SHUTDOWN ACK 전송; 이후 데이터 chunk는 전송되지 않는다
            li Shutdown Ack Sent : SHUTDOWN ACK를 보내고 SHUTDOWN COMPLETE 대기

    h1 HTTP
    div
        h2 HTTP/0.9
        p GET 메서드(요청 헤더도 없음)로 HTML 텍스트를 가져오는 기능 제공

        h2 HTTP/1.0
        ul
            li PUT 등 다른 요청 메서드 지원
            li 요청 헤더 지원
            li 응답 코드 추가
            li 리다이렉션 지원
            li 컨텐츠 인코딩(압축 포함) 제공
            li 조건부 요청

        h2 HTTP/1.1
        ul
            li Host 헤더 필수 지정
            li 동일 서버에 대한 여러 요청을 하나의 커넥션으로 순차적으로 수행 가능
            li OPTIONS 메서드 지원
            li Upgrade 헤더 지원
            li cacheability 헤더 확장

        h2 HTTP/2
            +asA('https://datatracker.ietf.org/doc/html/rfc7540')
        ul
            li 요청 헤더 압축 지원
            li 동일 서버에 대해 하나의 커넥션으로 여러 요청 동시 수행 가능
        div
            h3 스트림 & 프레임
            ul
                li 클라이언트와 서버는 하나의 연결 안에서 여러 스트림을 열어 통신을 수행한다
                li 전송 단위는 프레임으로, 기존 텍스트 형식을 버리고 정형화된 바이너리 포맷을 이용한다
                +asCode('HTTP', '기존 HTTP 패킷 예').
                    GET / HTTP/1.1\r\n
                    Host: localhost:8000\r\n
                    User-Agent: Mozilla/5.0 ...\r\n
                    Accept: text/html,application/xhtml+xml,...\r\n
                    ...\r\n
                    Content-Length: 345\r\n
                    \r\n
                    request body...\r\n
                +asCode('text', 'HTTP/2 frame format').
                    +-----------------------------------------------+
                    |                Length (24)                   |
                    +---------------+---------------+---------------+
                    |  Type (8)    |   Flags (8)   |
                    +-+-------------+---------------+-------------------------------+
                    |R|                 Stream Identifier (31)                      |
                    +=+=============================================================+
                    |                  Frame Payload (0...)                      ...
                    +---------------------------------------------------------------+
                ul
                    li Length : 기본 프레임 최대 길이는 2^14바이트로, 더 큰 값을 사용하려면 SETTINGS 프레임으로 협상해야 한다
                    p \r\n을 이용해 끝까지 파싱해야만 포맷 일치 여부를 알 수 있고, \n만 보내는 클라이언트에 대응하고, 미리 알 수 없는 컨텐츠 길이에 대해 걱정하던 부분이 해소되었다
                    li Type
                    +table()
                        +tds('0', 'DATA', '데이터')
                        +tds('1', 'HEADERS', 'HTTP 헤더')
                        +tds('2', 'PRIORITY', '스트림 우선순위')
                        +tds('4', 'SETTINGS', '연결 매개변수 설정')
                        +tds('5', 'PUSH_PROMISE', '서버 푸시')
                        +tds('6', 'PING', '연결 시험')
                        +tds('8', 'WINDOW_UPDATE', '흐름제어')
                        +tds('9', 'CONTINUATION', 'HEADERS, PUSH_PROMISE, CONTINUATION을 한 프레임으로 전송을 끝내지 못하는 경우, 나머지 연장 부분')
                        +tds('3', 'RST_STREAM', '스트림 즉시 종료')
                        +tds('7', 'GOAWAY', '연결 종료')
                    li Stream Identifier : 프레임이 속한 스트림 표시
                li x번 스트림으로 요청된 프레임은 동일한 x번 스트림을 통해 응답받는다

        h2 HTTP/3
        ul
            li TCP 대신 UDP 기반 전송 계층 프로토콜, QUIC(
                +asA('https://datatracker.ietf.org/doc/html/rfc9000')
                |)으로 전환
            ul
                li HTTP/2가 동일 연결을 사용한 요청 멀티플렉싱으로 애플리케이션 계층의 HOL 문제를 해소했지만, 여전히 TCP 자체의 HOL 문제는 남아있었다
                p 한 요청의 패킷만 손실되도 전체 요청이 영향을 받는다 -- HTTP/2는 HTTP 교환을 각 스트림으로 구별할 수 있지만, TCP는 그러한 추상화에 대해 알지 못하므로 전체 스트림이 정확한 순서로 도달할 때까지 대기한다
                li QUIC은 네이티브 멀티플렉싱으로 위와 같은 문제가 발생하지 않는다
                li QUIC 연결은 IP에 독립적이므로, WiFi와 셀룰러 네트워크 사이의 전환이 발생하는 모바일 환경에 유용
            li TCP가 제공하는 혼잡 제어 등의 기능이 커널 공간에서 동작하는 반면, HTTP/3은 유저 공간에서 실행하는 대신 알고리즘을 자주 업데이트 가능
            li TLS 대신 이에 상응하는 DTLS를 이용해 보안 통신 수행. 이에 더해, QUIC은 암호화되지 않은 연결을 지원하지 않는다
            li UDP 공격에 대한 방어 : QUIC 초기 패킷은 최소 1200바이트여야 한다; 서버가 ACK 패킷을 받지 못한 경우, 요청 크기의 3배 이상을 보내지 않는다

        h2 MIME 타입
        ol
            p 형식 : Type/SubType; variable=value
            li application/*
            p /http, /octet-stream, /pdf, /xml, /zip, /x-tar, /x-gtar(GNU tar), /x-gzip, /x-javascript, ...
            li audio/*
            p /midi, /mpeg, /x-wav, ...
            li image/*
            p /bmp, /gif, /jpeg, /png, /tiff, ...
            li multipart/*
            p /encrypted, /form-data, /mixed, ...
            li text/*
            p /css, /html, /plain, /xml, ...
            li video/*
            p /mpeg, ...

        h2 성능 최적화
        ul
            li DNS prefetch
            +asCode('html') &lt;link rel="dns-prefetch" href="//...com"&gt;
            li TLS preconnect
            +asCode('html') &lt;link rel="preconnect" href="//...com" crossorigin&gt;
            li 리다이렉션하지 않기
            li 클라이언트에 캐싱하기
            li onload 이벤트 전에 js가 실행되야 하는 경우
            +asCode('html') &lt;script async src="...js"&gt;
            li DOM 로드 후에 js를 실행해도 되는 경우
            +asCode('html') &lt;script defer src="...js"&gt;
            li 디바이스 해상도에 맞추어 이미지 다운로드

        h2 보안
        div
            h3 보안 요건
            ul
                li 기밀성 confidentiality
                li 무결성 integrity
                li 가용성 availability
                li 인증 authentication
                li 부인 방지 NonRepudiation

            h3 소스 간 자원 공유 CORS; Cross-Origin Resource Sharing
            ol
                li 본문이 text/plain이고, 커스텀 헤더가 없는 GET, POST 요청에는 Origin 헤더가 추가된다
                li Origin 헤더에는 요청을 보내는 페이지의 소스(프로토콜, 도메인, 포트)가 있으며, 서버는 이를 근거로 응답할 지 여부를 정한다
                li 서버가 응답하기로 결정하면 Access-Control-Allow-Origin 헤더를 반송한다
                li Access-Control-Allow-Origin 헤더의 소스가 맞지 않으면 브라우저에서 요청을 거부할 수 있다
                li: strong 브라우저의 크로스 도메인을 회피하기 위해 서버에서 대신 요청을 수행해줄 수 있다

            h3 CSP(Content-Security-Policy) 헤더
            p 참고 자료 : #[+asA('https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy')]
            p HTTP 응답 헤더를 이용하여, 응답 문서에서는 지정한 도메인 외의 요청은 브라우저에서 모두 거부하도록 할 수 있다
            +asCode('txt', 'Syntax').
                Content-Security-Policy: &lt;policy-directive&gt;; &lt;policy-directive&gt;

                &lt;policy-directive&gt; ::= &lt;directive&gt; &lt;value&gt;
            div
                h4 Directives
                ul
                    li default-src : 다른 fetch-directive들에 대한 기본값
                    li script-src : 자바스크립트 소스 제약
                    li img-src : 이미지(파비콘 포함) 소스 제약
                    li font-src : 폰트 소스 제약
                    li style-src : stylesheet 소스 제약
                    li frame-src : frame 및 iframe 소스 제약
                    li child-src : 웹 워커 및 frame, iframe 컨텍스트에 적용될 제약
                    li 이하 생략
            +asCode('txt', 'Facebook 응답 헤더 예시').
                content-security-policy: default-src data: blob: 'self' https://*.fbsbx.com 'unsafe-inline' *.facebook.com 'unsafe-eval' *.fbcdn.net;script-src *.facebook.com *.fbcdn.net *.facebook.net *.google-analytics.com *.google.com 127.0.0.1:* 'unsafe-inline' 'unsafe-eval' blob: data: 'self' connect.facebook.net;style-src fonts.googleapis.com *.fbcdn.net data: *.facebook.com 'unsafe-inline';connect-src *.facebook.com facebook.com *.fbcdn.net *.facebook.net wss://*.facebook.com:* wss://*.whatsapp.com:* attachment.fbsbx.com ws://localhost:* blob: *.cdninstagram.com 'self' wss://gateway.facebook.com wss://edge-chat.facebook.com wss://snaptu-d.facebook.com wss://kaios-d-test.facebook.com/ wss://kaios-d.facebook.com/ v.whatsapp.net *.fbsbx.com *.fb.com https://api.mapbox.com https://*.tiles.mapbox.com;font-src data: *.gstatic.com *.facebook.com *.fbcdn.net *.fbsbx.com;img-src *.fbcdn.net *.facebook.com data: https://*.fbsbx.com *.tenor.co media.tenor.com facebook.com *.cdninstagram.com fbsbx.com fbcdn.net *.giphy.com connect.facebook.net *.carriersignal.info blob: android-webview-video-poster: googleads.g.doubleclick.net www.googleadservices.com *.whatsapp.net *.fb.com *.oculuscdn.com;media-src *.cdninstagram.com blob: *.fbcdn.net *.fbsbx.com www.facebook.com *.facebook.com https://*.giphy.com data:;frame-src *.doubleclick.net *.google.com *.facebook.com www.googleadservices.com *.fbsbx.com fbsbx.com data: www.instagram.com *.fbcdn.net https://paywithmybank.com;worker-src blob: *.facebook.com data:;block-all-mixed-content;upgrade-insecure-requests;
            +table()
                +tds('data:', 'keyword "none"', 'data 스킴 비허용')
                +tds("blob: 'self'", 'keyword "self"', 'blob 스킴은 현재 origin과 동일한 경우 허용')
                +tds("https://*.fbsbx.com 'unsafe-inline'", 'keyword "unsafe-inline"', '인라인 script, style 사용 허용')
                +tds("*.facebook.com 'unsafe-eval'", 'keyword "unsafe-eval"', '동적 코드 평가 eval(), setImmediate(), window.execScript() 허용')

            h3 HTTP 기본 인증
            ol
                li 기본 인증을 안전하게 이용하는 유일한 방법은 SSL과 결합해서 사용하는 것
                li 클라이언트 최초 GET 요청
                +asCode() GET /family/jeff.jpt HTTP/1.0
                li 서버 401 Unauthorized 응답
                +asCode().
                    HTTP/1.0 401 Authorization Required
                    WWW-Authenticate: Basic realm="문서 집합 정보"
                p WWW-Authenticate 헤더 : 보안 영역 설명
                li 클라이언트 인증 GET 요청
                +asCode().
                    GET /family/jeff.jpg HTTP/1.0
                    Authorization: Basic "ID:base-64_encoded_password"
                p Authorization 헤더 : 인증 알고리즘, 사용자 이름, 비밀번호
                li 200 OK

            h3 다이제스트 인증
            ol
                li 비밀번호를 네트워크를 통해 보내지 않는다
                p 비밀번호를 비가역적으로 뒤섞은 지문(fingerprint), 요약(digest)을 보낸다
                li 재전송 공격을 방지하기 위해 서버는 클라이언트에 nonce를 넘기고, nonce는 다이제스트 생성에 관여한다. nonce는 밀리초 혹은 인증할 때마다 변경되므로, 재전송 공격에 안전하다
                li 클라이언트 최초 요청
                +asCode() GET /cgi-bin/checkout?cart=17854 HTTP/1.1
                li 서버 401 Unauthorized 응답
                +asCode().
                    HTTP/1.1 401 Unauthorized
                    WWW-Authenticate: Digest
                        realm="Shopping Cart"
                        qop="auth,auth-int"
                        nonce="66C4EF58..."
                li 클라이언트 인증 GET 요청
                +asCode().
                    GET /cgi-bin/checkout?cart=17854 HTTP/1.1
                    Authorization: Digest
                        username="bri"
                        realm="Shoppint Cart"
                        nonce="66C4EF58..."
                        uri="/cgi-bin/checkout?cart=17854"
                        qop="auth"
                        nc=0000001,
                        cnonce="CFA920710..."
                li 계산
                ol
                    li H(d) := 단방향 해시 함수
                    li KD(s, d) := 요약 함수 // s : sccret, d : data
                    li RFC 2617에서 제안된 알고리즘은 MD5(기본), MD5-sess
                    li H(d) = MD5(d), KD(s, d) = MD5(s:d)
                    li nonce = BASE64(timestamp H(timestamp":"ETag":"private_key))
                    li cnonce : 클라이언트가 서버를 인증할 목적으로 생성

            h3 HTTPS
            ul
                li: +goto('전자 서명', '/posts/algorithm/overview.html')
                li 디지털 인증서
                p 신뢰할 수 있는 조직에 의해 서명되고 검증된 신원 확인 정보
                li 암호(chipher)
                p 보통 연결을 수립할 때는 느린 공개키 암호를 사용하고, 이후 메시지 전송에는 빠른 대칭키 암호를 사용

            h3 Clear-Site-Data 응답 헤더
            ul
                li: +asA('https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Clear-Site-Data')
                li HTTPS에서만 사용 가능한 기능으로, 로그아웃과 같은 행위 이후 이 헤더를 설정함으로써 자동 데이터 삭제를 지시할 수 있다
                    p 로그아웃 페이지에 이를 직접 포함하는 경우, 삭제할 데이터가 많을수록 페이지 탐색이 그 만큼 지연(차단)되므로 로그아웃 페이지가 로드하는 다른 리소스에서 삭제를 지시하는 것이 권장된다
                li 단순하게 와일드카드(*)를 값으로 사용하여 지원되는 모든 데이터를 삭제하도록 지시 가능
            
            h3 Referrer-Policy 응답 헤더
            ul
                li: +asA('https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Referrer-Policy')
                li 3자 사이트에 대한 요청에 Referer 헤더를 아예 보내지 않거나, origin만 보내도록 제어할 수 있다
                li 현재 널리 채택된 브라우저 기본값은 "strict-origin-when-cross-origin"으로, 3자 사이트 요청의 Referer 헤더 값으로는 origin만 포함한다
                li HTML 메타데이터 태그를 이용하는 것으로도 설정 가능하다
                    +asCode('HTML') #{'<meta name="referrer" content="same-origin">'}
                li 특정 3자 사이트만 제어하고 싶다면 script, a, iframe 태그 안의 referrerpolicy 속성을 이용해 설정 가능하다

    h1 프록시
    ul
        li Forward proxy : 클라이언트가 요청하는 endpoint가 실제 서버 도메인. 프록시는 그 사이에서 중개
        li Reverse proxy : 클라이언트가 요청하는 endpoint는 프록시 서버 도메인. 클라이언트는 실제 서버 정보를 모른다
