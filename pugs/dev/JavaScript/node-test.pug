include ../../../source/skeleton.pug

+post({
    title: 'node:test',
    description: 'Node 내장 테스트 모듈',
})

    h1 참고 자료
    ul
        li: +asA('https://nodejs.org/api/test.html', '공식 문서 > node:test')
        li: +asA('https://nodejs.org/api/cli.html#--test', '공식 문서 > CLI > --test')

    h1 테스트 실행
    ul
        li 커맨드 라인을 통해 테스트를 실행할 수 있다
        +asCode('bash') node --test
        p 이때 실행되는 파일들은 아래와 같다
        ul
            li **/*.test.?(c|m)js
            li **/*-test.?(c|m)js
            li **/*_test.?(c|m)js
            li **/test-*.?(c|m)js
            li **/test.?(c|m)js
            li **/test/**/*.?(c|m)js
        p 또는 직접 GLOB 패턴을 지정할 수도 있다
        +asCode('bash') node --test "**/*.test.js" "**/*.spec.js"

        li 특정 테스트 케이스만 실행하기 원하는 경우를 위해 다음과 같은 옵션을 추가로 제공한다
        ul
            li 테스트 함수 정의에 only 옵션 설정 : 코드를 수정해야 하는 불편함이 있다
            li 커맨드 라인 옵션 이용 : --test-name-pattern, --test-skip-pattern
            ul
                li 위 옵션에 제공된 문자열은 정규표현식으로 변환되어 적용된다
                p 또는 정규표현식 리터럴을 직접 제공해도 된다
                +asCode('shell', '실행 예시').
                    $ node --test --test-name-pattern="/^test [1-3]$/i"
                    ✔ test 1 (1.317528ms)
                    ✔ TEST 1 (0.397122ms)
                    ﹣  TEST 1 (0.142681ms) # test name does not match pattern
                    ﹣ TEST 4 (0.173841ms) # test name does not match pattern
                li 옵션을 여러 번 설정할 수도 있다 : or 효과

        li 변경되는 테스트 파일을 자동으로 감지하여 재실행하고 싶다면 --watch 옵션을 설정하면 된다

        li 각 테스트 파일은 기본적으로 별도 자식 프로세스로 실행되고, 최대 병렬 실행 개수는 --test-concurrency 옵션으로 조절할 수 있다
        p 한 테스트 파일 안에서 테스트 케이스들을 병렬로 실행하고 싶은 경우, 테스트 정의 시 concurrency에 값(number | boolean)을 설정하면 된다

        li 코드 커버리지를 확인하고 싶다면 --experimental-test-coverage 옵션을 설정

    h1 테스트 함수
    p 테스트 함수로 다음 3가지 종류를 지원한다
    ul
        li 동기 함수 : 예외가 발생하면 실패로 간주
        li Promise를 반환하는 함수 : 반환된 Promise가 거부되면 실패로 간주
        li 콜백을 받는 함수 : 해당 콜백의 첫 번째 인자가 true로 간주되면 실패로 간주
    +codeBtn('/Repositories/Node/test-240924/test-function/test-function.js', 'JavaScript')
    +asCode('shell', '테스트 결과').
        $ node --test
        ✔ 동기 함수 > 성공 (1.286488ms)
        ✖ 동기 함수 > 실패 (0.386962ms)
        ✔ 비동기 함수 > 성공 (0.178121ms)
        ✖ 비동기 함수 > 실패 (0.578684ms)
        ✔ 콜백 함수 > 성공 (0.242881ms)
        ✖ 콜백 함수 > 실패 (0.225481ms)

    h1 Subtest
    p 테스트를 더 작은 테스트 단위로 쪼개는 것을 지원한다
    +codeBtn('/Repositories/Node/test-240924/subtest/test-subtest.js', 'JavaScript')
    +asCode('shell', '테스트 결과').
        $ node --test
        ▶ 조금 큰 테스트
          ✔ 단계1 (1.58425ms)
          ✔ 단계2 (0.179201ms)
        ▶ 조금 큰 테스트 (2.945458ms)

    h1 Skip
    p 테스트 케이스를 처음부터 또는 중간에 생략할 수 있다
    +codeBtn('/Repositories/Node/test-240924/skip/test-skip.js', 'JavaScript')
    +asCode('shell', '테스트 결과').
        $ node --test
        ﹣ 테스트1 (1.326328ms) # 이 테스트는 기획 변경으로 240927 부터 필요 없어짐
        ﹣ 테스트2 (0.771605ms) # 어떠한 이유로 이 테스트는 중도 생략됨
        ▶ 테스트3
          ✔ 단계1 (0.197561ms)
          ﹣ 단계2 (0.688044ms) # 어떠한 이유로 이 단계는 중도 생략됨
          ✔ 단계3 (0.204921ms)
        ▶ 테스트3 (2.240094ms)

    h1 TODO
    p 테스트 구현을 나중으로 미룰 수 있다
    +codeBtn('/Repositories/Node/test-240924/todo/test-todo.js', 'JavaScript')
    +asCode('shell', '테스트 결과').
        $ node --test
        ✔ 테스트1 (1.434289ms) # TODO

    h1 describe(), it() 별명
    p mocha와 같은 테스트 라이브러리로부터 쉽게 전환할 수 있도록 별명을 제공한다
    ul
        li describe() : suite()의 별명
        li it() : test()의 별명

    h1 시간초과
    ul
        li --test-timeout 옵션으로 밀리초를 설정하면 모든 테스트 케이스의 기본값으로 설정된다
        li 각 테스트 정의 시 timeout 옵션으로 밀리초를 설정하면, 해당 케이스 및 자식 케이스의 설정으로 사용된다

    h1 hook
    ul
        li before() : suite를 실행하기 전에 수행할 작업 정의
        li after() : suite를 실행한 뒤 수행할 작업 정의
        li beforeEach() : 현재 suite의 각 테스트를 실행하기 전에 수행할 작업 정의
        li afterEach() : 현재 suite의 각 테스트를 실행한 뒤 수행할 작업 정의
        li TestContext 객체를 이용해 hook를 추가로 적용할 수 있다
    +codeBtn('/Repositories/Node/test-240924/hook/test-hook.js', 'JavaScript')
    +asCode('shell', '테스트 결과').
        $ node --test
        before 1
        before 2
        beforeEach 1
        beforeEach 2
        before 3
        Test Case : suite1 > test1
        beforeEach 1
        beforeEach 2
        beforeEach 3
        Test Case : suite1 > test1 > step1
        beforeEach 1
        beforeEach 2
        beforeEach 3
        Test Case : suite1 > test1 > step2
        beforeEach 1
        beforeEach 2
        Test Case : suite1 > test2
        beforeEach 1
        beforeEach 2
        Test Case : suite1 > test2 > step1
        beforeEach 1
        beforeEach 2
        Test Case : suite1 > test2 > step2
        beforeEach 1
        Test Case : suite2 > test1
        beforeEach 1
        Test Case : suite2 > test1 > step1
        beforeEach 1
        Test Case : suite2 > test1 > step2
