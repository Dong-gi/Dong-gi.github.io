include ../../../source/skeleton.pug

+post({
    title: 'lombok',
    description: 'lombok 정리',
})

    h1 MacOS 수동 설정
    ol
        li 실행 파일이 있는 디렉터리에 lombok.jar 복사
        li eclipse.ini 또는 sts.ini 파일의 vmargs 영역에 아래 라인 추가
        +asCode('ini').
            -vmargs
            # ...
            -javaagent:lombok.jar

    h1 val
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokValExample.java', 'java')
        li 자동 타입 추론을 통한 타입 명시 생략을 가능하게 해준다
        li 할당 연산이 있는 지역 변수와 foreach에서만 사용 가능
        li val로 선언된 변수는 final이다
        li JDK 10부터 var 키워드가 추가되었으므로, 해당 버전부터는 필요없음

    h1 @NonNull
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokNonNullExample.java', 'java')
        li 메서드, 생성자의 매개변수에 null 검사를 추가해준다. null이면 NullPointerException 발생

    h1 @CleanUp
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokNonNullExample.java', 'java')
        li 지역 변수가 유효 스코프를 벗어나면 close()를 자동으로 호출한다
        li try ~ finally와 같은 방식으로 호출함을 보장한다
        li AutoCloseable을 구현할 필요가 없으며, 필요하다면 close 외 다른 인자 없는 메서드를 이용할 수 있다

    h1 @Getter, @Setter
    ol
        +codeBtn('/Repositories/Eclipse', 'java')
        li 필드의 기본적인 getter와 setter를 자동 구현해준다
        li 기본 시그니처는 [TYPE] get[Name], boolean is[Name], void set[Name]
        li 기본 접근 제한은 public. 가능한 설정은 PUBLIC, PROTECTED, PACKAGE, PRIVATE
        li 클래스에 이용하는 경우, 모든 non-static 필드에 getter/setter를 생성한다
        li 클래스의 getter/setter 설정을 무시하려면 각 필드에 AccessLevel.NONE을 설정한다
        li @Getter(lazy=true)의 경우, 처음 호출할 때 초기화되며, 이후 값은 캐시된다

    h1 @ToString
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokToStringExample.java', 'java')
        li 클래스명, 모든 non-static 필드값을 포함한 문자열을 반환하는 toString 메서드를 생성한다
        li 필드 이름을 포함하고 싶다면 includeFieldNames 필드를 사용(기본 true)
        li 출력에 제외할 필드는 @ToString.Exclude로 마킹한다
        li callSuper 옵션으로 수퍼클래스 toString()을 결과에 포함
        li @ToString.Include(name = "다른 표시 이름")
        li @ToString.Include(rank = 3) // 클수록 먼저 출력

    h1 @EqualsAndHashCode
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokEqualsAndHashCodeExample.java', 'java')
        li 모든 non-static, non-transient 필드를 이용하는 equals, hashCode 메서드를 생성한다
        li callSuper를 설정하는 경우, 수퍼클래스의 hashCode() 값을 해시 알고리즘에 이용한다

    h1 @NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokConstructorExample.java', 'java')
        li NoArgsConstructor는 기본생성자를 생성한다. final 필드로 인해 예외가 발생할 수 있으며, 이 경우 force 옵션을 사용하면 기본값으로 초기화된다
        li 생성된 팩터리 메서드는 제네릭을 추론한다

    h1 @Data
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokDataExample.java', 'java')
        li Target : ElementType.TYPE
        li 모든 필드에 대한 @ToString, @EqualsAndHashCode, @Getter 생성
        li 모든 non-final 필드에 대해 @setter생성
        li @RequiredArgsConstructor 생성

    h1 @Value
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokValueExample.java', 'java')
        li final한 @Data

    h1 @Builder
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokBuilderExample.java', 'java')
        li 메서드에 @Builder가 붙으면 아래의 7가지가 생성된다
        ul
            li (클래스 내부) 클래스명 + "Builder"를 이름으로 갖는 static inner class
            li (클래스 내부) builder() 메서드
            li (Builder 클래스 내부) 타깃 메서드 인자들과 같은 non-static, non-final 필드
            li (Builder 클래스 내부) 기본 생성자(AccessLevel.PACKAGE)
            li (Builder 클래스 내부) 각 필드의 이름으로 한 setter 메서드. 반환은 Builder 객체 자체
            li (Builder 클래스 내부) 타깃 메서드를 호출하는 build() 메서드
            li (Builder 클래스 내부) toString() 메서드
        li 클래스에 @Builder가 붙으면, @AllArgsConstructor(access = AccessLevel.PACKAGE)를 클래스에 붙이고 생성된 생성자에 @Builder를 붙이는 것과 같다
        p 명시적으로 작성된 생성자가 없을 때만 유효하다. 그러한 생성자가 있다면 생성자에 @Builder를 붙이면 된다
        li 컬렉션 필드에 @Singular를 적용하면 원소를 하나씩 추가하여 최종적으로 변경 불가능한 Collection 객체로 초기화할 수 있다
        p 원소는 필드의 단수명을 이름으로 하는 메서드를 이용해 추가할 수 있으며, 일반적인 단수명은 자동으로 추론하지만, 그 외의 경우에는 @Singuler("axis")처럼 value로 넘겨줘야 한다
        ul
            p 지원하는 Collection
            li java.util : Iterable, Collection, List, Set, SortedSet, NavigableSet, Map, SortedMap, NavigableMap
            li com.google.common.collect : ImmutableCollection, ImmutableList, ImmutableSet, ImmutableSortedSet, ImmutableMap, ImmutableBiMap, ImmutableSortedMap, ImmutableTable
        li toBuilder 옵션을 이용해 기존 객체로부터 시작하는 toBuilder 메서드를 생성할 수 있다
        li @Builder.ObtainVia를 필드/매개변수에 적용하면 해당 메서드로부터 값을 얻는다
        li 기타 옵션 : builderClassName, buildMethodName, builderMethodName
        li @Builder.Default를 필드/매개변수에 붙이면 빌드 세션에서 초기화하지 않아도 기본값으로 설정한다

    h1 @SneakyThrows
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokSneakyThrowsExample.java', 'java')
        li org.apache.commons.lang3.exception.ExceptionUtils#rethrow보다 강하게 throws 절을 사용하지 않아도 되게 해준다
        li Runnable처럼 불필요하게 외부로 예외를 던지거나, 예외가 결코 일어나지 않는 경우 등에 한하여 사용함이 바람직하다

    h1 @Synchronized
    ol
        +codeBtn('/Repositories/Eclipse/lombok-example/src/main/java/LombokSynchronizedExample.java', 'java')
        li synchronized 키워드의 편리한 축약형
        li 인스턴스 메서드에 붙으면 $lock 객체를, static 메서드에 붙으면 $LOCK 객체를 이용해 키워드와 동일한 동작을 한다
        li @Synchronized("ownFieldName")처럼 다른 객체를 이용해 동기화할 수도 있다

    h1 @With
    ol
        li 변경 불가능한 객체의 일부 필드만 변경한 복사본을 반환하는 메서드를 생성한다
        li non-static 필드 전체를 인자로 받는 생성자가 필요하다
        li @Setter와 마찬가지로 접근 수준을 제한할 수 있다
        li 실험 기능 : 자동 생성된 메서드에 애너테이션을 적용하고 싶다면 onMethod=@__({@AnnotationsHere})를 적용한다

    h1 @Log
    ol
        li 클래스에 log 필드를 자동으로 생성해준다
        li @CommonsLog : private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);
        li @Flogger : private static final com.google.common.flogger.FluentLogger log = com.google.common.flogger.FluentLogger.forEnclosingClass();
        li @JBossLog : private static final org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class);
        li @Log : private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());
        li @Log4j : private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class);
        li @Log4j2 : private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);
        li @Slf4j : private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);
        li @XSlf4j : private static final org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);
        li @CustomLog : private static final com.foo.your.Logger log = com.foo.your.LoggerFactory.createYourLogger(LogExample.class);
        p lombok.config 파일에 lombok.log.custom.declaration = com.foo.your.Logger com.foo.your.LoggerFactory.createYourLog(TYPE) 필요
