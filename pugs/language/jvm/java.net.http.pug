include ../../../source/skeleton.pug
+post('java.net.http 모듈 16', 'Java, java.net.http, JDK16', 'JDK16 java.net.http 모듈 정리')
    h1 java.net.http
    ul
        li HTTP 1.1, 2 클라이언트, 웹소켓 클라이언트 제공
        li HTTP 클라이언트는 재사용해야함... 재사용하지 않은 경우, JDK 11 프로덕션 환경에서 CLOSE_WAIT 소켓으로 가득차게 됨을 확인... 그러나 재사용하더라도 요청 실패에 대한 재시도를 반드시 추가해야 함; 그러나 최대 3번 실패 시 3초 뒤 다시 요청을 하더라도 끝내 실패하는 케이스를 운영중 경험함... 웹프레임워크를 이용중이라면, 제공해주는 클라이언트가 있을 테니 대신 이용하는 것이 좋음
        +asCode('java', 'HttpClient GET 요청 예').
            var client = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(5)).build();
            var request = HttpRequest.newBuilder().uri(URI.create("https://www.google.com")).timeout(Duration.ofSeconds(5)).GET().build();

            client.sendAsync(request, BodyHandlers.ofString()).handle((res, t) -> {
                if (t != null) {
                    // retry... or give up
                    throw new RuntimeException(t);
                } else if (res == null)
                    throw new NullPointerException("Response is null");
                else {
                    if (res.statusCode() != 200)
                        throw new IllegalStateException(res.statusCode() + res.body());
                    else
                        return res.body();
                }
            }).handle((body, t) -> {
                System.out.println(body);
                System.out.println(t);
                return body;
            });
        +asCode('java', 'POST 요청 예').
            var request = HttpRequest.newBuilder().uri(URI.create("XXX")).header("Content-Type", "application/json")
                    .timeout(Duration.ofSeconds(5)).POST(BodyPublishers.ofString(body)).build();
