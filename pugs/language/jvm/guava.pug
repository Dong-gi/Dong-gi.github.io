include ../../../source/skeleton.pug
+post('Guava 30.1', 'Guava', 'Guava 정리')
    h1 References
    ul
        li: +asA('https://github.com/google/guava/wiki')
        li: +asA('https://javadoc.io/doc/com.google.guava/guava/latest/index.html', 'javadoc')

    h1 ...base
    div
        h2 문자(열) 관련
        div
            h3 Ascii
            p 아스키 문자(열)에 대한 상수, 유틸리티 제공

            h3 CharMatcher
            p char 단위 문자(열)에 대한 매칭 수행. 보충 평면 글자는 지원하지 않음에 주의

            h3 Joiner
            ul
                li 각 객체의 toString() 결과를 Appendable 객체에 append
                li skipNulls(), useForNull(String) 설정이 없는 경우, null 인자에 대해 NullPointerException 발생
            +asCode('java').
                static Joiner on(String separator)
                Joiner.MapJoiner withKeyValueSeparator(String keyValueSeparator)

                &lt;A extends Appendable&gt; appendTo(A appendable, ...)
                String join(...)

            h3 Splitter
            p 고정된 구분자(패턴)을 이용해 겹치지 않는 부분 문자열 획득
            +asCode('java').
                static Splitter fixedLength(int length)   // 고정 길이로 자르기
                static Splitter on(Pattern separatorPattern)

                Splitter limit(int maxItems)
                Splitter omitEmptyStrings()
                Splitter trimResults()                    // 연속되는 공백 문자 제거
                Splitter trimResults(CharMatcher trimmer) // trimmer에 해당하는 모든 연속적인 문자 제거

                Splitter.MapSplitter withKeyValueSeparator(Splitter keyValueSplitter)

                Iterable&lt;String&gt; split(CharSequence sequence)
                List&lt;String&gt; splitToList(CharSequence sequence)
                Stream&lt;String&gt; splitToStream(CharSequence sequence)

            h3 Strings
            +asCode('java').
                static String nullToEmpty(String string)
                static String emptyToNull(String string)
                static boolean isNullOrEmpty(String string)

                static String repeat(String string, int count)
                static String padStart(String string, int minLength, char padChar)
                static String commonPrefix(CharSequence a, CharSequence b) // + commonSuffix

        h2 GC
        div
            h3 FinalizableReference
            +asCode('java') void finalizeReferent() // GC 이후 실행할 작업 정의

            h3 FinalizableSoftReference&lt;T>
            p SoftReference + FinalizableReference

            h3 FinalizableWeakReference&lt;T>
            p WeakReference + FinalizableReference

            h3 FinalizablePhantomReference&lt;T>
            p PhantomReference + FinalizableReference

            h3 FinalizableReferenceQueue
            p 백그라운드 스레드로 FinalizableReference::finalizeReferent()를 실행하는 ReferenceQueue

        h2 ETC
        div
            h3 Converter&lt;A,B&gt;
            p A -&gt; B, B -&gt; A 양방향 변환이 존재할 때, 그 변환
            +asCode('java').
                static &lt;A,B&gt; Converter&lt;A,B&gt; from(Function&lt;? super A,? extends B&gt; forwardFunction, Function&lt;? super B,? extends A&gt; backwordFunction)

                B convert(A a) // null은 항상 null로
                Iterable&lt;B&gt; convertAll(Iterable&lt;? extends A&gt; fromIterable)
                Converter&lt;B,A&gt; reverse()
                &lt;C&gt; Converter&lt;A,C&gt; andThen(Converter&lt;B,C&gt; secondConverter)

            h3 Defaults
            p 자바 언어 명세에 따라 임의 타입에 대한 기본값을 반환

            h3 Enums
            +asCode('java').
                static Field getField(Enum&lt;?&gt; enumValue)
                static &lt;T extends Enum&lt;T&gt;&gt; Optional&lt;T&gt; getIfPresent(Class&lt;T&gt; enumClass, String value)
                static &lt;T extends Enum&lt;T&gt;&gt; Converter&lt;String,T&gt; stringConverter(Class&lt;T&gt; enumClass)
                    // Enum.name()을 이용한 Converter 반환

            h3 Preconditions
            ul
                li 사전조건이 충족되지 않은 경우에만 예외 메시지 포매팅을 수행한다
                p 다만 메서드 인자는 항상 계산 수행된다. 이마저도 피하고 싶다면 try ... catch 구문을 이용하면 된다
                li 포매팅 문자열은 %s만 지원한다
            +asCode('java').
                static void checkArgument(boolean expression, errorMessage(Template)[, errorMessageArgs])
                    // 메서드 매개변수 테스트
                static void checkState(boolean expression, errorMessage(Template)[, errorMessageArgs])
                    // 인스턴스 상태 테스트
                static &lt;T extends Object&gt; checkNotNull(T obj, errorMessage(Template)[, errorMessageArgs])

            h3 Stopwatch
            ul
                li System.nanoTime()을 이용하여 경과 시간 측정
                +asCode('java', 'Android의 경우').
                    // 앱이 슬립 상태가 되면 더 이상 실행되지 않으므로,
                    Stopwatch.createStarted(
                        new Ticker() {
                            public long read() {
                                return android.os.SystemClock.elapsedRealtimeNanos();
                            }
                        });
                li 벽시계 System.currentTimeMillis()는 근사값이며, 주기적인 조정을 거치므로 부정확하다
            +asCode('java').
                static Stopwatch createStarted()
                static Stopwatch createUnstarted()

                Stopwatch start() + stop, reset
                boolean isRunning()

                Duration elapsed()
                long elapsed(TimeUnit desiredUnit)

            h3 Suppliers
            +asCode('java').
                static &lt;F,T&gt; Supplier&lt;T&gt; compose(Function&lt;? super F,T&gt;, Supplier&lt;F&gt; supplier)
                static &lt;T&gt; Supplier&lt;T&gt; memoize(Supplier&lt;T&gt; delegate)
                static &lt;T&gt; Supplier&lt;T&gt; memoizeWithExpiration(Supplier&lt;T&gt; delegate, long duration, TimeUnit unit)
                static &lt;T&gt; Supplier&lt;T&gt; ofInstance(T instance)
                static &lt;T&gt; Function&lt;Supplier&lt;T&gt;,T&gt; supplierFunction()
                static &lt;T&gt; Supplier&lt;T&gt; synchronizedSupplier(Supplier&lt;T&gt; delegate)

            h3 Throwables
            +asCode('java') static String getStackTraceAsString(Throwable throwable)

            h3 Verify
            ul
                li 사전조건이 충족되지 않은 경우에만 예외 메시지 포매팅을 수행한다
                p 다만 메서드 인자는 항상 계산 수행된다. 이마저도 피하고 싶다면 try ... catch 구문을 이용하면 된다
                li 포매팅 문자열은 %s만 지원한다
            +asCode('java').
                static void verify(boolean expression, errorMessage(Template)[, errorMessageArgs])
                static &lt;T&gt; T verifyNotNull(T reference, errorMessage(Template)[, errorMessageArgs])

    h1 ...cache
    div
        h2 Cache&lt;K,V&gt;
        p 스레드-안전한 캐시. 보통 CacheBuilder로 인스턴스 획득
        +asCode('java').
            V getIfPresent(Object key)
            V get(K key, Callable&lt;? extends V> loader)
                // 캐시에 없으면 loader를 통해 새로 저장하고 반환
            ImmutableMap&lt;K,V&gt; getAllPresent(Iterable&lt;?&gt; keys)
            ConcurrentMap&lt;K,V&gt; asMap()

            void put(K key, V value)
            void putAll(Map&lt;? extends K,​? extends V> m)

            void invalidate(Object key)
            void invalidateAll(Ierable&lt;?&gt; keys)

            long size()
            CacheStats stats()
                // 구현에 따라 기록 여부가 다를 수 있다
                // CacheBuilder의 경우, recordStats()를 호출한 경우에만 기록

            void cleanUp()
                // 구현에 따라 필요한 경우, 정리 연산 수행

        h2 LoadingCache&lt;K,V&gt;
        p 키가 캐시에 없는 경우(벌크 연산 getAll 포함) loader를 통해 새로 저장하고 반환한다
        +asCode('java').
            V get(K key)        // getUnchecked(K)의 경우 RuntimeException을 던진다
            ImmutableMap&lt;K,V&gt; getAll(Iterable&lt;? extends K&gt; keys)
            void refresh(K key) // loader를 통해 값을 갱신한다

        h2 CacheBuilder&lt;K,V&gt;
        ul
            li 자동 loading 설정 가능
            li LRU 옵션 설정 가능
            li 마지막 접근/쓰기 후 t 시간 경과하면 자동 삭제 설정 가능
            li 키/값 자동 WeakReference 래핑 설정 가능
            p WeakReference 사용 설정된 경우, equals() 대신 identity(==) 비교를 이용한다
            li 삭제된 엔트리에 대한 리스너 설정 가능
            li 캐시 통계 기록 가능
            li CacheBuilder를 통해 만든 캐시는 직렬화/역직렬화 가능하다. 다만, 캐시 설정 정보만 저장/복원된다
            li refresh 연산은 기본적으로 LoadingCache.refresh(K) -&gt; CacheLoader.reload(K, V)를 통해 수행된다
        +asCode('java').
            &lt;K1 extends K,V1 extends V&gt; CacheBuilder&lt;K1,V1&gt; weigher(Weigher&lt;? super K1,? super V1&gt; weigher)
                // Weigher : (key, value) 쌍으로부터 상대적인 우선순위를 반환. 낮을수록 높다
                // 호출 객체와 다른 객체가 반환되나, 둘 다 이용 가능하다. 다만 반환된 제네릭 객체는 타입-안전이 보장된다
            CacheBuilder&lt;K,V&gt; ticker(Ticker ticker)
                // 지정하지 않은 경우 System.nanoTime()을 기본 사용
            &lt;K1 extends K,V1 extends V&gt; CacheBuilder&lt;K1,V1&gt; removalListener(RemovalListener&lt;? super K1,? super V1&gt; listener)
                // 이 안에서 발생하는 예외는 전파되지 않고 Logger로만 기록된다
                // GC로 인해 제거된 경우, 키/값은 null일 수 있다

            &lt;K1 extends K,V1 extends V&gt; Cache&lt;K1,V1&gt; build()
            &lt;K1 extends K,V1 extends V&gt; LoadingCache&lt;K1,V1&gt; build(CacheLoader&lt;? super K1,V1&gt; loader)

        h2 CacheBuilderSpec
        ul
            li 캐시 설정을 외주할 수 있다
            +asCode('java').
                var spec = "maximumSize=10000,expireAfterWrite=10m";
                var graphs = CacheBuilder.from(spec)
                    .removalListener(MY_LISTENER)
                    .build(
                        new CacheLoader&lt;Key, Graph>() {
                            public Graph load(Key key) throws AnyException {
                                return createExpensiveGraph(key);
                            }
                        });
            li Duration은 정수 + [smhd]로 표현
        table.no-sort
            +tds('concurrencyLevel=[integer]', 'CacheBuilder.concurrencyLevel')
            +tds('initialCapacity=[integer]', 'CacheBuilder.initialCapacity')
            +tds('maximumSize=[long]', 'CacheBuilder.maximumSize')
            +tds('maximumWeight=[long]', 'CacheBuilder.maximumWeight')
            +tds('expireAfterAccess=[duration]', 'CacheBuilder.expireAfterAccess(Duration)')
            +tds('expireAfterWrite=[duration]', 'CacheBuilder.expireAfterWrite(Duration)')
            +tds('refreshAfterWrite=[duration]', 'CacheBuilder.refreshAfterWrite(Duration)')
            +tds('weakKeys', 'CacheBuilder.weakKeys()')
            +tds('softValues', 'CacheBuilder.softValues()')
            +tds('weakValues', 'CacheBuilder.weakValues()')
            +tds('recordStats', 'CacheBuilder.recordStats()')

        h2 CacheLoader&lt;K,V&gt;
        ul
            li LoadingCache에 사용되는 값 생성기
            li 보통 load(K)만 구현하는 것으로 충분하다. 나머지는 선택적
        +asCode('java').
            static &lt;K,V&gt; CacheLoader&lt;K,V&gt; from(Function&lt;K,V&gt; function)

            static &lt;K,V&gt; CacheLoader&lt;K,V&gt; asyncReloading(CacheLoader&lt;K,V&gt; loader, Executor executor)
                // reload()가 동기적인 경우에만 유용

            abstract V load(K key)                           // 최초 값 생성
            ListenableFuture&lt;V&gt; reload(K key, V value) // 기존 값을 대체할 값 생성

        h2 RemovalListeners
        +asCode('java') static &lt;K,V&gt; RemovalListener&lt;K,V&gt; asynchronus(RemovalListener&lt;K,V&gt; listener, Executor executor)

        h2 Cache 대리자
        p ForwardingCache, ForwadingCache.SimpleForwardingCache, ForwadingLoadingCache, ForwadingLoadingCache.SimpleForwardingLoadingCache

    h1 ...collect
    div
        h2 Collection types
        div
            h3 ImmutableCollection&lt;E&gt;
            ul
                li 래핑한 collection을 변경하면 내용이 바뀌는 Collections.unmodifiableCollection()보다 강력
                li null 원소를 허용하지 않는다
                li 스레드-안전하다
                li ImmutableList, ImmutableSet, ImmutableSortedSet, ImmutableMap, ImmutableSortedMap, ImmutableBiMap, ImmutableMultiset, ImmutableMultimap, ImmutableListMultimap, ImmutableSetMultimap, ImmutableTable
                li ImmutableCollection.Builder&lt;E>, ImmutableList.Builder&lt;E> 등도 제공

            h3 BiMap&lt;K,V&gt;
            ul
                li 1:1 대응 관계를 표현한다
                li 구현체 : HashBiMap(K, V 둘 다 해시 가능), EnumBiMap(두 enum 간 대응), EnumHashBiMap
            +asCode('java').
                V forcePut(K key, V value) // put(K, V) 실행 전에 value와 관계된 모든 엔트리 제거
                                           // 반환값 : 기존 key에 대응됐던 값
                BiMap&lt;V,K&gt; inverse() // 반대 방향 뷰 반환

            h3 Multiset&lt;E&gt;
            ul
                li Bag으로도 불리는 자료형. 값의 중복을 허용(최대 Integer.MAX_VALUE)한다
                li 구현체 : HashMultiset(HashMap을 구현에 이용), LinkedHashMultiset(결정적 iteration), TreeMultiset(iteration 정렬 지정), EnumMultiset(모든 연산이 상수 시간), ConcurrentHashMultiset(동시성 추가, null 비허용)

            h3 Multimap&lt;K,V&gt;
            ul
                li 하나의 키에 대해 여러 값을 매핑
                li ListMultimap : List를 이용해 값 삽입 순서를 보존. 엔트리 중복 가능
                p 관련 구현체 : ArrayListMultimap, LinkedListMultimap
                li SetMultimap : Set을 이용해 값 중복 제거
                p 관련 구현체 : HashMultimap, LinkedHashMultimap(삽입 순 iteration)
                li SortedSetMultimap : 값집합을 정렬한 SetMultimap
                p 관련 구현체 : TreeMultimap(키/값 각각 정렬)
            +asCode('java').
                Map&lt;K,Collection&lt;V&gt;&gt; asMap()
                Multiset&lt;K&gt; keys()
                Collection&lt;V&gt; replaceValues(K key, Iterable&lt;? extends V&gt; values)
                // 이하 생략
            +asCode('java', 'Value uniqueness - ListMultimap').
                var m = MultimapBuilder.hashKeys().linkedListValues().&lt;Integer, Integer>build();
                m.put(1, 3);
                m.put(2, 3);
                m.put(1, 1);
                m.put(1, 2);
                m.put(1, 1);

                assertEquals(5, m.size()); // 같은 키에 대한 값 중복 제거 X
                assertEquals(5, m.values().size());
            +asCode('java', 'Value uniqueness - SetMultimap').
                var m = MultimapBuilder.hashKeys().hashSetValues().&lt;Integer, Integer>build();
                m.put(1, 3);
                m.put(2, 3);
                m.put(1, 1);
                m.put(1, 2);
                m.put(1, 1);

                assertEquals(4, m.size()); // 같은 키에 대하여는 값 중복 제거
                assertEquals(4, m.values().size()); // 같은 키에 대해서만 값 중복 제거

            h3 Table&lt;R,C,V&gt;
            ul
                li (행 key, 열 key) 쌍에 대한 값을 보존
                li Sparse 데이터 표현에 좋다
                li 행/열 모두로 조회 가능하지만, 일부 구현은 열로 조회하는 경우 성능이 좋지 않을 수 있다
                li 메서드가 반환한 모든 Collection/Map은 테이블에 대한 writable view다
                p: strong 구현에 따라 테이블 변경 메서드를 지원하지 않거나, 메서드가 반환한 Collection/Map이 writable하지 않을 수 있다
                li 구현체 : ArrayTable(고정 크기 2차원 배열 이용), HashBasedTable(linked hash table 이용), TreeBasedTable(행/열 키 각각을 정렬)
            +asCode('java').
                Set&lt;Table.Cell&lt;R,C,V&gt;&gt; cellSet()
                Map&lt;C,V&gt; row(R rowKey) + column
                Map&lt;R,Map&lt;C,V&gt;&gt; rowMap() + columnMap

            h3 ClassToInstanceMap&lt;B&gt;
            ul
                li Class -&gt; instance 매핑
                p int.class와 Integer.class는 서로 다름에 유의
                li 제네릭 매핑에는 TypeToInstanceMap을 이용하면 된다
                li 구현체 : ImmutableClassToInstanceMap, MutableClassToInstanceMap

            h3  Queue
            div
                h4 EvictingQueue&lt;E>
                p add()시, 최대 개수에 도달했다면 head 요소 삭제. 논리적으로 circular buffer와 동일

                h4 MinMaxPriorityQueue&lt;E&gt;
                ul
                    li A double-ended priority queue
                    p 최대 원소에 대해서도 상수 시간 접근이 가능하며, 최대 원소에 대한 연산도 지원
                    li 크기 제한을 설정하는 경우, 크기가 초과될 때마다 최대 원소 제거

        h2 Utility
        div
            h3 Collections2
            +asCode('java').
                static &lt;E&gt; Collection&lt;List&lt;E&gt;&gt; permutations(Collection&lt;E&gt; elements)
                    // + orderedPermutations

            h3 Comparators
            +asCode('java').
                static &lt;T,​S extends T> Comparator&lt;Iterable&lt;S>> lexicographical​(Comparator&lt;T> comparator)
                    // Iterable을 사전순으로 정렬해준다
                    // e.g. [] &lt; [1] &lt; [1, 1] &lt; [1, 2] &lt; [2]
                    // + isInOrder, isInStrictOrder

                static &lt;T> Collector&lt;T,​?,​List&lt;T>> least​(int k, Comparator&lt;? super T> comparator)
                    // 최소 원소 k개를 고르는 스트림 최종연산
                    // + greatest

                static &lt;T> T min​(@Nullable T a, @Nullable T b, Comparator&lt;T> comparator) + max

            h3 ComparisonChain
            +asCode('java').
                ComparisonChain.start()
                    .compare(this.aString, that.aString)
                    .compare(this.anInt, that.anInt)
                    .result()

            h3 Iterators + Iterables
            +asCode('java').
                static &lt;T&gt; Iterator&lt;T&gt; cycle(T... elements)
                static &lt;T&gt; PeekingIterator&lt;T&gt; peekingIterator(Iterator&lt;? extends T&gt; iterator)
                static &lt;T&gt; T[] toArray(Iterator&lt;? extends T&gt; iterator, Class&lt;T&gt; type)

                static int advance(Iterator&lt;?&gt; iterator, int numberToAdvance)
                static &lt;T&gt; Iterator&lt;T&gt; concat(...)
                static &lt;T&gt; Iterator&lt;T&gt; limit(Iterator&lt;T&gt;, int limitSize)
                static &lt;T&gt; Iterator&lt;T&gt; consumingIterator(Iterator&lt;T&gt; iterator)
                    // 원소를 소비하면서 삭제. Iterator.remove()를 지원해줘야 다음 next()가 동작한다
                static &lt;T&gt; UnmodifiableIterator&lt;T&gt; filter(Iterator&lt;?&gt; unfiltered, Class&lt;T&gt; desiredType)
                static &lt;T&gt; UnmodifiableIterator&lt;T&gt; mergeSorted(...)
                static &lt;T&gt; UnmodifiableIterator&lt;List&lt;T&gt;&gt; partition(...) + paddedPartition
                static &lt;F,T&gt; Iterator&lt;T&gt; transform(Iterator&lt;F&gt; fromIterator, Function&lt;? super F,? extends T&gt; function)

                static &lt;T&gt; boolean addAll(Collection&lt;T&gt; addTo, Iterator&lt;? extends T&gt; iterator)
                    // + removeAll, retainAll, removeIf
                static &lt;T&gt; boolean all(Iterator&lt;T&gt; iterator, Predicate&lt;? super T&gt; predicate)
                    // + any, contains, elementsEqual
                static &lt;T&gt; T find(Iterator&lt;T&gt; iterator, Predicate&lt;? super T&gt; predicate)
                    // + tryFind
                static int frequency(Iterator&lt;?&gt; iterator, Object element
                    // + indexOf, size
                static &lt;T&gt; T get(Iterator&lt;? extends T&gt; iterator, int position, T defaultValue)
                    // + getLast, getNext, getOnlyElement

            h3 Lists
            p Cartesian product, (Array|Linked|CopyOnWrite)List 생성 등

            h3 Maps
            p Set과 Function&lt;K,V&gt;를 이용한 Map 생성, 두 Map 사이의 차분, 필터링, 신규 맵 생성 등

            h3 MapMaker
            ul
                li 유사 ConcurrentHashMap을 만든다
                li weakKeys()를 지정하는 경우 equals() 대신 identity(==) 비교를 이용한다

            h3 Multimaps
            p Map&lt;K, Collection&lt;V&gt;&gt;로 변환, 필터링, Multimap&lt;V,K&gt;로 변환, 엔트리 일괄 변경 등

            h3 MultimapBuilder&lt;K0,​V0>
            ul
                li K0, V0 : 각각 키, 값 upper bound
                li hashKkeys() : hash table 사용
                li linkedHashKeys() : hash table 사용 + 키 삽입 순서 기록
                li treeKeys() : TreeMap 사용
                li enumKeys() : EnumMap 사용

            h3 Multisets
            p Multiset 사이의 포함 관계, difference, sum, union 등

            h3 ObjectArrays
            p 배열 접합, 새 배열 할당

            h3 Queues
            p (Blocking)Queue, ArrayDeque, PriorityQueue 생성 등

            h3 Sets
            p Cartesian product, 신규 집합 생성 등

            h3 Streams
            +asCode('java').
                static &lt;T> Stream&lt;T> stream​(Iterable&lt;T> iterable)
                static &lt;T> Stream&lt;T> concat​(Stream&lt;? extends T>... streams)
                static &lt;A,​B,​R> Stream&lt;R> zip​(Stream&lt;A> streamA, Stream&lt;B> streamB, BiFunction&lt;? super A,​? super B,​R> function)
                static &lt;A,​B> void forEachPair​(Stream&lt;A> streamA, Stream&lt;B> streamB, BiConsumer&lt;? super A,​? super B> consumer)
                static &lt;T,​R> Stream&lt;R> mapWithIndex​(Stream&lt;T> stream, Streams.FunctionWithIndex&lt;? super T,​? extends R> function)
                static &lt;T> Optional&lt;T> findLast​(Stream&lt;T> stream)

            h3 Tables
            p 값 일괄 변경, transpose(행-열 뒤집기) 등

        h2 Ranges
        div
            h3 DiscreteDomain&lt;C extends Comparable>
            p 이산 자료형 전체 범위를 표현한다. 예를 들어, 정수 전체 집합은 표현할 수 있지만, 소수 전체 집합은 표현할 수 없다
            +asCode('java').
                static DiscreteDomain&lt;BigInteger&gt; bigIntegers()
                    // + integers, longs

                C maxValue() + minValue             // 없으면 NoSuchElementException
                abstract C next(C value) + previous // 없으면 null

            h3 Range&lt;C extends Comparable>
            ul
                li 대소 관계가 있는 자료형에 대해, 임계값을 이용해 범위 1개를 표현한다
                li (a..b), [a..b], (a..b], [a..b), (a..inf), [a..inf), (-inf..b), (-inf..b], (-inf..inf)

            h3 ContiguousSet&lt;C extends Comparable>
            p DiscreteDomain 상에서의 Range 하나를 표현한다

            h3 RangeMap&lt;K extends Comparable>
            p Range -&gt; V 매핑을 표현한다

        h2 Forwawrding collections
        div
            h3 ForwardingObject
            ul
                li 장식자 패턴 구현을 위한 최상위 추상 클래스
                li delegate()는 장식할 인스턴스를 반환하면 된다
                li hashCode(), equals(Object)는 backing object로 포워딩하지 않는다
                li ForwardingList, ForwardingMap, ... 등 interface-specific 서브클래스를 이용하거나, 직접 정의하면 된다

        h2 Others
        div
            h3 Interner&lt;E&gt;
            p 임의 불변 타입에서 String.intern()과 유사한 기능을 제공함을 표현

            h3 Interners
            +asCode('java').
                static &lt;E&gt; Interner&lt;E&gt; newStrongInterner() + weak
                static Interners.InternerBuilder newBuilder()

            h3 Ordering
            ul
                li 부가 기능이 있는 Comparattor
                p Comparators Since 21.0에도 있는 기능들임
                li 인스턴스 획득
                ul
                    li compare(T, T) 재정의
                    li from(Comparator), natural(), explicit(...) 등

    h1 ...escape
    div
        p: strong XML에 유용한 Escaper 제공

    h1 ...eventbus
    div
        h2 @interface Subscribe
        p 이벤트 객체 하나만 인자로 받는 구독자 메서드 표시

        h2 @interface AllowConcurrentEvents
        p 구독자 메서드가 스레드-안전함을 표시

        h2 EventBus
        +asCode('java').
            void register​(Object object)   // public @Subscribe 메서드를 갖는 구독자 등록
            void post​(Object event)        // 이벤트 발행

        h2 AsyncEventBus
        p 지정 Executor로 처리

        h2 DeadEvent
        p 처리되지 않은 이벤트는 DeadEvent로 감싸여 한 번 더 발행된다

    h1 ...graph
    div
        h2 Graph&lt;N&gt;
        ul
            li 지원 : 방향/무방향 그래프, self-loop 허용/비허용, 정점/간선에 대한 삽입 순서 보존/정렬/비정렬
            li 인스턴스 획득은 GraphBuilder 이용

        h2 ValueGraph&lt;N,​V>
        ul
            li Graph + 간선 가중치
            li 인스턴스 획득은 ValueGraphBuilder 이용

        h2 Network&lt;N,​E>
        ul
            li Graph + 모든 간선은 unique 객체
            li 두 정점 사이에 복수의 간선을 허용할 수 있다
            li 인스턴스 획득은 NetworkBuilder 이용

    h1 ...hash
    div
        h2 Hashing
        p adler32, crc32, crc32c, hmacMd5, hmacSha256, md5, sha512, ...

    h1 ...html.HtmlEscapers
    p Escapers for HTML

    h1 ...io
    div
        h2 Files
        p java.io.File에 대한 확장. java.nio.Files에서 같은 기능을 많이 제공한다
        +asCode('java').
            static CharSource asCharSource​(File file, Charset charset)
            static CharSink asCharSink​(File file, Charset charset, FileWriteMode... modes)
            static void touch​(File file)
            static void createParentDirs​(File file)
            static MappedByteBuffer map​(File file)
            static String getFileExtension​(String fullName)
            static String getNameWithoutExtension​(String file)
            static Traverser&lt;File> fileTraverser()

        h2 MoreFiles
        p java.nio.Files에 대한 확장
        +asCode('java').
            static CharSource asCharSource​(Path path, Charset charset, OpenOption... options)
            static CharSink asCharSink​(Path path, Charset charset, OpenOption... options)
            static ImmutableList&lt;Path> listFiles​(Path dir)
            static Traverser&lt;Path> fileTraverser()
            static Predicate&lt;Path> isDirectory​(LinkOption... options) + isRegularFile
            static void touch​(Path path)static void touch​(Path path)
            static void createParentDirectories​(Path path, FileAttribute&lt;?>... attrs)
            static String getFileExtension​(Path path)
            static String getNameWithoutExtension​(Path path)
            static void deleteRecursively​(Path path, RecursiveDeleteOption... options)
            static void deleteDirectoryContents​(Path path, RecursiveDeleteOption... options)

        h2 LineReader
        p \n, \r, \r\n 무관하게 한 줄씩 읽을 수 있게 해준다

        h2 Resources
        p 클래스패스 상의 리소스에 접근하는 유틸리티를 제공한다

    h1 ...math
    ul
        li IntMath, LongMath, DoubleMath, BigIntegerMath, BigDecimalMath
        li Quantiles : 분위수 계산

    h1 ...net
    ul
        li HttpHeaders, MediaType : 상수 제공
        li PercentEscaper, UrlEscapers : Escaper 제공

    h1 ...primitives
    ul
        li Array : ImmutableIntArray, ImmutableLongArray, ImmutableDoubleArray
        li Type : UnsignedInteger, UnsignedLong	
        li Utility : Booleans, ..., Doubles, Primitives, UnsignedLongs

    h1 ...reflect
    div
        h2 TypeToInstanceMap&lt;B&gt;
        ul
            li TypeToken -&gt; instance 매핑
            li ImmutableTypeToInstanceMap&lt;B>, MutableTypeToInstanceMap&lt;B>

        h2 ClassPath
        p ClassLoader로부터 모든 클래스, 리소스 스캔

        h2 Reflection
        +asCode('java').
            static String getPackageName​(Class&lt;?> clazz)
            static String getPackageName​(String classFullName)
                // 클래스 이름만 파싱하여 패키지 이름을 판단한다

            static &lt;T> T newProxy​(Class&lt;T> interfaceType, InvocationHandler handler)
                // 단일 인터페이스 프록시 생성에 편리

        h2 TypeToken&lt;T>
        +asCode('java').
            // 인스턴스 획득 1
            new TypeToken&lt;List&lt;String>>() {}
            // 인스턴스 획득 2
            abstract class IKnowMyType&lt;T> {
                TypeToken&lt;T> type = new TypeToken&lt;T>(getClass()) {};
            }
            new IKnowMyType&lt;String>() {}.type => String

            final &lt;X> TypeToken&lt;T> where​(TypeParameter&lt;X> typeParam, TypeToken&lt;X> typeArg)
                // 동적으로 제네릭 타입을 치환
                // e.g.
                static &lt;K, V> TypeToken&lt;Map&lt;K, V>> mapOf(TypeToken&lt;K> keyType, TypeToken&lt;V> valueType) {
                  return new TypeToken&lt;Map&lt;K, V>>() {}
                      .where(new TypeParameter&lt;K>() {}, keyType)
                      .where(new TypeParameter&lt;V>() {}, valueType);
                }

            final TypeToken&lt;?> resolveType​(Type type)
                // 제네릭 실제 타입 획득
                // e.g.
                new TypeToken&lt;List&lt;String>>() {}.resolveType(List.class.getMethod("get", int.class).getGenericReturnType())
                    == String.class

            final TypeToken.TypeSet getTypes()
                // 현재 타입 + 선조 타입 + 구현 인터페이스
                // e.g. List&lt;String> =>
                // [java.util.List&lt;java.lang.String>, java.util.Collection&lt;java.lang.String>, java.lang.Iterable&lt;java.lang.String>]

            final TypeToken&lt;? super T> getSupertype​(Class&lt;? super T> superclass)
            final TypeToken&lt;? extends T> getSubtype​(Class&lt;?> subclass)
                // e.g.
                var type1 = new TypeToken&lt;List&lt;String>>() {};
                var type2 = type1.getSupertype(Iterable.class); == java.lang.Iterable&lt;java.lang.String>
                var type3 = type2.getSubtype(List.class);       == java.util.List&lt;java.lang.String>

            final @Nullable TypeToken&lt;?> getComponentType()
                // 배열 원소 타입 반성

            final Invokable&lt;T,​Object> method​(Method method)
            final Invokable&lt;T,​T> constructor​(Constructor&lt;?> constructor)

            // + wrap, unwrap
            // + isSupertypeOf, isSubtypeOf, isArray, isPrimitive

    h1 ...util.concurrent
    div
        h2 ListenableFuture&lt;V>
        ul
            li 연산 완료 리스너(들)을 가질 수 있는 Future
            p JavaScript의 promise 체인과 유사한 로직 작성을 돕기 위해 개발됐다
            li 이미 완료된 경우, 추가되는 리스너는 즉시 실행된다
            li 리스너를 실행할 Executor 지정 가능
        +asCode('java') void addListener​(Runnable listener, Executor executor)

        h2 FluentFuture&lt;V>
        p ListenableFuture에 체인 기능 추가

        h2 SettableFuture&lt;V>
        p 결과를 외부에서 설정 가능한 ListenableFuture

        h2 Futures
        +asCode('java').
            static &lt;V> ListenableFuture&lt;V> immediateFuture​(@Nullable V value)
            static ListenableFuture&lt;Void> immediateVoidFuture()
            static &lt;V> ListenableFuture&lt;V> immediateFailedFuture​(Throwable throwable)
            static &lt;V> ListenableFuture&lt;V> immediateCancelledFuture()

            static &lt;O> ListenableFuture&lt;O> submit​(Callable&lt;O> callable, Executor executor)
            static ListenableFuture&lt;Void> submit​(Runnable runnable, Executor executor)
            static &lt;O> ListenableFuture&lt;O> submitAsync​(AsyncCallable&lt;O> callable, Executor executor)
            static &lt;O> ListenableFuture&lt;O> scheduleAsync​(AsyncCallable&lt;O> callable, Duration delay, ScheduledExecutorService executorService)

            static &lt;V,​X extends Throwable> ListenableFuture&lt;V> catching​(ListenableFuture&lt;? extends V> input, Class&lt;X> exceptionType, Function&lt;? super X,​? extends V> fallback, Executor executor)
            static &lt;V,​X extends Throwable> ListenableFuture&lt;V> catchingAsync​(ListenableFuture&lt;? extends V> input, Class&lt;X> exceptionType, AsyncFunction&lt;? super X,​? extends V> fallback, Executor executor)

            static &lt;V> ListenableFuture&lt;V> withTimeout​(ListenableFuture&lt;V> delegate, Duration time, ScheduledExecutorService scheduledExecutor)
            static &lt;I,​O> ListenableFuture&lt;O> transform​(ListenableFuture&lt;I> input, Function&lt;? super I,​? extends O> function, Executor executor)
            static &lt;I,​O> ListenableFuture&lt;O> transformAsync​(ListenableFuture&lt;I> input, AsyncFunction&lt;? super I,​? extends O> function, Executor executor)
            static &lt;I,​O> Future&lt;O> lazyTransform​(Future&lt;I> input, Function&lt;? super I,​? extends O> function)
                // get() 호출이 있을 때 function 호출

            static &lt;V> ListenableFuture&lt;List&lt;V>> allAsList​(ListenableFuture&lt;? extends V>... futures)
            static &lt;V> ListenableFuture&lt;List&lt;V>> successfulAsList​(ListenableFuture&lt;? extends V>... futures)
            static &lt;T> ImmutableList&lt;ListenableFuture&lt;T>> inCompletionOrder​(Iterable&lt;? extends ListenableFuture&lt;? extends T>> futures)

            static &lt;V> Futures.FutureCombiner&lt;V> whenAllComplete​(ListenableFuture&lt;? extends V>... futures)
            static &lt;V> Futures.FutureCombiner&lt;V> whenAllSucceed​(ListenableFuture&lt;? extends V>... futures)

            static &lt;V> ListenableFuture&lt;V> nonCancellationPropagating​(ListenableFuture&lt;V> future)
                // 출력 tufure를 취소해도 입력 future를 취소하지 않음

            static &lt;V> void addCallback​(ListenableFuture&lt;V> future, FutureCallback&lt;? super V> callback, Executor executor)
            static &lt;V> V getDone​(Future&lt;V> future)

        h2 Futures.FutureCombiner&lt;V>
        p 다른 ListenableFuture들의 결과들을 이용하는 ListenableFuture
        +asCode('java').
            &lt;C> ListenableFuture&lt;C> callAsync​(AsyncCallable&lt;C> combiner, Executor executor)
            &lt;C> ListenableFuture&lt;C> call​(Callable&lt;C> combiner, Executor executor)
            ListenableFuture&lt;?> run​(Runnable combiner, Executor executor)

            // e.g.
            Futures.whenAllSucceed(loginDateFuture, recentCommandsFuture)
                .call(
                    () ->
                        new UsageHistory(
                            username,
                            Futures.getDone(loginDateFuture),
                            Futures.getDone(recentCommandsFuture)),
                    executor);

        h2 ListeningExecutorService
        p Future 대신 ListenableFuture를 반환하는 ExecutorService

        h2 ListeningScheduledExecutorService
        p ScheduledFuture 대신 ListenableScheduledFuture를 반환하는 ScheduledExecutorService

        h2 Callables
        +asCode('java') static &lt;T> AsyncCallable&lt;T> asAsyncCallable​(Callable&lt;T> callable, ListeningExecutorService listeningExecutorService)

        h2 ClosingFuture&lt;V>
        +asCode('java').
            // 비동기 연산에 사용된 자원을 자동으로 닫게 해준다
            ClosingFuture.submit(
                    closer -> closer.eventuallyClose(database.newTransaction(), closingExecutor), executor)
                .transformAsync((closer, transaction) -> transaction.queryClosingFuture("..."), executor)
                .transform((closer, result) -> result.get("userName"), directExecutor())
                .catching(DBException.class, e -> "no user", directExecutor())
                .finishToFuture();

        h2 CycleDetectingLockFactory
        p lock 요구 시 사이클을 감지하는 ReentrantLock, ReentrantReadWriteLock 인스턴스 생성

        h2 Service
        ul
            li 가동 상태(NEW -> STARTING -> RUNNING -> STOPPING -> TERMINATED / FAILED)와 연관 메서드를 갖는 객체
            li 중간 구현체 : AbstractExecutionThreadService, AbstractIdleService, AbstractScheduledService, AbstractService

        h2 ServiceManager
        p 서비스 집합 관리자

        h2 TimeLimiter
        ul
            li 메서드 호출 제한 시간을 둔다
            li 구현체 : SimpleTimeLimiter

        h2 RateLimiter
        p 초당 permit 사용량을 제한한 세마포어

        h2 ThreadFactoryBuilder
        p 스레드 이름, daemon 여부, 우선순위 등 설정 간소화

    h1 ...xml.XmlEscapers
    p Escapers for XML
