include ../../source/skeleton.pug

+post({
    title: 'CI/CD',
    description: 'CI/CD 정리',
})

    h1 TeamCity
    div
        h2 Concepts
        ul
            li TeamCity Server
            p 연결된 build agent들을 관리. 큐잉된 빌드 작업들을 agent에 분배. 빌드 결과들은 DB(기본 내장 but 외부 서버 설정 권장)에 저장된다
            li Build Agent
            p 실제 빌드 절차를 실행하는 프로그램. 서버와 다른 환경에서 실행 권장
            li Project
            p 특정 버전/릴리스의 Build Configuration 집합
            li Build Configuration
            p 빌드를 위한 VCS Root, Build   Step, Build Trigger 집합
            li VCS Root
            p 버전 관리 시스템 설정
            li Build Step
            p 빌드 툴 실행, 테스트 프레임워크 실행, 코드 분석 실행 따위의 빌드 절차
            li Build Trigger
            p 빌드를 실행할 이벤트. VCS trigger로 소스 수정을 감지한 경우 빌드하도록 설정 가능
            li Build Artifacts
            p 빌드 산출물

        h2 Installation
        p
            +asA('https://www.jetbrains.com/help/teamcity/installation-quick-start.html')
            |에서 제공하는 바이너리 이용. 또는 도커 컨테이너 이용. 설치 후 서버에 접속하여 초기화 진행
        +asCode('yaml', 'docker-compose.yml').
            version: "3.0"

            services:
              server:
                image: jetbrains/teamcity-server
                ports:
                  - 18111:8111
                volumes:
                  - ./data:/data/teamcity_server/datadir
                  - ./logs:/opt/teamcity/logs

              worker:
                image: jetbrains/teamcity-agent
                environment:
                  SERVER_URL: server:18111
                volumes:
                  - ./config:/data/teamcity_agent/conf

        h2 Configure and Run Build
        ol
            li Project 생성
            li Build configuration 생성
            li Build step 추가
            li Build 실행

    h1 GitHub Action + AWS Auto Scaling
    ol
        li 기준 AMI 생성
        p 모든 구성이 완료된 EC2 인스턴스로부터 이미지 생성
        li AMI를 이용하는 launch template 생성
        li Launch template으로 인스턴스 생성 시 CodeDeploy 실행하도록 User data 설정
        +asCode('shell').
            #!/bin/bash
            aws configure set default.region ${xxx}
            aws deploy create-deployment --application-name ${xxx} --deployment-config-name ${xxx} --deployment-group-name ${xxx} --s3-location bucket=${bucket_name},bundleType=zip,key=${s3_object_key}
        li Launch template - User data 에서 사용할 CodeDeploy 생성
        li 빌드를 zip으로 S3에 올리고 CodeDeploy를 실행하도록 GitHub Action 구성
        p 구성 편의를 위해 S3 key는 상수 이용
        +asCode('yaml').
            name: Prod Deployment
            env:
              PROJECT_NAME: prod_deploy
              AWS_BUCKET_NAME: ${{secrets.S3_DEPLOY_BUCKET_NAME}}

            on:
              push:
                branches: [ prod ]
              workflow_dispatch:
                inputs:
                  check_out_hash:
                    description: 'Commit Hash'
                    required: true

            jobs:
              build:
                runs-on: ubuntu-latest

                steps:
                - name: Checkout
                  uses: actions/checkout@v2
                  with:
                    ref: ${{ github.event.inputs.check_out_hash }}

                - name: Make properties file with secrets
                  run: bash create_prod_properties.sh ${{secrets.PASSWORD}} $GITHUB_SHA

                - uses: actions/cache@v2
                  with:
                    path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                    key: ${{ runner.os }}-gradle-$PROJECT_NAME-${{ hashFiles('**/*.gradle*') }}
                    restore-keys: |
                      ${{ runner.os }}-gradle-$PROJECT_NAME-

                - name: Build bootJar
                  run: bash ./gradlew bootJar

                - name: Make zip file
                  run: zip -j ./app.zip ./appspec.yml ./build/libs/app.jar
                  shell: bash

                - name: Configure AWS credentials
                  uses: aws-actions/configure-aws-credentials@v1
                  with:
                    aws-access-key-id: ${{secrets.S3_DEPLOY_ACCESS_KEY}}
                    aws-secret-access-key: ${{secrets.S3_DEPLOY_SECRET_KEY}}
                    aws-region: us-east-2

                - name: Upload to S3
                  run: aws s3 cp --region us-east-2 ./app.zip s3://$AWS_BUCKET_NAME/$PROJECT_NAME/app.zip

                - name: Code Deploy
                  run: aws deploy create-deployment --application-name xxx --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name xxx --s3-location bucket=$AWS_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/app.zip

        li Launch template을 이용하는 auto scaling group 생성
