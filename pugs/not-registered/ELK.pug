include ../../source/skeleton.pug

+post({
    title: 'ELK',
    description: 'ELK Stack 정리',
})

    h1 ELK Stack
    ol
        li Elasticsearch : JSON 기반 분산형 RESTful 검색 엔진
        li Logstash : 로그 수집 파이프라인
        li Kibana : 데이터 시각화 툴

    h1 Elastic Stack
    ul
        li ELK Stack에 Beats가 추가되면서 새로 Elastic Stack으로 명명되었다
        li Beats : 다양한 시스템으로부터 Logstash나 Elasticsearch로 데이터 전달

    h1 환경 설정
    ul
        li
            +asA('https://github.com/deviantony/docker-elk', '간편한 개발을 위한 docker-compose')
            +codeBtn('/Repositories/Single/docker-elk/docker-compose.yml', 'yml')
        li: +asA('https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html', 'Docker로 프로덕션 환경을 구성하려는 경우')
        li Windows에서 docker-compose로 Elasticsearch 클러스터를 구성하려는 경우...
        +asCode('shell', 'git-shell').
            # 관리자 권한으로 실행
            $ docker-machine create --driver hyperv --hyperv-virtual-switch "Default Switch" elk

            $ docker-machine ssh elk
                $ sudo sysctl -w vm.max_map_count=262144

            $ docker-machine env elk
                export DOCKER_TLS_VERIFY="1"
                export DOCKER_HOST="tcp://172.23.70.237:2376"
                export DOCKER_CERT_PATH="C:\Users\wiz\.docker\machine\machines\elk"
                export DOCKER_MACHINE_NAME="elk"
                export COMPOSE_CONVERT_WINDOWS_PATHS="true"
                # Run this command to configure your shell:
                # eval $("C:\Users\wiz\bin\docker-machine.exe" env elk)

            $ eval $("C:\Users\wiz\bin\docker-machine.exe" env elk)
            $ docker-compose up -d --build
        li: +asA('https://www.elastic.co/guide/index.html', '수동 설치를 포함한 전체 가이드')

    h1 Elasticsearch(7.14.1)
    div
        h2 설치 후 구동 확인
        +asCode('shell').
            $ curl --request GET '127.0.0.1:9200' \
              --header 'Authorization: Basic ZWxhc3RpYzpjaGFuZ2VtZQ=='
        p Elasticsearch 노드는 클라이언트 통신을 위한 http 포트(9200~9299), 노드 간 데이터 교환을 위한 tcp 포트 (9300~9399) 총 2개를 열어둔다

        h2 용어
        div
            h3 인덱스
            ul
                li 저장할 문서들을 나누는 최상위 논리적 구분자
                li 클러스터 내에서 유일해야 한다
            h3 타입
            ul
                li 인덱스에 색인될 문서의 종류(보통 "_doc")
                li 인덱스:타입 = 1:1
            h3 샤드
            ul
                li 인덱스에 색인될 문서들이 저장되는 논리적인 공간
                li 샤드는 hash(document's ID) % count(shard)로 결정된다
                li 인덱스:샤드 = 1:n
                li 데이터 노드가 2개 이상인 경우, 서로 다른 노드에 primary/replica shard가 각각 존재할 수 있다
                li Primary 샤드의 개수는 인덱스 생성 시 1번만 지정 가능
            +w3img('/imgs/no-date/elk_a_cluster_1.png', '클러스터 ~ 노드 ~ 샤드 관계도')&attributes({style: 'max-height:360px'})
            h3 세그먼트
            ul
                li 샤드 내에서, 문서들을 저장하는 물리적 파일
                li 샤드:세그먼트 = 1:n
                li 세그먼트는 불변이며, 저장된 문서의 삭제/변경을 처리하는 경우, 기존 문서의 delete flag를 설정하고 필요한 경우 새 버전의 문서를 저장한다
                li 세그먼트 파편화를 방지하기 위해, ElasticSearch는 백그라운드로 병합을 진행한다
            h3 문서
            ul
                li 색인될 JSON 데이터
                li 문서 ID는 인덱스 내에서 유일해야 한다
                li 문서가 최초 색인되면 시스템 메모리에 저장되고, 이때는 아직 검색되지 않는다
                p 이후 ElasticSearch의 refresh 과정을 거치면 세그먼트에 문서가 저장되고, 검색이 가능해진다
            h3 매핑
            ul
                li ElasticSearch는 비정형 데이터를 색인하지만, 일단 문서를 색인하기 시작하면 새로운 필드들에 대한 정보는 매핑에 기록된다(dynamic mapping)
                p 또는 사전에 정의해놓을 수도 있다(static mapping)
                li 신규 문서가 기존 매핑과 불일치하는 경우, 색인 거부된다
                li 데이터 타입
                +table()
                    +ths('범주', '타입')
                    +tds('String', 'text, keyword')
                    +tds('Numeric', 'long, integer, short, byte, double, float, half_float, scaled_float')
                    +tds('Date', 'date')
                    +tds('Boolean', 'boolean')
                    +tds('Binary', 'binary')
                    +tds('Range', 'long_range, integer_range, double_range, float_range, date_range')

        h2 elasticsearch.yml
        ul
            li path.data : 세그먼트 저장 위치. 콤마로 여러 개 지정 가능
            li path.logs : 엔진 로그 위치
            li network.host : 127.0.0.1(로컬 요청만 허용), 0.0.0.0(로컬&amp;외부 요청 모두 허용)
            p 노드 간 통신을 위해서는 network.host 대신 network.bind_host, network.publish_host를 분리해서 설정할 필요가 있다 &lt;- network.host: 0.0.0.0의 경우엔 다른 노드로의 요청도 로컬 노드가 처리하게 될 것이므로...
            +asCode('yml', '클러스터 노드 설정 예').
                network.bind_host: 0.0.0.0
                network.publish_host: 172.31.0.13
            li discovery.seed_hosts: [ "&lt;호스트-1&gt;", "&lt;호스트-2&gt;", ... ]
            p 클러스터 구성을 위해 정보를 받아올 초기 마스터 노드 설정
            li cluster.initial_master_nodes: [ "&lt;노드-1&gt;", "&lt;노드-2&gt;" ]
            p 클러스터가 성공적으로 실행되면, 명시된 마스터 노드 후보들로부터 마스터 노드를 선출한다
            li 설정하지 않은 경우, 노드는 가능한 모든 역할을 담당할 수 있다
            +asCode('yml', '끌 수 있는 역할 목록').
                node.master: false
                node.data: false
                node.ingest: false
                # 3개를 전부 다 끄면 코디네이트(클라이언트 요청 대리) 전용 노드가 된다

        h2 버전 업데이트
        ul
            li Full cluster restart
            ol
                li 모든 노드 중지
                li 업데이트
                li 전체 노드 재가동
            li Rolling restart
            ol
                li 클러스터 내 샤드 할당 비활성화
                +asCode('shell').
                    $ curl --request PUT '127.0.0.1:9200/_cluster/settings' \
                      --header 'Content-Type: application/json' \
                      --data-raw '{
                          "persistent": {
                              "cluster.routing.allocation.enable": "none"
                          }
                      }'
                li 프라이머리 샤드 - 레플리카 샤드 동기화
                +asCode('shell') $ curl --request POST '127.0.0.1:9200/_flush/synced'
                li 1개 노드 업데이트 후 클러스터 합류 확인
                li 클러스터 내 샤드 할당 활성화
                +asCode('shell').
                    $ curl --request PUT '127.0.0.1:9200/_cluster/settings' \
                      --header 'Content-Type: application/json' \
                      --data-raw '{
                          "persistent": {
                              "cluster.routing.allocation.enable": null
                          }
                      }'
                li 클러스터 상태 확인 후 반복

        h2 인덱스 생성 ~ 삭제
        ul
            li 생성 - 기본 설정
            +asCode('shell') $ curl --request PUT '127.0.0.1:9200/test'

            li 생성 - 샤드 개수 설정
            +asCode('shell').
                $ curl --request PUT '127.0.0.1:9200/test' \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                      "settings": {
                          "number_of_shards": 2,
                          "number_of_replicas": 2
                      }
                  }'

            li 변경 - 샤드 개수 설정
            +asCode('shell').
                $ curl --request PUT '127.0.0.1:9200/test/_settings' \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                      "settings": {
                          "number_of_replicas": 0
                      }
                  }'

            li 삭제
            +asCode('shell') $ curl --request DELETE '127.0.0.1:9200/test'

        h2 문서 색인 ~ 삭제
        ul
            li 색인
            +asCode('shell').
                $ curl --request PUT '127.0.0.1:9200/test/_doc/id1' \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                      "msg": "Hello World"
                  }'

            li 조회
            +asCode('shell') $ curl --request GET '127.0.0.1:9200/test/_doc/id1'

            li 검색
            +asCode('shell').
                # 전체 검색
                $ curl --request GET '127.0.0.1:9200/test/_search?q=*'
                # 일부 일치 검색
                $ curl --request GET '127.0.0.1:9200/test/_search?q=word'
                # 필드 일부 일치 검색
                $ curl --request GET '127.0.0.1:9200/test/_search' \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                      "query": {
                          "match": {
                              "msg": "word"
                          }
                      }
                  }'
                # 필드 비교 검색
                $ curl --request GET '127.0.0.1:9200/test/_search' \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                      "query": {
                          "bool": {
                              "filter": {
                                  "range": {
                                      "num": {
                                          "lt": 15
                                      }
                                  }
                              }
                          }
                      }
                  }'

            li 검색 - SQL
            +asCode('shell').
                $ curl --request GET '127.0.0.1:9200/_sql' \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                    "query": "SELECT * FROM test"
                  }'

            li 삭제
            +asCode('shell') $ curl --request DELETE '127.0.0.1:9200/test/_doc/id1'

        h2 매핑 조회
        +asCode('shell') $ curl --request GET '127.0.0.1:9200/test/_mappings'

        h2 샤드 배치
        ul
            li 샤드 이동
            +asCode('shell').
                $ curl --request POST '127.0.0.1:9200/_cluster/reroute' \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                      "commands": [
                          {
                              "move": {
                                  "index": "test",
                                  "shard": 0,
                                  "from_node": "node1",
                                  "to_node": "node2"
                              }
                          }
                      ]
                  }'

        h2 클러스터 조회
        ul
            li 상태 조회
            +asCode('shell') $ curl --request GET '127.0.0.1:9200/_cat/health?format=json'

            li 노드 조회
            +asCode('shell') $ curl --request GET '127.0.0.1:9200/_cat/nodes?format=json'

            li 인덱스 조회
            +asCode('shell') $ curl --request GET '127.0.0.1:9200/_cat/indices?format=json'

            li 샤드 조회
            +asCode('shell') $ curl --request GET '127.0.0.1:9200/_cat/shards?format=json'

        h2 지표 조회
        ul
            li 전체; 색인/검색 통계 포함
            +asCode('shell') $ curl --request GET '127.0.0.1:9200/_cluster/stats'

            li 클러스터
            +asCode('shell') $ curl --request GET '127.0.0.1:9200/_cluster/stats'

            li 노드
            +asCode('shell') $ curl --request GET '127.0.0.1:9200/_nodes/stats'