include ../../source/skeleton.pug

+post('컴퓨터시스템구조론', '컴퓨터시스템구조론', '컴퓨터시스템구조론 독서 기록')
    h1 도서 정보
    .w3-row
        .w3-col.s2.w3-center
            +w3img('https://image.yes24.com/momo/TopCate132/MidCate10/13192388.jpg', '도서 이미지')&attributes({style: 'max-height:210px'})
        .w3-col.s10
            table.no-sort
                +tds('표제/저자사항', '컴퓨터시스템구조론 / William Stallings')
                +tds('ISBN 정보', '978-89-92887-15-1 [93560]')
                +tds('발행사항', '진샘미디어, 발행일 : 2010년 07월 30일')

    h1 소개
    p 컴퓨터의 기본적인 기능들은 네 가지로 분류된다
    ul
        li 데이터 처리
        li 데이터 저장
        li 데이터 이동
        li 제어

    h1 컴퓨터의 발전 과정과 성능
    div
        h2 컴퓨터의 간략한 역사
        div
            h3.fake 제1세대: 진공관
            ul
                li ENIAC : 프로그래밍을 위해 손으로 스위치를 조작하고 케이블을 끼우거나 빼야했다
                li 폰 노이만 기계 : Stored-program 개념을 제안했다 -- 컴퓨터는 기억장치의 명령어를 읽어들여 실행만 하면 되고, 기존 프로그램을 변경하는 과정도 쉬워진다
            h3.fake 제2세대: 트랜지스터
            ul
                li IBM 7094
                ul
                    li 데이터 채널 사용 : I/O 전용 특수목적 프로세서가 관련 명령어를 처리하고, CPU에는 결과를 통지함으로써 CPU의 부담을 줄인다
                    li 멀티플렉서 사용 : CPU와 데이터 채널들의 메모리 접근 순서를 결정하여 서로 독립적으로 동작하게 한다
            h3.fake 제3세대~: 집적회로
            ul
                li DEC PDP-8 : 데이터 버스 사용 -- 주소와 데이터를 전송하는 데 사용되는 공용 신호 선들로, 사용은 CPU에 의해 제어된다
                li 인텔 4004 : 최초의 마이크로프로세서 -- CPU 모든 구성요소가 한 개의 칩에 존재

        h2 성능을 위한 설계
        p 마이크로프로세서의 속도 향상을 위한 기술
        ul
            li 분기 예측 : 다음에 처리될 명령을 예측하여 미리 저장함으로써 명령어 인출 시간 축소
            li 데이터 흐름 분석 : 명령어 사이의 의존성을 해치지 않으면서 실행 순서를 변경하여 대기 시간 축소
            li 추측 실행 : 프로그램 실행 지점 이후의 명령어를 미리 실행하고 임시 저장하여 유휴 시간 축소

        p 칩 조직과 구조상의 발전
        ul
            li 하드웨어 속도 증가 : 클록 증가, 칩 밀도 증가 -> 단위 면적 당 전력 및 발열량 증가, 저항 증가 등 한계 존재
            li 프로세서 - 메모리 사이의 캐시 사용 : 3-level 캐시 사용으로 메모리 IO 속도 격차 해소 -> 캐시 증설로 인한 성능 향상도 한계 존재
            li 프로세서 조직/구조 변경
            ul
                li 파이프라이닝 : 서로 다른 단계에 있는 명령어 동시 실행
                li 슈퍼스칼라 : 프로세서 내부에 여러 파이프라인을 두어, 독립적인 명령어 동시 실행
                li 멀티코어 프로세서 : 각 프로세서마다 서로 다른 프로그램 실행 or 멀티코어를 효과적으로 실행하는 프로그램 실행

    h1 최상위에서 본 컴퓨터의 기능 및 상호연결
    div
        h2 버스 상호연결
        p 버스 : 주소 선 + 데이터 선 + 제어 선 + 전력 선
        p 전파 지연과 병목 현상을 해소하기 위해 버스 계층을 두고(e.g. 시스템 버스 / 고속 버스 / 저속 확장 버스), 각 버스 사이는 브릿지로 연결할 수 있다

    h1 내부 기억장치
    div
        h2 반도체 주기억장치
        ul
            li DRAM; Dynamic RAM : 축전기로 전하를 저장하므로 주기적으로 재충전이 필요
            p 단위 면적당 용량과 가격이 SRAM보다 저렴하여 대용량 기억장치로 이용
            li SRAM; Static RAM : 플립-플롭을 이용하므로 재충전 불필요
            p DRAM보다 성능이 좀 더 좋아 캐시로 이용

    h1 외부 기억장치
    div
        h2 RAID
        div
            h3.fake RAID 0
            ul
                li 모든 디스크가 하나의 논리적 디스크를 구성한다
                li 데이터는 각 디스크에 라운드-로빈 방식으로 분산 저장된다
                li 디스크 하나라도 결함이 생기면 서비스 불가

            h3.fake RAID 1
            ul
                li 하나의 논리적 디스크의 내용을 모든 디스크가 공유한다
                li 전체 디스크 n개 중 n-1개에 결함이 생겨도 서비스 가능하다
                li RAID 중 가장 큰 쓰기 부하가 발생한다

            h3.fake RAID 2
            ul
                li RAID 2, 3은 <span class="hover-content" template-id="template1">병렬 액세스 기법</span>을 사용한다
                li 데이터 디스크들이 하나의 논리적 디스크를 구성하고, 에러 검출과 데이터 복구를 위한 패리티 디스크들이 추가로 필요하다
                li 전형적으로 해밍 코드가 사용되고, 데이터 디스크 수의 로그에 비례하여 패리티 디스크가 필요하다
                li 패리티 비트를 위해, IO 처리 시 모든 디스크의 동일한 비트 위치를 읽고 쓴다

            h3.fake RAID 3
            ul
                li RAID 2, 3은 <span class="hover-content" template-id="template1">병렬 액세스 기법</span>을 사용한다
                li 데이터 디스크들이 하나의 논리적 디스크를 구성하고, 패리티 디스크 하나를 추가로 사용한다
                li 패리티 비트는 단순히 모든 디스크의 동일한 비트 위치의 XOR로 계산된다
                p 디스크 1개에 결함이 생겨도 서비스 가능

            h3.fake RAID 4
            ul
                li RAID 3과 유사하지만, <span class="hover-content" template-id="template1">독립적인 액세스 기법</span>을 사용한다
                li 패리티 계산 시 모든 디스크를 읽지 않는다 -- 대신 패리티 디스크의 부하가 크다
                p (새 피리티 비트) = (이전 패리티 비트) xor (이전 데이터 비트) xor (새 데이터 비트)

            h3.fake RAID 5
            ul
                li RAID 4-6은 <span class="hover-content" template-id="template2">독립적인 액세스 기법</span>을 사용한다
                li RAID 4와 유사하지만, 패리티 스트립은 모든 디스크에 분산된다
                p RAID 4의 패리티 디스크 병목을 미연에 방지한다

            h3.fake RAID 6
            ul
                li RAID 4-6은 <span class="hover-content" template-id="template2">독립적인 액세스 기법</span>을 사용한다
                li RAID 5와 유사하지만, 패리티 함수 1개를 추가로 사용한다
                p 따라서 디스크도 1개 추가로 필요
                li 추가된 패리티 덕분에 디스크 2개에 결함이 생겨도 서비스 가능

            h3.fake 확장 RAID
            ul
                li RAID 10 : 두 개의 RAID 1로 RAID 0 구성
                li RAID 01 : 두 개의 RAID 0로 RAID 1 구성
                li RAID + Spare : 디스크 결함 시 즉시 복구에 사용될 여유 디스크를 예비

    +hoverTemplate()#template1
        ul
            li IO 처리에 모든 디스크가 참여
            li 디스크들은 동기화되어, 모든 디스크 헤드가 동일한 위치에 존재
            li 따라서 대용량 처리 성능은 좋지만, 요청 횟수가 높은 환경에는 부적합

    +hoverTemplate()#template2
        ul
            li 각 디스크가 독립적으로 작동하므로, 독립적인 IO 요청은 병렬로 처리 가능
            li 요청 횟수가 높은 환경에 적합
