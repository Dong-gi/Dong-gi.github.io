include ../../../source/skeleton.pug

+post({
    title: '애자일 & 스크럼 프로젝트 관리',
    description: '개인적으로 마음에 든 『애자일 & 스크럼 프로젝트 관리』 문구',
})

    h1 도서 정보
    +bookInfo({
        imgSrc: 'https://image.yes24.com/goods/26879914/L',
        title: '애자일 & 스크럼 프로젝트 관리', author: '이재왕',
        isbn: '979-11-87345-01-5 [93560]',
        publisher: '(주 도서출판)길벗', date: '발행일 : 2016년 05월 06일',
    })

    h1 글귀
    div
        h2 애자일 소프트웨어 개발 선언
        p 출처 : #[+asA('https://agilemanifesto.org/iso/ko/manifesto.html')]
        +asCode().
            우리는 소프트웨어를 개발하고, 또 다른 사람의 개발을 도와주면서
            소프트웨어 개발의 더 나은 방법들을 찾아가고 있다.
            이 작업을 통해 우리는 다음을 가치 있게 여기게 되었다:

            공정과 도구보다 개인과 상호작용을
            포괄적인 문서보다 작동하는 소프트웨어를
            계약 협상보다 고객과의 협력을
            계획을 따르기보다 변화에 대응하기를

            가치 있게 여긴다. 이 말은, 왼쪽에 있는 것들도 가치가 있지만,
            우리는 오른쪽에 있는 것들에 더 높은 가치를 둔다는 것이다.

            Kent Beck           Mike Beedle         Arie van Bennekum           Alistair Cockburn
            Ward Cunningham     Martin Fowler       James Grenning              Jim Highsmith
            Andrew Hunt         Ron Jeffries        Jon Kern                    Brian Marick
            Robert C. Martin    Steve Mellor        Ken Schwaber                Jeff Sutherland
            Dave Thomas

        h2 애자일 소프트웨어의 12가지 원칙
        p 출처 : #[+asA('https://agilemanifesto.org/iso/ko/principles.html')]
        ol
            li 우리의 최우선 순위는, 가치 있는 소프트웨어를 일찍 그리고 지속적으로 전달해서 고객을 만족시키는 것이다.
            li 비록 개발의 후반부일지라도 요구사항 변경을 환영하라. 애자일 프로세스들은 변화를 활용해 고객의 경쟁력에 도움이 되게 한다.
            li 작동하는 소프트웨어를 자주 전달하라. 두어 주에서 두어 개월의 간격으로 하되 더 짧은 기간을 선호하라.
            li 비즈니스 쪽의 사람들과 개발자들은 프로젝트 전체에 걸쳐 날마다 함께 일해야 한다.
            li 동기가 부여된 개인들 중심으로 프로젝트를 구성하라. 그들이 필요로 하는 환경과 지원을 주고 그들이 일을 끝내리라고 신뢰하라.
            li 개발팀으로, 또 개발팀 내부에서 정보를 전하는 가장 효율적이고 효과적인 방법은 면대면 대화이다.
            li 작동하는 소프트웨어가 진척의 주된 척도이다.
            li 애자일 프로세스들은 지속 가능한 개발을 장려한다. 스폰서, 개발자, 사용자는 일정한 속도를 계속 유지 할 수 있어야 한다.
            li 기술적 탁월성과 좋은 설계에 대한 지속적 관심이 기민함을 높인다.
            li 단순성이 -- 안 하는 일의 양을 최대화하는 기술이 -- 필수적이다.
            li 최고의 아키텍처, 요구사항, 설계는 자기 조직적인 팀에서 창발한다.
                p Self-organizing team : 구성원이 자기 주도적으로 업무를 수행하고 협력하는 팀
            li 팀은 정기적으로 어떻게 더 효과적이 될지 숙고하고, 이에 따라 팀의 행동을 조율하고 조정한다.

        h2 백로그
        ul
            li 제품 개발에 필요한 업무(story)에 우선순위를 매긴 목록
                p 고객 스스로 정확히 어떤 것들을 필요로 하는 지 목록화하기 어려워한다 -> 도중의 조정은 필연적
            li User story : 고객/사용자의 가치를 제고하는 기능
                p 예. x는 y할 수 있어야 한다
            li Technical story : user story를 위한 기술/관리 업무
                p 예. 요구 사항 분석, 인프라 설치, 리팩토링, 버그 수정, 성능 목표
            li 업무 규모(Story point) 추정 시, 평균 역량을 기준으로, 추정이 쉬운 스토리부터, 다른 스토리와 상대적인 비율을 통해 추정한다
                p 업무 규모를 추정할 때는 피보나치 수열을 사용하는 것이 현실적으로 잘 들어맞는다고 한다(규모가 클수록 오차도 커지므로)
                p 예. 5MD(Man-day)를 넘길 것 같은 업무는 8MD로 추정

        h2 애자일 개발 방법론
        ol
            li 제품 백로그 작성
            li 스토리 점수 추정
            li 스프린트 기간 설정
            li 평균 개발 속도 추정
                p 개발 속도 : 스프린트 당 완료할 수 있는 스토리 점수 합
            li 전체 일정 추정
                p 산출된 일정의 10~20%를 버퍼 스프린트로 추가한다
            li 스토리 개발 우선순위 선정
                p 개발 초기에는 퍼포먼스가 저조하므로, 처음 2~3개 스프린트는 평균 개발 속도보다 10~20% 낮춰서 배당
