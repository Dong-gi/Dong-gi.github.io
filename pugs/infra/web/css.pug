include ../../../source/skeleton.pug
+post({
        title: 'CSS',
        description: 'CSS 정리',
        useMath: false,
    })
    h1 자료
    ul
        li: +asA('https://web.dev/learn/css/', 'web.dev > CSS 배우기')
        li: +asA('https://developer.mozilla.org/en-US/docs/Web/CSS', 'MDN > CSS')

    h1 Box Model
    div
        h2 CSS가 표시하는 모든 것은 박스다
        p 각 박스는 하위 영역들(다시 박스)로 구성된다; '컨텐츠 박스' &gt; '패딩 박스' &gt; '테두리 박스' &gt; '여백 박스'
        ul
            li 컨텐츠 박스 : 자식 요소들이 포함될 수 있고, 컨텐츠 박스의 크기가 자식 요소들의 크기에 의해 (동적으로) 결정되도록 할 수도 있다
            li 패딩 박스 : 컨텐츠 박스를 감싸는 영역으로, 요소에 적용된 배경은 이 영역까지 표시된다. 또, 오버플로 속성으로 인한 스크롤바도 이 영역에 표시된다
            li 테두리 박스 : 패딩 박스를 감싸는 영역으로, 박스의 경계를 표시한다. border 속성으로 제어한다.
            li 여백 박스 : 박스 바깥의 공간으로, 여백의 크기는 박스의 크기에 영향을 미치지 않는다.

        h2 박스 모델 제어
        ul
            li 모든 웹 브라우저는 HTML 문서에 기본 스타일시트를 적용한다
            li display 속성 : 요소를 block 또는 inline 요소를 취급하고, 자식 박스들을 어떻게 배치할 지 제어한다
            li box-sizing 속성 : width, height를 컨텐츠 박스까지 적용할 지(기본값), 테두리 박스까지 적용할 지 제어한다

    h1 선택자
    div
        h2 단순 선택자
        ul
            li 범용 선택자
            p * : 모든 요소를 선택한다
            li 타입 선택자
            p div : 모든 div 요소를 선택한다
            li 클래스 선택자
            p .dialog : dialog 클래스를 가진 모든 요소를 선택한다
            li ID 선택자
            p #target : target ID를 가진 요소를 선택한다
            li 속성 선택자
            ul
                li [attr] : attr 속성을 갖는 요소
                li [attr='value'] : attr 속성값이 'value'와 일치하는 요소
                li [attr='value' s] : attr 속성값이 'value'와 일치하는 요소(대소문자 구별 O)
                li [attr='value' i] : attr 속성값이 'value'와 일치하는 요소(대소문자 구별 X)
                li [attr*='value'] : attr 속성값이 'value'를 포함하는 요소
                li [attr^='value'] : attr 속성값이 'value'로 시작하는 요소
                li [attr$='value'] : attr 속성값이 'value'로 끝나는 요소
            li 그룹화 선택자
            p 콤마(,)를 이용해 같은 스타일을 여러 요소에 적용시킬 수 있다
            +asCode('css').
                /* strong 요소, em 요소, lang 속성을 가진 요소의 글자 색을 빨강으로 한다 */
                strong, em, [lang] { color: red; }

        h2 의사 클래스 및 의사 요소
        div
            h3.fake: +asA('https://developer.mozilla.org/ko/docs/Web/CSS/Pseudo-classes', '의사 클래스')
            ul
                li 요소들의 상태를 기준으로 선택하는 데 사용할 수 있는 의사 클래스가 정의되어 있다. ':'을 이용해 의사 클래스를 지정한다
                li a: active, hover, link, visited
                li input: checked, disabled, enabled, focus, in-range, out-of-range, valid, invalid, read-only, read-write, required, optional
                li :first-child, last-child, nth-child(n), nth-last-child(n)
                li :not(selector)

            h3.fake 의사 요소
            ul
                li 요소의 특정 부분을 선택하거나, 요소의 앞뒤에 내용을 추가하는 데 사용한다. '::'를 이용해 의사 요소를 지정한다
                li ::first-letter : 첫 번째 글자
                li ::first-line : 첫 번째 줄 
                li ::marker : 리스트 아이템의 글머리 기호(또는 번호)
                li ::before : 요소 앞부분에 추가
                li ::after : 요소 뒷부분에 추가
                li ::selection : 블록 지정된 요소

        h2 결합기(Combinator)
        p 결합기는 두 선택자 사이에 위치하여, 특정한 관계를 만족하는 요소를 선택할 수 있게 해준다
        ul
            li '&gt;' : 자식 요소
            li ' '(스페이스) : 후손 요소
            li '+' : 바로 다음 형제 요소
            li '~' : 다음 모든 형제 요소
    
    h1 The cascade
    p 요소에 대해 둘 이상의 스타일이 존재할 때, 브라우저는 아래 순서에 따라 적용할 스타일을 결정한다.
    div
        h2 스타일의 위치와 순서
        ul
            li 동일한 CSS 안에서의 충돌 : 스크립트 뒷부분에 정의된 것이 우선
            li 두 CSS 간 충돌 : 보다 나중에 로드/정의된 것이 우선
            li 요소 내부의 style 속성으로 지정한 것이 요소 외부의 것보다 우선

        h2 선택자의 특정성
        p 위치상 후순위 스타일이더라도, 선택자가 요소를 보다 자세하게 특정하는 경우 보다 높은 우선순위를 가질 수 있다
        table
            +ths('선택자', '점수', '비고')
            +tds('*', '0', '')
            +tds('타입', '1', '')
            +tds('클래스, 의사 클래스, 속성', '10', ':not() 자체는 점수가 없지만, 인자로 넘겨진 선택자에 대해선 점수가 부여된다')
            +tds('ID', '100', '')
            +tds('inline style', '1,000', '')
            +tds('!important', '10,000', '')
        
        h2 출처
        p 우선순위가 낮은 순서부터,
        ol
            li 브라우저 기본 스타일
            li OS(e.g. 기본 폰트) 또는 브라우저 확장 스타일
            li 직접 작성된 CSS
            li 직접 작성된 !important
            li OS 또는 브라우저 확장 !important
            li 브라우저 기본 !important
        
        h3 중요성
        p 어떤 스타일은 기본적으로 다른 것보다 우선한다. 우선순위가 낮은 순서부터,
        ol
            li 일반
            li animation
            li !important
            li transition

    h1 상속
    ul
        li 일부 스타일 속성은 자식 요소로 상속된다
        p color, font, direction, line-height, text-align, visibility 등
        li inherit 키워드를 이용한 명시적 상속
        +asCode('css').
            strong { font-weight: 900; }
            .my-class { font-weight: 500; }
            .my-class strong { font-weight: inherit; } /* 500이 적용된다 */
        li initial 키워드를 이용한 상속 취소(기본값 사용)
        li unset 키워드
        ul
            li 속성이 상속 가능하면 inherit으로, 아니면 initial로 작동
            li "all: unset;"으로 간편하게 모든 속성 상속 취소 가능

    h1 Layout
    div
        h2: +asA('https://developer.mozilla.org/en-US/docs/Web/CSS/display', 'display 속성의 이해')
        +asCode().
            display = 
                [ &lt;display-outside&gt; || &lt;display-inside&gt; ]         |
                &lt;display-listitem&gt;                                |
                &lt;display-internal&gt;                                |
                &lt;display-box&gt;                                     |
                &lt;display-legacy&gt;
        div
            h3 #{'<display-outside>'}
            p Flow layout(기본 배치; inline/block)에서 요소를 어떻게 배치할 지 제어한다
            ul
                li inline
                p 너비에 여유가 있다면 inline 요소들은 한 줄에 같이 표시된다. margin, padding 모두 무시된다.
                li block
                p 각 block 요소는 한 줄을 온전히 차지한다; 박스 전후에 개행을 삽입한다
            
            h3 #{'<display-inside>'}
            p 자식 요소들을 내부에서 어떻게 배치할 지 제어한다
            ul
                li flow
                p Flow layout에 따라 자식 요소들을 배치한다
                li flow-root
                p flow + 새로운 block formatting context(BFC; 블록 박스가 자리하고, float 요소가 상호작용하는 공간)를 생성한다
                +codeBtn({
                    path: '/Repositories/Single/202210/19_1643.html',
                    lan: 'nohighlight',
                    title: 'flow-root를 사용하지 않은 경우'
                })
                +codeBtn({
                    path: '/Repositories/Single/202210/19_1643.html',
                    lan: 'html',
                    title: '←코드'
                })
                +codeBtn({
                    path: '/Repositories/Single/202210/19_1646.html',
                    lan: 'nohighlight',
                    title: 'flow-root를 사용한 경우'
                })
                +codeBtn({
                    path: '/Repositories/Single/202210/19_1646.html',
                    lan: 'html',
                    title: '←코드'
                })
                li table
                p #{'<table>'} 요소처럼 취급된다. "display: table-cell;" 속성을 가진 자식들은 테이블 열이 제각기 너비를 차지하듯이 부모의 너비를 나눠갖는다. 추가로 부모 요소에서 table-layout 스타일 속성도 효과를 갖는다
                li flex
                p Flexible box layout에 따라 자식 요소들을 배치한다. 자식 요소들은 자동으로 flex item이 된다
                li grid
                p Grid layout에 따라 자식 요소들을 배치한다
                li ruby
                p #{'<ruby>'} 요소처럼 취급된다
            
            h3 #{'<display-listitem>'}
            ul
                li list-item
                p 요소를 리스트 항목으로 취급한다
            
            h3 #{'<display-internal>'}
            p table, ruby와 같이 복합 구조를 갖는 요소들의 자식들이 갖는 역할을 제어한다
            ul
                li table-row-group : #{'<tbody>'}에 대응
                li table-header-group : #{'<thead>'}에 대응
                li table-footer-group : #{'<tfoot>'}에 대응
                li table-row : #{'<tr>'}에 대응
                li table-cell : #{'<td>'}에 대응
                li table-column-group : #{'<colgroup>'}에 대응
                li table-column : #{'<col>'}에 대응
                li table-caption : #{'<caption>'}에 대응
                li ruby-base : #{'<ruby>'}에 대응
                li ruby-text : #{'<rt>'}에 대응
                li ruby-base-container : 익명 박스 생성
                li ruby-text-container : #{'<rtc>'}에 대응
            
            h3 #{'<display-box>'}
            ul
                li contents
                p 요소 자체는 박스를 생성하지 않는다. 그러나 자식 요소들과 의사 요소들은 정상적으로 박스를 생성한다. 즉, 요소는 트리 상에서만 존재하는 컨테이너가 된다
                p 예를 들어 display: flex;는 자식 요소들만을 flex item으로 취급하는데, 자식 요소에 display: contents;를 적용하여, 손자 요소들을 flex item처럼 표시할 수 있다
                +codeBtn({
                    path: '/Repositories/Single/202210/19_2231.html',
                    lan: 'nohighlight',
                    title: 'display: contents;'
                })
                +codeBtn({
                    path: '/Repositories/Single/202210/19_2231.html',
                    lan: 'html',
                    title: '←코드'
                })
                li none
                p 레이아웃에 요소를 표시하지 않는다. 자식들에게도 상속되어 영향을 미친다. 자리는 차지하되 렌더링만 하지 않기를 원한다면 visibility 속성을 사용할 수 있다
            
            h3 #{'<display-legacy>'}
            p CSS 2에서는 단일 키워드로 결합된 값들을 정의했다
            ul
                li inline-block : inline flow-root와 동일
                li inline-table : inline table과 동일
                li inline-flex : inline flex와 동일
                li inline-grid : inline grid와 동일

        h2 Flexible box layout
        div
            p 일직선 상에서 자식 요소들의 크기를 유연하게 조정한다 -- 크기를 넓혀 빈 공백을 채우거나, 오버플로되지 않도록 축소
            
            h3 Basic concepts of flexbox
            ul
                li Flex container의 자식들(flex item)은 기본적으로 아래와 같이 배치된다
                ul
                    li flex-direction: row; 한 줄로 표시되며, 주 축의 시작 위치부터 배치된다
                    li flex-wrap: nowrap; 공간이 부족해도 개행하지 않고 오버플로된다
                    li flex-grow: 0; 빈 공간이 존재하더라도 아이템 크기가 늘어나지 않는다
                    li flex-shrink: 1; 오버플로 되는 경우 아이템 크기가 줄어들 수 있다
                    li flex-basis: auto; 각 아이템 크기는 요소에 지정된 크기. 없으면 요소의 컨텐츠 크기
                    li align-items: stretch; 아이템 크기를 직교 축 끝까지 확장한다
                +codeBtn({
                    path: '/Repositories/Single/202210/19_1739.html',
                    lan: 'nohighlight',
                    title: '기본 flex'
                })
                +codeBtn({
                    path: '/Repositories/Single/202210/19_1739.html',
                    lan: 'html',
                    title: '←코드'
                })
                li 컨테이너 flex-direction 속성 : 요소를 배치할 축을 설정할 수 있다; row, row-reverse, column, column-reverse
                li 컨테이너 flex-wrap 속성 : nowrap(한 줄에 다 못채우면 오버플로), wrap(한 줄에 다 못채우면 개행. 각 줄을 별개의 컨테이너로 생각해야 한다)
                li 컨테이너 flex-flow 단축 속성 : flex-direction flex-wrap
                li 아이템 flex-basis 속성 : 줄에 빈 공간이 존재하는 경우, 아이템 크기를 지정한 크기까지 키운다
                p 기본값 auto : 요소에 지정된 크기가 존재하면 해당 값을 사용하고, 지정된 크기가 없으면 요소의 컨텐츠 크기를 사용한다
                +codeBtn({
                    path: '/Repositories/Single/202210/19_2125.html',
                    lan: 'nohighlight',
                    title: 'flex-basis'
                })
                +codeBtn({
                    path: '/Repositories/Single/202210/19_2125.html',
                    lan: 'html',
                    title: '←코드'
                })
                li 아이템 flex-grow 속성 : 모든 아이템이 flex-basis 만큼 차지하고도 공간이 남으면, 각 가중치만큼 나눠갖는다
                +codeBtn({
                    path: '/Repositories/Single/202210/19_2143.html',
                    lan: 'nohighlight',
                    title: 'flex-grow'
                })
                +codeBtn({
                    path: '/Repositories/Single/202210/19_2143.html',
                    lan: 'html',
                    title: '←코드'
                })
                li 아이템 flex-shrink 속성 : flex-grow와 다르게, 오버플로 시 수축하는 비중을 지정한다
                li 아이템 flex 단축 속성 : flex-grow flex-shrink flex-basis
                ul
                    li flex: initial == flex: 0 1 auto
                    li flex: auto == flex: 1 1 auto
                    li flex: none == flex: 0 0 auto
                    li flex: n == flex: n 1 0

            h3 Aligning Items in a Flex Container
            ul
                li 컨테이너 justify-content 속성 : 주 축에 대하여 아이템을 어떻게 배치할 지 지정한다
                ul
                    li flex-start(기본값) : 주 축의 시작 위치부터 배치한다
                    li flex-end : 주 축의 끝부터 배치한다
                    +codeBtn({
                        path: '/Repositories/Single/202210/19_2207.html',
                        lan: 'nohighlight',
                        title: 'flex-direction: row-reverse ↔ justify-content: flex-end 차이'
                    })
                    +codeBtn({
                        path: '/Repositories/Single/202210/19_2207.html',
                        lan: 'html',
                        title: '←코드'
                    })
                    li center : 가운데 정렬
                    li space-around : 가운데 정렬 + 각 아이템 좌우에 동일한 여백
                    li space-between : 가운데 정렬 + 각 아이템 사이에 동일한 여백
                    li space-evenly : 가운데 정렬 + 모두 동일한 여백
                li 컨테이너 align-items 속성 : 직교 축에 대하여 아이템을 어떻게 배치할 지 지정한다
                ul
                    li stretch(기본값) : 직교 축의 전체 공간을 차지한다
                    li flex-start : 직교 축의 시작부터 자리를 차지한다
                    li flex-end : 직교 축의 끝부터 자리를 차지한다
                    li center : 직교 축의 중간에 위치한다

            h3 Controlling Ratios of Flex Items Along the Main Axis
            h3 Cross-browser Flexbox mixins
            h3 Mastering Wrapping of Flex Items
            h3 Ordering Flex Items
            h3 Relationship of flexbox to other layout methods
            h3 Backwards Compatibility of Flexbox
            h3 Typical use cases of Flexbox

        h2 Grid layout

        li.marker 변수
        ol
            li 변수 선언
            +asCode('css') root { --var1: 12px; --my-var2: blue; }
            li 변수 사용
            +asCode('css') p { color: var(--my-var2); }
        li meadia query
        p Syntax::= @media not|only mediatype and (media feature and|or|not mediafeature) { CSS-Code; }
            +asA('https://www.w3schools.com/cssref/css3_pr_mediaquery.asp')

    h1 디자인
    ul
        li.marker 공통 속성
        ol
            li 배경색 background-color: color;
            li 배경 이미지 background-image: url("url")
            p 이미지 잘라넣기 : 투명한 img로 자리를 차지하고, background: url('url') 시작w 시작h; 설정
            p
                +asA('https://www.w3schools.com/css/css3_border_images.asp', '외곽 이미지')
                +asA('https://www.w3schools.com/css/css3_backgrounds.asp', '배경 이미지')
                +asA('https://www.w3schools.com/css/css3_images.asp', '이미지 스타일링')
                +asA('https://www.w3schools.com/css/css3_object-fit.asp', 'img 크기에 맞추는 방식')
            li 외곽선 border-style: dotted | dashed | solid | double | groove | none | hidden | ...
            ul
                li 두께 border-width: width; » 색상 border-color: color; » 곡률 border-radius: radius;
                li 방향별로 설정 가능 : top, bottom, left, right
                li margin 밖의 외곽선 outline도 존재
            li 외부 여백 margin: auto | size | % | inherit;
                br
                |내부 여백 padding: size | % | inherit;
            li 너비 width: auto | size | %, 높이 height: auto | size | %
            ul
                li 최대 너비 max-width: none | size | %, 최대 높이 max-height: none | size | %
                li 최소 너비 min-width: size | %, 최소 높이 min-height: size | %
        li.marker 텍스트
        ol
            li 색상 color: color;
            li 정렬 text-align: left | center | right | justify(양쪽정렬)
            li 꾸밈선 text-decoration: none | overline | line-through | underline
            li 대소문자 강제 text-transform: uppercase | lowercase | capitalize
            li 들여쓰기 text-indent: size
            li 자간 letter-spacing: size, 단어 간격 word-spacing: size
            li 글자 크기 font-size: size, 줄 간격을 포함한 높이 line-height: size(배율)
            li 글자 두께 font-weight: normal|bold|bolder|lighter|number|initial|inherit;
                br
                |그림자 text-shadow: h-shadow v-shadow blur-radius color|none|initial|inherit;
            li 폰트 font-family: family-name|generic-family|initial|inherit;
            li 영역을 벗어난 텍스트 처리 text-overflow, text-break, text-wrap
                +asA('https://www.w3schools.com/css/css3_text_effects.asp', '참고')
        li 리스트
        ol
            li 리스트 아이템 이미지 마크 설정 list-style-image: none|url|initial|inherit;
            li 리스트 아이템 마커 타입 list-style-type: value;
                +asA('https://www.w3schools.com/cssref/pr_list-style-type.asp', '참고')
            li 리스트 아이템 마커 위치 list-style-position: inside | outside;
        li.marker 보여주기 속성
        ol
            li display: none | block | inline | inline-block(너비/높이 속성을 가질 수 있다)
                +asA('https://www.w3schools.com/cssref/pr_class_display.asp', '참고')
            li visibility: visible | hidden(자리는 차지) | collapse | initial | inherit;
            li 위치 position: static | relative | fixed | absolute | sticky;
            li z축 우선순위 z-index: number;
            li 넘침 영역 overflow, overflow-x, overflow-y: visible | hidden | scroll | auto | initial | inherit;
            li 띄우기 float: none | left | right | initial | inherit;
            li float 요소를 배제하여 구분된 영역 이용 clear: none | left | right | both | inherit;
            li 불투명도 opacity: [0.0-1.0]; 또는 RGBA 이용
            li box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;
            li 다단
                +asA('https://www.w3schools.com/css/css3_multiple_columns.asp', '참고')
            li 사용자가 크기 조절 resize: none|both|horizontal|vertical|initial|inherit;

    h1 변형
    ol
        li 2D 변형 » translate(), rotate(), scale(), skewX(), skewY(), matrix()
            +asA('https://www.w3schools.com/css/css3_2dtransforms.asp', '참고')
        li 3D 변형 » rotateX(), rotateY(), rotateZ()
            +asA('https://www.w3schools.com/css/css3_3dtransforms.asp', '참고')
        li 전개 » transition
            +asA('https://www.w3schools.com/css/css3_transitions.asp', '여기로')
        li 애니메이션 »
            +asA('https://www.w3schools.com/css/css3_animations.asp', '여기로')
