include ../../../source/skeleton.pug
+post('RabbitMQ', 'RabbitMQ', 'RabbitMQ 사용 정리')
    h1: +asA('https://www.rabbitmq.com/changelog.html', 'RabbitMQ')
    ul
        li Erlang으로 작성된 메시지 큐
        li AMQP를 기본으로 구현하고, STOMP, MQTT 프로토콜 및 WebSocket 플러그인을 제공한다
        li: +asA('https://www.rabbitmq.com/api-guide.html')
        li: +asA('https://www.rabbitmq.com/rabbitmqctl.8.html', 'rabbitmqctl Document')

    h1 로컬 테스트 환경
    p Docker : 
        +codeBtn('/Repositories/STS/rabbitmq-tutorial/docker-compose.yml', 'yml')
    +asCode('shell').
        $ rabbitmqctl add_user tutorial tutorial
        Adding user "tutorial" ...
        Done. Don't forget to grant the user permissions to some virtual hosts! See 'rabbitmqctl help set_permissions' to learn more.
        $ rabbitmqctl set_permissions -p / tutorial ".*" ".*" ".*"
        Setting permissions for user "tutorial" in vhost "/" ...

    h1 AMQP; Advanced Message Queuing Protocol
    div
        h2 AMP 모델
        ul
            li Queue : 복수의 메시지 큐를 이용한다
            li Exchange : 메시지 브로커(여기서는 RabbitMQ)에 들어온 메시지를 적절한 큐에 전달한다
            li Binding : 메시지로부터 적절한 큐를 찾는 평가 규칙
            p 단순하게 사용하는 경우, 메시지의 routing-key를 큐의 이름으로 설정할 수 있다

        h2 통신 규약
        ul
            li 채널 : 하나의 AMQP 연결은 여러 채널을 이용해 대화를 수행한다
            li 클래스 & 메서드 : AMQP 명령은 Connection.Start처럼 클래스와 메서드로 구별된다
            li 프레임 : 프레임 유형 | 채널 번호 | 프레임 바이트 크기 | 페이로드 | 0xce

        h2 예. Exchange와 Queue를 정의하고 Binding 설정
        ul
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/resources/application.properties', 'properties')
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/config/RabbitMQProperties.java', 'java')
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/config/RabbitMQConfig.java', 'java')
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/mq/MQ1.java', 'java')

        h2 예. 메시지 발행/구독
        ul
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/action/MQ2Action.java', 'java')
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/mq/MQ2.java', 'java')
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/mq/MQ2Consumer.java', 'java')
            li GET http://localhost:55555/mq2/%EC%95%88%EB%85%95~%20%EC%84%B8%EC%83%81
            +asCode().
                17:04:47.517 I [pool-1-thread-4] [MQ2Consumer] consumerTag=amq.ctag-_VyO09IlpPD_f544-EMNnQ, deliveryTag=1, routingKey=MQ2, body=안녕~ 세상
                17:04:56.811 I [pool-1-thread-5] [MQ2Consumer] consumerTag=amq.ctag-_VyO09IlpPD_f544-EMNnQ, deliveryTag=2, routingKey=MQ2, body=안녕~ 세상
        div
            h3: +asA(' https://www.rabbitmq.com/publishers.html#message-properties')
            p 아래 테이블에서 "app-specific"은 RabbitMQ 코어에서 기본으로 사용하지 않는, 생산자-소비자 사이의 약속임을 의미한다. 예를 들어, content-encoding이 무엇이든 AMQP는 이진 메시지를 그대로 전달하고, 각 소비자는 자기가 받아들이는 content-encoding과 일치하는 메시지만 ack하여 소비할 수 있다
            table
                +ths('Property', 'Type', 'Description', 'Required?')
                +tds('delivery-mode', '1 or 2', '2(persistent; 메시지를 디스크에 저장), 1(transient; 메시지 별도 저장 안 함)', 'Yes')
                +tds('type', 'String', 'app-specific 메시지 타입. e.g. order.created', 'No')
                +tds('headers', 'Map (string => any)', 'app-specific 메시지 속성. RabbitMQ가 이를 해석하여 라우팅하도록 설정할 수 있다', 'No')
                +tds('content-type', 'String', 'app-specific 메시지 형식. e.g. text/plain, application/json', 'No')
                +tds('content-encoding', 'String', 'app-specific 메시지 인코딩. e.g. UTF-8, gzip', 'No')
                +tds('message-id', 'String', 'app-specific 메시지 ID', 'No')
                +tds('correlation-id', 'String', 'app-specific 메시지 식별 ID. 특정 요청 메시지에 대한 응답 메시지임을 식별할 수 있도록 돕는다. e.g. 요청 메시지의 message-id', 'No')
                +tds('reply-to', 'String', 'app-specific 응답 정보. e.g. 응답 큐 이름', 'No')
                +tds('expiration', 'String', '메시지 TTL(ms)', 'No')
                +tds('timestamp', 'Timestamp', 'app-specific 임의 시각(밀리초 단위 UNIX Timestamp)', 'No')
                +tds('user-id', 'String', '설정한 경우, 연결한 유저와 일치할 경우에만 발행된다', 'No')
                +tds('app-id', 'String', '앱 이름', 'No')

            h3 메시지 속성은 아니나, 메시지 배달 시 추가되는 속성
            table
                tr
                    th Property
                    th Type
                    th Description
                tr
                    td Delivery tag
                    td Positive integer
                    td 순증하는 배달 번호
                tr
                    td Redelivered
                    td Boolean
                    td true인 경우, NACK(Negative ACK)로 거절 -> requeue -> 재전달(아마 다른 소비자로) 됐음을 의미
                tr
                    td Exchange
                    td String
                    td Exchange which routed this message
                tr
                    td Routing key
                    td String
                    td Routing key used by the publisher
                tr
                    td Consumer tag
                    td String
                    td Consumer (subscription) identifier

        h2 예. 메시지 발행에 대한 결과 수신
        ul
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/action/MQ3Action.java', 'java')
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/mq/MQ3.java', 'java')
            li: +codeBtn('/Repositories/STS/rabbitmq-tutorial/src/main/java/link4/joy/mq/MQ3Consumer.java', 'java')
            li GET http://localhost:55555/mq3/%EC%95%88%EB%85%95~%20%EC%84%B8%EC%83%81
            +asCode().
                22:36:01.099 I [reactor-http-nio-2] [MQ3] Message[안녕~ 세상] <<< publish UNKNOWN
                22:36:02.009 I [pool-1-thread-6] [MQ3Consumer] consumerTag=amq.ctag-3l2T-TGTcBfu7udP89je-w, deliveryTag=2, routingKey=MQ3, body=안녕~ 세상
                22:36:07.983 I [reactor-http-nio-2] [MQ3] Message[안녕~ 세상] <<< publish ACK
                22:36:07.983 I [pool-1-thread-7] [MQ3Consumer] consumerTag=amq.ctag-3l2T-TGTcBfu7udP89je-w, deliveryTag=3, routingKey=MQ3, body=안녕~ 세상