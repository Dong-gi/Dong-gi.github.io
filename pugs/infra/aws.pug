include ../../source/skeleton.pug
+post('AWS', 'AWS', 'AWS 정리')
    h1 참고자료
    ul
        li: +asA('https://docs.aws.amazon.com/index.html', 'AWS 공식 문서')
        li: +asA('https://explore.skillbuilder.aws/learn', 'AWS 공식 - Learning Center')
        li: +asA('https://aws.amazon.com/ko/architecture/security-identity-compliance/', 'AWS 공식 - 보안 Best Practice')

    h1 IAM; Identity and Access Management
    div
        h2 IAM이란?
        ul
            li 암호나 액세스 키를 공유하지 않고도 권한 부여
            li 세분화된 권한 관리
            li 다른 곳에 암호가 있는 사용자에게 임시 액세스 권한 부여
            li AWS는 PCI DSS 1 레벨1 서비스 공급자 인증을 받음
            li IAM과 STS는 추가 비용 없이 제공됨
        div
            h3 IAM 작동 방식
            div
                h4.fake Terms
                ul
                    li IAM 리소스
                    p 사용자, 그룹, 정책, 자격 증명 공급자 객체는 다른 AWS 서비스와 마찬가지로 IAM에서 추가, 편집, 제거 가능한 리소스다
                    li IAM 자격 증명
                    p 사용자(영구 자격 증명 사용), 그룹, 역할(임시 보안 자격 증명 사용). 식별 및 그룹화에 사용되는 IAM 리소스 객체로, 정책을 이에 연결할 수 있다
                    li IAM 엔터티
                    p 사용자, 역할. AWS가 인증에 사용하는 IAM 리소스 객체
                    li 보안 주체
                    p AWS 루트 사용자, IAM 사용자, IAM 역할을 사용하여 AWS에 요청하는 사람 또는 애플리케이션
                    li 최소 권한 원칙
                    p 필요한 경우에만 승격된 권한을 사용하도록 제한

                h4.fake Request
                p 보안 주체가 AWS Management Console, AWS API, AWS CLI를 사용해 전송하는 요청에는 다음의 정보가 포함된다 -- 요청 컨텍스트
                ul
                    li 수행하고자 하는 작업
                    li 작업 대상이 되는 AWS 리소스 객체
                    li 요청을 보내는 보안 주체
                    li 환경 데이터 : IP 주소, User agent, SSL 사용 여부 등
                    li 리소스 객체와 연관된 데이터 : EC2 인스턴스 태그 등

                h4.fake Authorization
                p AWS는 요청 컨텍스트에 적용되는 각 정책을 확인하여, 하나라도 거부되는 경우 전체 요청을 거부하고 평가를 중지한다. 아래는 요청 평가에 대한 일반 규칙
                ol
                    li 기본적으로 모든 요청은 거부
                    li 정책에 포함된 명시적 허용은 위 거부를 재정의
                    li 권한 경계 또는 세션 정책이 있는 경우 위 허용을 재정의
                    li 정책의 명시적 거부는 위 허용을 무시

            h3 ABAC란?
            ul
                li ABAC(Attribute based access control)는 보안 주체와 리소스의 태그가 일치할 때 권한을 부여한다
                li 동종 리소스에 대한 동일 작업에 대한 정책 하나만 가지고도 각 보안 주체가 각각 필요한 리소스에만 접근할 수 있게 한다

        h2 IAM 시작하기 > IAM 관리자 및 사용자 그룹 생성
        ol
            li 루트 사용자로 로그인
            li 탐색 표시줄 > 내 계정 > 결제 정보에 대한 IAM 사용자 및 역할 액세스 편집 > IAM 액세스 활성
            p 관리자 사용자가 비용 및 사용량과 상호작용하려면 위 작업 필요
            li IAM 콘솔에서 관리자 사용자 추가. 여러 명인 경우 사용자 그룹도 추가
            li 사용자 또는 사용자 그룹에 AdministratorAccess 정책 연결

        h2 자습서
        div
            h3 역할을 사용하여 AWS 계정 간 권한 위임
            ol
                li 리소스를 가진 계정(A)에서 리소스 액세스 역할 생성
                p 역할 생성 시, 신뢰할 수 있는 엔터티 유형으로 "다른 AWS 계정" 지정
                li 권한을 위임받고자 하는 계정(B)에서 적절한 IAM 보안 주체에 AssumeRole 허용 정책 연결
                +asCode('json', '인라인 정책 예').
                    {
                        "Version": "2012-10-17",
                        "Statement": {
                            "Effect": "Allow",
                            "Action": "sts:AssumeRole",
                            "Resource": "arn:aws:iam::ACCOUNT-A-ID:role/ROLE-NAME"
                        }
                    }
                li 역할 전환 테스트
                ul
                    li AWS 콘솔
                    ul
                        li 역할 전환 시 ExternalId를 요구하지 않아야만 가능
                        li 방법 1 : 역할 생성 시 Role Summary 페이지에서 제공된 url 사용
                        li 방법 2 : 탐색 표시줄 > Switch Role > 계정 ID 또는 alias, 역할 이름 수동 입력
                    li AWS CLI
                    +asCode('shell', 'aws-cli').
                        aws sts assume-role --role-arn "ROLE-ARN" --role-session-name "ARBITRARY-SESSION-NAME"

                        # 환경 변수로 세션 키 설정
                        export AWS_ACCESS_KEY_ID="GIVEN-BY-ASSUME-ROLE"
                        export AWS_SECRET_ACCESS_KEY="GIVEN-BY-ASSUME-ROLE"
                        export AWS_SESSION_TOKEN="GIVEN-BY-ASSUME-ROLE"
                    li AWS API
                    p AssumeRole 호출 응답으로 주어진 임시 자격 증명을 사용하여 API 호출

            h3 ABAC 사용
            ul
                li "access-" 접두사를 가진 역할에 대해, 사용자 태그와 역할 태그가 일치하는 경우 역할 전환할 수 있는 정책 예
                +asCode('json').
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Sid": "TutorialAssumeRole",
                                "Effect": "Allow",
                                "Action": "sts:AssumeRole",
                                "Resource": "arn:aws:iam::ACCOUNT-ID:role/access-*",
                                "Condition": {
                                    "StringEquals": {
                                        "iam:ResourceTag/team": "${aws:PrincipalTag/team}",
                                        "iam:ResourceTag/project": "${aws:PrincipalTag/project}"
                                    }
                                }
                            }
                        ]
                    }
                li SAML 세션 태그를 이용해 역할 전환하는 정책 예
                +asCode('json').
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Sid": "AllowSamlIdentityAssumeRole",
                                "Effect": "Allow",
                                "Action": [
                                    "sts:AssumeRoleWithSAML",
                                    "sts:TagSession"
                                ],
                                "Principal": {
                                    "Federated": "arn:aws:iam::123456789012:saml-provider/ExampleCorpProvider"
                                },
                                "Condition": {
                                    "StringLike": {
                                        "aws:RequestTag/team": [
                                            "engineer",
                                            "qa"
                                        ],
                                        "aws:RequestTag/project": "*"
                                    },
                                    "StringEquals": {
                                        "SAML:aud": "https://signin.aws.amazon.com/saml"
                                    }
                                }
                            }
                        ]
                    }
                li 보안 주체 태그와 리소스 태그가 일치하는 경우 권한을 인가하는 정책 예
                +asCode('json').
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Sid": "AllActionsSecretsManagerSameProjectSameTeam",
                                "Effect": "Allow",
                                "Action": "secretsmanager:*",
                                "Resource": "*",
                                "Condition": {
                                    "StringEquals": {
                                        "aws:ResourceTag/team": "${aws:PrincipalTag/team}",
                                        "aws:ResourceTag/project": "${aws:PrincipalTag/project}"
                                    }
                                }
                            }
                        ]
                    }
                li ABAC로 권한을 부여받은 보안 주체가 태그 및 리소스 기반 정책을 변경하지 못하도록 하는 정책 예
                +asCode('json').
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Sid": "DenyUntagSecretsManagerReservedTags",
                                "Effect": "Deny",
                                "Action": "secretsmanager:UntagResource",
                                "Resource": "*",
                                "Condition": {
                                    "ForAnyValue:StringLike": {
                                        "aws:TagKeys": "*"
                                    }
                                }
                            },
                            {
                                "Sid": "DenyPermissionsManagement",
                                "Effect": "Deny",
                                "Action": "secretsmanager:*Policy",
                                "Resource": "*"
                            }
                        ]
                    }

        h2 ID
        div
            h3 Roles
            div
                h4.fake 역할을 사용할 수 있는 주체
                ul
                    li 동일한 AWS 계정의 IAM 사용자
                    li 다른 AWS 계정의 IAM 사용자
                    li AWS 서비스(EC2 등)
                    li SAML 2.0, OpenID Connect 등 외부 자격 증명 공급자(IdP)에 의해 인증된 외부 사용자

                h4.fake EC2 애플리케이션에서 역할 사용
                p EC2 인스턴스에 IAM 역할을 할당하면 장기 자격 증명을 인스턴스에 배포하지 않아도 된다. 예를 들어, AWS Java SDK에서 인증 정보 없이 서비스 클라이언트 인스턴스 생성 시 DefaultAWSCredentialsProviderChain에 정의된 순서대로 인증 정보를 조회한다
                ol
                    li 환경 변수 : AWS_ACCESS_KEY, AWS_SECRET_KEY
                    p Java SDK 외의 경우엔 AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
                    li Java System Properties : aws.accessKeyId, aws.secretKey
                    li Web Identity Token credential
                    li Credential profile : ~/.aws/credentials
                    li Amazon EC2 container service로 전달되는 인증 정보
                    li Amazon EC2 metadata service로 전달되는 인증 정보
                p 인스턴스 내부에서 aws cli를 직접 실행하는 경우엔 얘기가 다르다. profile을 추가로 지정해야 하고, 해당 profile로 assume role할 수 있는 권한이 있어야 한다

            h3 CloudTrail을 사용하여 이벤트 로깅
            ul
                li CloudTrail은 IAM, STS 호출을 이벤트로 캡처한다
                li 추적을 생성하면 이벤트를 S3 버킷으로 배포할 수 있다
                li 추적을 생성하지 않아도 Event history에서 90일 간의 기록을 무료로 확인 가능

        h2 액세스 관리
        div
            h3 정책 및 권한
            div
                h4.fake 정책 유형
                ul
                    li 자격 증명 기반 정책 : 관리형 및 인라인 정책을 보안 주체에 연결
                    li 리소스 기반 정책 : 인라인 정책을 리소스에 연결. e.g. S3 버킷 정책, IAM 역할 신뢰 정책
                    li 권한 경계 : 부여할 수 있는 최대 권한 정의
                    li Organizations SCP : 조직 단위 계정 멤버에 대한 최대 권한 정의
                    li ACL : JSON 정책 문서 구조를 사용하지 않고, 액세스할 수 있는 보안 주체 목록으로 제어
                    li 세션 정책 : 역할 또는 페더레이션 사용자에 대해 임시 세션을 프로그래밍 방식으로 생성할 때 파라미터로 전달하는 고급 정책

                h4.fake JSON 정책 언어 문법(2012-10-17)
                +asCode().
                    policy  = {
                        &lt;version_block?&gt;
                        &lt;id_block?&gt;
                        &lt;statement_block&gt;
                    }

                    &lt;version_block&gt; = "Version" : ("2008-10-17" | "2012-10-17")

                    &lt;id_block&gt; = "Id" : &lt;policy_id_string&gt;

                    &lt;statement_block&gt; = "Statement" : [ &lt;statement&gt;, &lt;statement&gt;, ... ]

                    &lt;statement&gt; = {
                        &lt;sid_block?&gt;,
                        &lt;principal_block?&gt;,
                        &lt;effect_block&gt;,
                        &lt;action_block&gt;,
                        &lt;resource_block&gt;,
                        &lt;condition_block?&gt;
                    }

                    &lt;sid_block&gt; = "Sid" : &lt;sid_string&gt;

                    &lt;effect_block&gt; = "Effect" : ("Allow" | "Deny")

                    &lt;principal_block&gt; = ("Principal" | "NotPrincipal") : ("*" | &lt;principal_map&gt;)

                    &lt;principal_map&gt; = { &lt;principal_map_entry&gt;, &lt;principal_map_entry&gt;, ... }

                    &lt;principal_map_entry&gt; = ("AWS" | "Federated" | "Service" | "CanonicalUser") :
                        [&lt;principal_id_string&gt;, &lt;principal_id_string&gt;, ...]

                    &lt;action_block&gt; = ("Action" | "NotAction") :
                        ("*" | [&lt;action_string&gt;, &lt;action_string&gt;, ...])

                    &lt;resource_block&gt; = ("Resource" | "NotResource") :
                        ("*" | [&lt;resource_string&gt;, &lt;resource_string&gt;, ...])

                    &lt;condition_block&gt; = "Condition" : { &lt;condition_map&gt; }
                    &lt;condition_map&gt; = {
                        &lt;condition_type_string&gt; : { &lt;condition_key_string&gt; : &lt;condition_value_list&gt; },
                        &lt;condition_type_string&gt; : { &lt;condition_key_string&gt; : &lt;condition_value_list&gt; }, ...
                    }
                    &lt;condition_value_list&gt; = [&lt;condition_value&gt;, &lt;condition_value&gt;, ...]
                    &lt;condition_value&gt; = ("string" | "number" | "Boolean")
                ul
                    li Version : 정책 언어 버전
                    li Id : 정책 식별자
                    li Statement : 1개 이상의 세부 정책
                    li Sid : 세부 정책 식별자. API에서 참조되는 값이 아니며, 정책에 대한 서술을 적어도 좋다
                    li Effect : 세부 정책이 허가/거부를 나타내는 지 여부
                    li Principal : 리소스 기반 JSON 정책에서, 허가/거부의 대상이 될 보안 주체 지정
                    li NotPrincipal : Principal과 반대로, 여집합을 지정
                    p "Effect": "Deny"와 함께, 지정한 보안 주체를 제외한 모든 보안 주체에 대해 명시적으로 거부하는 드문 경우에 사용
                    li Action : 대상 작업 목록. 작업 이름은 대소문자 구별 없음. 와일드카드 * 가능
                    li NotAction : Action과 반대로, 여집합을 지정
                    li Resource : 대상 리소스 ARN 목록. 와일드카드 *, ? 가능
                    li NotResource : Resource와 반대로, 여집합을 지정
                    li Condition : 요청 컨텍스트에 대한 추가 조건 연산

                h4.fake 정책 조건 연산
                ul
                    li 조건 키는 대소문자 구별 없음. aws:ResourceTag/<i class="w3-red">tag-key</i>처럼 키 일부를 사용자가 지정할 수 있는 경우에도 마찬가지로 대소문자 구별 없음에 유의
                    p 조건 키로 다음 2가지가 가능:
                        +asA('https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/reference_policies_condition-keys.html', '전역 조건 키')
                        |,
                        +asA('https://docs.aws.amazon.com/ko_kr/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html#context_keys_table', '서비스별 조건 키')
                    li 각 조건 키의 평가 결과는 다음 중 하나 : true, false, not present, null(빈 문자열)
                    li 조건 연산자
                    table.no-sort
                        +ths('연산자', '설명', '대응 Not 연산자')
                        +tds('문자열 조건 연산자', '정책 변수 사용 가능', '')
                        +tds('StringEquals', '대소문자 구별한 문자열 일치', 'StringNotEquals')
                        +tds('StringEqualsIgnoreCase', '대소문자 무시한 문자열 일치', 'StringNotEqualsIgnoreCase')
                        +tds('StringLike', '대소문자 구별한 문자열 일치. 와일드카드 *, ? 허용', 'StringNotLike')
                        +tds('숫자 조건 연산자', '정책 변수 사용 불가. 정수 또는 십진수 비교', '')
                        +tds('NumericEquals', '일치', 'NumericNotEquals')
                        +tds('NumericLessThan', '미만', 'NumericGreaterThanEquals')
                        +tds('NumericLessThanEquals', '이하', 'NumericGreaterThan')
                        +tds('날짜 조건 연산자', '정책 변수 사용 불가. ISO 8601 포맷 또는 UNIX epoch 비교', '')
                        +tds('DateEquals', '일치', 'DateNotEquals')
                        +tds('DateLessThan', '미만', 'DateGreaterThanEquals')
                        +tds('DateLessThanEquals', '이하', 'DateGreaterThan')
                        +tds('부울 조건 연산자', '정책 변수 사용 불가. 키를 "true" 또는 "false"와 비교', '')
                        +tds('Bool', '일치', '')
                        +tds('이진 조건 연산자', '정책 변수 사용 불가', '')
                        +tds('BinaryEquals', '지정한 Base64 인코딩 표시와 바이트 단위로 일치', '')
                        +tds('IP 주소 조건 연산자', '정책 변수 사용 불가', '')
                        +tds('IpAddress', '지정 CIDR에 포함', 'NotIpAddress')
                        +tds('ARN 조건 연산자', '정책 변수 사용 가능. ARN의 콜론으로 구분된 6개 구성요소 각각 별도로 확인한다', '')
                        +tds('ArnEquals, ArnLike', '대소문자 구별한 ARN 일치. 와일드카드 *, ? 허용', 'ArnNotEquals, ArnNotLike')
                        +tds('…IfExists 조건 연산자', 'Null을 제외한 조건 연산자 이름 끝에 IfExists를 추가하면 요청 컨텍스트에 정책 키가 없으면 true로 평가', '')
                        +tds('Null', '정책 변수 사용 불가. 조건 키의 유무 검사', '')
                    li 한 정책에 다수의 조건 연산자가 있는 경우 : AND 평가
                    li 한 조건 연산자에 다수의 키가 추가된 경우 : AND 평가
                    li 한 조건 키에 다수의 값이 포함된 경우 : OR 평가
                    li 값 자체가 다중인 경우, 조건 집합 연산자를 사용할 수 있다
                    ul
                        li ForAllValues : 요청 컨텍스트의 값 집합이 지정한 조건 키 집합의 부분집합
                        li ForAnyValue : 요청 컨텍스트의 값 집합 원소 중 하나라도 지정한 조건 키 집합의 원소
                        +asCode().
                            "Condition": {
                                "ForAnyValue:StringEquals": {
                                    "dynamodb:Attributes": [ "ID", "Message" ]
                                }
                            }

                    li 정책 변수 및 태그
                    ul
                        li Resource 요소에서의 사용 : ARN의 5번째 콜론 뒷부분만
                        +asCode() "Resource": ["arn:aws:s3:::bucket/${aws:PrincipalTag/department}"]
                        li Condition 요소에서의 사용 : 허용되는 조건 연산자에서만
                        +asCode().
                            "Condition": {
                                "StringLike": {
                                    "iam:ResourceTag/costCenter": [ "12345", "67890" ]
                                }
                            }
                        li 모든 요청에 사용할 수 있는 정보
                        table
                            +tds('aws:CurrentTime', '현재 시각')
                            +tds('aws:EpochTime', '현재 시각')
                            +tds('aws:TokenIssueTime', '임시 보안 자격 증명 발급 시각')
                            +tds('aws:PrincipalType', '보안 주체 종류 : Account, User, FederatedUser, AssumedRole, Anonymous(S3, SNS, SQS)')
                            +tds('aws:SecureTransport', 'SSL 요청인지 여부')
                            +tds('aws:SourceIp', '요청자 IP')
                            +tds('aws:UserAgent', '신뢰성이 떨어지는 클라이언트 정보')
                            +tds('aws:userid', '보안 주체 고유 ID')
                            +tds('aws:username', 'IAM 사용자 이름')
                            +tds('ec2:SourceInstanceARN', 'EC2에 할당된 IAM 역할을 이용해 들어온 요청인 경우 인스턴스 ARN이 설정됨')
                        li 서비스별 정보
                        p s3:prefix, s3:max-keys, s3:x-amz-acl, sns:Endpoint, sns:Protocol, ...
                        li 특수 문자 리터럴 표현
                        ul
                            li ${*} : 문자 * 표현
                            li ${?} : 문자 ? 표현
                            li ${$} : 문자 $ 표현
                        li 변수가 없는 경우 사용할 기본값 제공
                        +asCode() "Resource":"arn:aws:s3:::DOC-EXAMPLE-BUCKET-${aws:PrincipalTag/team, 'company-wide'}"

                h4.fake: +asA('https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/access_policies_examples.html', '정책 예제')
                ul
                    li MFA 설정 허용 정책
                    +asCode('json').
                        {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "VisualEditor0",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:DeactivateMFADevice",
                                        "iam:DeleteVirtualMFADevice",
                                        "iam:EnableMFADevice",
                                        "iam:ResyncMFADevice",
                                        "iam:CreateVirtualMFADevice",
                                        "iam:ListMFADevices"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::123456789012:mfa/${aws:username}",
                                        "arn:aws:iam::123456789012:user/${aws:username}"
                                    ]
                                },
                                {
                                    "Sid": "VisualEditor1",
                                    "Effect": "Allow",
                                    "Action": "iam:ListVirtualMFADevices",
                                    "Resource": "*"
                                }
                            ]
                        }

        h2 액세스 분석기
        p IAM Access Analyzer는 외부 엔터티와 공유되는 조직 및 계정 내 리소스를 식별하여 액세스가 의도한 액세스인지, 의도하지 않은 보안 위험인지 확인할 수 있다. 모든 상용 AWS 리전에서 무료로 IAM 콘솔 및 API를 통해 이용 가능

    h1 WAF, Firewall Manager, Shield
    div
        h2 개요
        ul
            li WAF(Web application firewall)
            p 규칙(e.g. 시간-IP당 요청 수)을 기반으로 HTTP/HTTPS 요청에 대한 허용/거부(403 Forbidden) 결정
            li Shield
            ul
                li DDoS 보호 서비스
                li Shield Standard : 기본 제공
                li Shield Advanced : 고급 기능 제공(월 3,000 USD)
            li Firewall Manager
            p 조직의 계정과 애플리케이션 방화 규칙에 대한 중앙 관리 서비스

        h2 WAF
        ul
            li Web ACL : 액세스를 결정하는 규칙 리스트. 규칙은 ACL 제한 용량까지만 추가 가능
            li Rule : 각 규칙은 조건식을 가지며, 조건식을 만족하는 요청에 대해 허용/거부/카운트/CAPTCHA 중 어느 것을 실행할 지 결정한다
            li Rule group : 재사용 가능한 규칙
        div
            h3 Rule
            div
                h4.fake Rule action
                ul
                    li Allow : 요청 허용
                    p 요청에 커스텀 헤더 추가 가능
                    li Count : 카운터 증가. 나머지 규칙 평가
                    p 요청에 커스텀 헤더 추가 가능. 이후 규칙 평가를 위한 커스텀 레이블 추가 가능
                    li Block : 요청 거부
                    li CAPTCHA : 캡차 실행

                h4.fake Rule type
                ul
                    li Regular rule : 조건 일치 요청에 대해 개별 action 결정
                    li Rate-based rule : 기간(5분) 중 동일 IP에 대해 임계값 초과한 요청에 대해 action 결정

                h4.fake Rule statement
                ul
                    li 모든 요청에 대해 action 실행
                    li IP 기반 국가 코드 일치하는 요청에 대해 action 실행
                    li IP 집합 포함 요청에 대해 action 실행
                    li Label 소지 요청에 대해 action 실행
                    li Header 패턴 일치 요청에 대해 action 실행
                    li Query 패턴 일치 요청에 대해 action 실행
                    li URI 패턴 일치 요청에 대해 action 실행
                    li Body 패턴 일치 요청에 대해 action 실행
                    p 최대 8KB만 평가한다
                    li HTTP method 패턴 일치 요청에 대해 action 실행
                +asCode('json', 'Rule 예시').
                    {
                        "Name": "RequestRate-by-IP",
                        "Priority": 0,
                        "Statement": {
                            "RateBasedStatement": {
                                "Limit": 1500,
                                "AggregateKeyType": "IP"
                            }
                        },
                        "Action": {
                            "Block": {}
                        },
                        "VisibilityConfig": {
                            "SampledRequestsEnabled": true,
                            "CloudWatchMetricsEnabled": true,
                            "MetricName": "RequestRate-by-IP"
                        }
                    }

    h1 기타 서비스
    ul
        li GuardDuty : 계정 내의 비정상적인 활동을 식별하고, 활동의 보안 관련성을 분석하며, 호출된 컨텍스트를 제공
        li EC2; Elastic Compute Cloud
        p OS를 포함한 컴퓨팅 머신
        li EBS; Elastic Block Store
        p EC2를 위한 스토리지(SSD)
        li EFS; Elastic File System
        ul
            li 용량 제약 없는 분산 네트워크 파일 시스템
            li 동시에 수천 개의 인스턴스가 사용할 수 있다
            li EBS보다 지연시간은 느리지만, 단위 시간당 처리량은 높다
            p 높은 IOPS에는 부적합
        li Elastic Beanstalk
        p 웹 앱 배포. Java, .NET, PHP, Node, Python, Ruby, Go, Docker...
        li S3; Simple Storage Service
        p 99.999999999% 내구성. 크기 무제한
        li S3 Glacier
        p 저렴한 데이터 아카이빙 S3 스토리지
        li ELB; Elastic Load Balancing
        p EC2 인스턴스, 컨테이너, IP 주소, Lambda 함수 등으로의 부하 분산
        li VPC; Virtual Private Cloud
        p 사용자 정의 가상 네트워크
        li Auto Scaling
        p 사용량에 따른 애플리케이션 규모 자동 조정
        li RDS; Relational Database Service
        p Amazon Aurora, PostgreSQL, MySQL, MariaDB, Oracle Database, SQL Server
        li Database Migration Service
        p 기존 데이터베이스를 AWS RDS로 마이그레이션
        li ElastiCache
        p Redis, Memcached
        li CloudFront
        p 글로벌 CDN
        li Route 53
        p 엔드 유저의 요청을 적절한 EC2 인스턴스, ELB, S3 버킷 등으로 연결하는 DNS
        li Simple Queue Service
        p 메시지 큐
        li Simple Notification Service
        p Pub/Sub 푸시 기반 메시징 서비스. 모바일 푸시, SMS, 이메일 등 가능
        li Simple Email Service
        li Organizations
        ul
            li 조직을 나누어 각 조직에 멤버 계정을 생성해 할당할 수 있다
            li 각 조직에 대한 정책을 정의할 수 있다
            li 단일 마스터 계정이 모든 비용을 지불한다
        li CloudTrail
        p AWS 계정 활동 감시
        li CloudWatch
        p AWS 리소스 및 애플리케이션 모니터링
        li CDK; Cloud Development Kit
        p CloudFormation 대신, 일반 프로그래밍 언어를 이용해 인프라 구성 자동화

    h1 싱글 웹서버
    ol
        li 규모가 작은 경우, API 게이트웨이 + 람다 조합이 더 저렴할 수 있다
        li EC2 인스턴스 생성
        p Auto-assign Public IP : Disable // 자동 할당되는 IP는 인스턴스가 시작할 때마다 변경된다
            br
            |Shutdown behavior : Stop // Terminate는 OS 정지 후 EC2 인스턴스 삭제
            br
            |Enable termination protection : 실수로 인스턴스 삭제되는 것을 방지
        li EC2 보안 그룹 설정
        p SSH | TCP | 22 | 작업 IP
            br
            |HTTP | TCP | 80 | 0.0.0.0/0
            br
            |HTTPS | TCP | 443 | 0.0.0.0/0
        li 고정 퍼블릭 IP(EIP; Elastic IP) 부여
        p AWS 관리 콘솔에서 Allocate New Address → 우클릭 → Associate Address
        li 도메인 연결 : Route 53
        p Create Record Set → Name : FQDN, Type : CNAME - Canon name, Value : EIP
        li EC2 인스턴스 삭제 시
        p Enable termination protection 해제 후 Terminate
            br
            |연결된 EBS, EIP 삭제

    h1 VPC
    ol
        +w3img('/imgs/security-diagram.png')
        li AWS 계정 생성시 VPC, 서브넷, 라우팅 테이블, 인터넷 게이트웨이, 네트워크 ACL 등은 가용 리전 및 AZ에 대해 기본적으로 생성된다
        p NAT 게이트웨이 등 사용자가 필요에 의해 직접 추가하는 리소스들은 추가 요금이 발생함에 유의
        li VPC; Virtual Private Cloud
        p AWS 계정 및 AWS 리전에 대해 고유한 전용 네트워크
        li AZ; Availability Zone, 가용 영역
        p AWS 리전은 2개 이상의 가용 영역으로 구성되며, 각 AZ는 서로의 장애로부터 물리적으로 격리된다
        li Subnet
        ul
            li VPC 내 할당 가능한 IP 주소 영역의 일부. AZ 안에 서브넷을 작성할 수 있으며, 다른 AZ와 공유되지 않는다
            li Private subnet 안에서 생성된 인스턴스에는 public IP가 부여되지 않는다
            p 또는 인스턴스 실행 시 public IP 부여 여부를 결정할 수 있으며, 인터넷 게이트웨이와 연결되지 않은 라우팅 테이블에 서브넷을 연결하면 결과적으로 public IP가 없는 것과 같은 효과를 갖는다
        li Route table
        p VPC 내부↔외부 네트워크 트래픽을 제어하는 규칙 정의. 라우팅 테이블 : 서브넷 = 1 : N 관계
        li Internet gateway
        ul
            li VPC 내부와 외부 인터넷 사이의 연결 통로
            li VPC 내 인스턴스 → 외부 인터넷 : 트래픽의 송신 주소를 인스턴스의 public IP/Elastic IP로 설정
            li 외부 인터넷 → VPC 내 인스턴스 : 트래픽의 수신 주소를 인스턴스의 private IP로 설정
        li NAT gateway
        ul
            li private 서브넷 내의 인스턴스가 외부 인터넷과 연결을 맺을 수 있도록 해준다
            p 외부 인터넷이 먼저 연결을 시작할 수는 없다
            li VPC 내 인스턴스 → 외부 인터넷 : 트래픽의 송신 주소를 NAT의 Elastic IP로 설정
            li 외부 인터넷 → VPC 내 인스턴스 : 트래픽의 수신 주소를 인스턴스의 private IP로 설정
        li VPC endpoint
        p 인터넷 게이트웨이를 거치지 않고, VPC 내 인스턴스와 AWS 서비스 또는 엔드포인트 서비스 사이의 직접적인 연결 지원
        li NIC; Network Interface Controller
        p 서브넷 내에서, 특정 보안 그룹 집합을 갖는 NIC를 생성할 수 있다. 인스턴스 : NIC = 1 : N 관계이며, 결과적으로 인스턴스는 N개의 private IP 주소를 할당받는다
        li Network ACL; Network Access Control List
        p 서브넷(들)에 대한 선택적인 방화벽 계층
        table
            caption 보안 그룹과 네트워크 ACL 비교
            +ths('Security group', 'Network ACL')
            +tds('인스턴스 단위 동작', '서브넷 단위 동작')
            +tds('허가 규칙만 존재', '허가 + 거부 규칙 존재')
            +tds('Is stateful: 응답은 무조건 허가', 'Is stateless: 응답도 규칙에 의해 허가되어야 한다')
            +tds('규칙은 순서 없이 모두 평가', '규칙은 우선순위에 의해 순차적으로 평가')
            +tds('적용된 인스턴스에 한해 적용', '서브넷에 포함된 모든 인스턴스에 자동 적용(따라서 선택적인 보안 계층을 제공함을 의미)')
        li VPC peering connection
        p 두 VPC(서로 다른 AWS 계정이어도 됨) 사이의 연결 지원. 인터넷 게이트웨이, VPN을 거치지 않고 각자의 private IP를 이용하여 AWS backbone을 통해 다이렉트로 암호화된 통신 가능
        li Client VPN
        p OpenVPN을 이용한 사용자 PC와 VPC 사이의 VPN 지원. private IP 주소를 이용한 인스턴스 접근이 가능해진다
        li Site-to-Site VPN
        p VPC와 사용자 네트워크 사이의 VPN 터널 유지
        li Traffic Mirroring
        p 두 EC2 인스턴스 사이의 트래픽을 미러링할 수 있다. ALB도 AWS 관리 EC2 인스턴스이므로, EC2 - ALB 사이의 트래픽도 확인할 수 있다.
            +asA('https://sjakthol.github.io/posts/alb-vpc-traffic-mirroring/', '참고 자료')

    h1 서버 다중화
    ol
        li ELB 설정
        p ELB는 엔드 유저의 요청을 받아야 하므로 0.0.0.0/0 소스 허용
            br
            |EC2 인스턴스 등은 ELB를 거친 연결만 허용하도록 보안 그룹 소스 변경
            br
            |ELB의 로드밸런서 프로토콜을 HTTPS, 인스턴스의 프로토콜을 HTTP로 하면 ELB가 SSL 처리를 모두 담당
        li RDS의 DB 다중화(Master-Standby)
        p 관리 콘솔 → RDS 설정 → DB 서브넷 그룹 작성 : 두 AZ 각각에 작성한 서브넷을 그루핑
            br
            |RDS 인스턴스 생성 시 멀티-AZ 옵션으로 DB 서브넷 그룹 지정
            br
            |RDS는 강제 업그레이드가 실행될 수 있으며, 멀티-AZ를 이용하는 경우, 스탠바이 서버부터 업그레이드되어 새로운 마스터가 된다

    h1 EC2
    div
        h2 Amazon Linux 2 이미지
        div
            h3 CodeDeploy agent 설치
            +asCode('shell').
                $ sudo yum install ruby -y
                $ sudo yum install wget -y

                # 리전에 따라 아래 url은 달라짐
                $ wget https://aws-codedeploy-ap-northeast-2.s3.amazonaws.com/latest/install
                $ chmod +x ./install
                $ sudo ./install auto
                $ sudo service codedeploy-agent status

            h3 JDK(corretto) 설치
            +asCode('shell').
                $ sudo rpm --import https://yum.corretto.aws/corretto.key
                $ sudo curl -L -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
                $ sudo yum install -y java-17-amazon-corretto-devel

            h3 aws configure
            p 인스턴스 내에서 aws cli 명령을 실행하려는 경우, 미리 자격 증명을 설정하는 것이 편리하다

            h3 시작 템플릿 > 사용자 데이터에서 CodeDeploy 실행
            +asCode('bash').
                #!/bin/bash
                aws deploy create-deployment --application-name AppName --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name GroupName --s3-location bucket=BucketName,bundleType=zip,key=ObjectKey

    h1 CloudFront
    div
        h2 캐시 정책 TTL 관련
        ul
            li 캐시 정책의 min, max, default TTL을 모두 31536000으로 설정해도 제대로 적용되지 않는 것으로 확인된다(2022-01-06)
            li 객체 속성 &gt; 메타데이터에서 Cache-Control값을 "public, max-age=31536000"으로 설정하는 것이 적용률이 높다
            p 그럼에도 불구하고 - 캐시 무효화를 3번이나 반복했음에도 - 모든 파일에 대해 캐시 관련 헤더가 제대로 설정되진 않았다(2022-01-06)

        h2 로드 밸런서를 원본으로 사용하는 경우 고려사항
        ul
            li GET 요청(캐시 대상)이 아닌 경우 성능이 나빠진다
            p 지리적으로 가장 가까운 엣지 포인트를 통해 AWS의 백본 네트워크를 이용하여 통신하므로 빨라질 것이라 기대해봤지만, 그렇지 않았다.
            ul
                li 테스트(2021-11-26) 조건 : 요청지@서울, 서버@us-east-2
                li 로드밸런서를 통해 직접 통신한 경우 190-200ms로 균일한 응답시간 확인
                li CDN을 거친 경우, 일부 요청은 10% 정도 빨리 응답(175ms 내외)되었지만, 절반 정도는 2배 이상 소요(670ms 내외)되었다.
            li 각 응답 캐시 시간을 Cache-Control: max-age 헤더로 조정
                +asA('https://aws.amazon.com/ko/premiumsupport/knowledge-center/cloudfront-cache-files-time/')
            li 쿼리 스트링 캐시 정책 조정
                +asA('https://docs.aws.amazon.com/ko_kr/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html')

    h1 Lambda
    div
        h2 Lambda@Edge
        ul
            li CloudFront 요청/응답으로 트리거되는 람다 함수
            p 원본 이미지 1개에 대하여, 여러 사이즈의 캐시 응답을 생성하는 예시 :
                +asA('https://aws.amazon.com/ko/blogs/networking-and-content-delivery/resizing-images-with-amazon-cloudfront-lambdaedge-aws-cdn-blog/')
            li Lambda Layer는 지원되지 않는다
        div
            h3.fake 가능한 실행 지점
            ol
                li Viewer Request : CloudFront가 요청을 받아, 캐시를 검사하는 시점에 실행
                li Origin Request : 캐시에 항목이 없어 원본(origin)을 요청하는 시점에 실행
                li Origin Response : 원본(origin) 응답을 받은 이후, 캐시에 적재하기 전에 실행
                li Viewer Response : 응답을 엔드 유저에게 전달하기 전에 실행

    h1 특이 현상
    div
        h2 CPU 사용률이 100을 초과하는 현상(2022-01-21)
        p EC2 및 ElastiCache(Redis)에서 발생하였으며, 이 때문에 Auto Scaling 그룹의 자동 조정 정책 지표를 인스턴스 평균 CPU 사용률 대신 평균 ALB 요청 수로 변경함
        +w3img('/imgs/photo_2022-02-10 16.08.44.jpeg', 'EC2 스크린샷')
        +w3img('/imgs/photo_2022-02-10 16.16.52.jpeg', 'Redis 스크린샷')

        h2 WAF 규칙 적용 후 평균 응답 시간(P95, P99 포함 전부)이 획기적으로 단축된 것으로 보고되는 현상(2022-01-16)
        p ALB 통계에 포함되는 처리 시간 일부가 WAF 규칙 평가로 옮겨가서?
        +w3img('/imgs/photo_2022-02-10 16.21.20.jpeg')
