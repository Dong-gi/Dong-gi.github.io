include ../../source/skeleton.pug
+post('AWS', 'AWS', 'AWS 정리')
    h1 참고자료
    ul
        li: +asA('https://docs.aws.amazon.com/index.html', 'AWS 공식 문서')
        li: +asA('https://explore.skillbuilder.aws/learn', 'AWS 공식 - Learning Center')
        li: +asA('https://aws.amazon.com/ko/architecture/security-identity-compliance/', 'AWS 공식 - 보안 Best Practice')

    h1 IAM; Identity and Access Management
    div
        h2 참고자료
        ul
            li: +asA('https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/introduction.html')
            li: +asA('https://gist.github.com/shortjared/4c1e3fe52bdfa47522cfe5b41e5d6f22', 'List of AWS Service Principals')

        h2 기능
        ul
            li 암호나 액세스 키를 공유하지 않고도 권한 부여
            li 세분화된 권한 관리
            li 다른 곳에 암호가 있는 사용자에게 임시 액세스 권한 부여
            li AWS는 PCI DSS 1 레벨1 서비스 공급자 인증을 받음
            li IAM과 STS는 추가 비용 없이 제공됨

        div
            h3 IAM 작동 방식
            div
                h4.fake Terms
                ul
                    li IAM 리소스
                    p 사용자, 그룹, 정책, 자격 증명 공급자 객체는 다른 AWS 서비스와 마찬가지로 IAM에서 추가, 편집, 제거 가능한 리소스다
                    li IAM 자격 증명
                    p 사용자(영구 자격 증명), 그룹, 역할(단기 자격 증명). 식별 및 그룹화에 사용되는 IAM 리소스 객체로, 정책을 이에 연결할 수 있다
                    li IAM 엔터티
                    p 사용자, 역할. AWS가 인증에 사용하는 IAM 리소스 객체
                    li 보안 주체
                    p AWS 루트 사용자, IAM 사용자, IAM 역할을 사용하여 AWS에 요청하는 사람 또는 애플리케이션

                h4.fake Request
                p 보안 주체가 AWS Management Console, AWS API, AWS CLI를 사용해 전송하는 요청에는 다음의 정보가 포함된다 -- 요청 컨텍스트
                ul
                    li 수행하고자 하는 작업
                    li 작업 대상이 되는 AWS 리소스 객체
                    li 요청을 보내는 보안 주체
                    li 환경 데이터 : IP 주소, User agent, SSL 사용 여부 등
                    li 리소스 객체와 연관된 데이터 : EC2 인스턴스 태그 등

                h4.fake Authorization
                p AWS는 요청 컨텍스트에 적용되는 각 정책을 확인하여, 하나라도 거부되는 경우 전체 요청을 거부하고 평가를 중지한다. 아래는 요청 평가에 대한 일반 규칙
                ol
                    li 기본적으로 모든 요청은 거부
                    li 정책에 포함된 명시적 허용은 위 거부를 재정의
                    li 권한 경계 또는 세션 정책이 있는 경우 위 허용을 재정의
                    li 정책의 명시적 거부는 위 허용을 무시

        h2 etc..
        ul
            li 동일한 IAM 사용자와 여러 정책을 연결하는 경우 가장 제한이 적은 정책이 우선
            li EC2에 IAM 역할을 할당하면 장기 자격 증명을 인스턴스에 배포하지 않아도 된다
            p 인스턴스 내부에서 aws cli를 직접 실행하는 경우엔 얘기가 다르다. profile을 추가로 지정해야 하고, 해당 profile로 assume role을 할 수 있는 권한이 있어야 한다

    h1 서비스 종류
    ol
        li EC2; Elastic Compute Cloud
        p OS를 포함한 컴퓨팅 머신
        li EBS; Elastic Block Store
        p EC2를 위한 스토리지(SSD)
        li EFS; Elastic File System
        ul
            li 용량 제약 없는 분산 네트워크 파일 시스템
            li 동시에 수천 개의 인스턴스가 사용할 수 있다
            li EBS보다 지연시간은 느리지만, 단위 시간당 처리량은 높다
            p 높은 IOPS에는 부적합
        li Elastic Beanstalk
        p 웹 앱 배포. Java, .NET, PHP, Node, Python, Ruby, Go, Docker...
        li S3; Simple Storage Service
        p 99.999999999% 내구성. 크기 무제한
        li S3 Glacier
        p 저렴한 데이터 아카이빙 S3 스토리지
        li ELB; Elastic Load Balancing
        p EC2 인스턴스, 컨테이너, IP 주소, Lambda 함수 등으로의 부하 분산
        li VPC; Virtual Private Cloud
        p 사용자 정의 가상 네트워크
        li Auto Scaling
        p 사용량에 따른 애플리케이션 규모 자동 조정
        li RDS; Relational Database Service
        p Amazon Aurora, PostgreSQL, MySQL, MariaDB, Oracle Database, SQL Server
        li Database Migration Service
        p 기존 데이터베이스를 AWS RDS로 마이그레이션
        li ElastiCache
        p Redis, Memcached
        li CloudFront
        p 글로벌 CDN
        li Route 53
        p 엔드 유저의 요청을 적절한 EC2 인스턴스, ELB, S3 버킷 등으로 연결하는 DNS
        li Simple Queue Service
        p 메시지 큐
        li Simple Notification Service
        p Pub/Sub 푸시 기반 메시징 서비스. 모바일 푸시, SMS, 이메일 등 가능
        li Simple Email Service
        li Organizations
        ul
            li 조직을 나누어 각 조직에 멤버 계정을 생성해 할당할 수 있다
            li 각 조직에 대한 정책을 정의할 수 있다
            li 단일 마스터 계정이 모든 비용을 지불한다
        li CloudTrail
        p AWS 계정 활동 감시
        li CloudWatch
        p AWS 리소스 및 애플리케이션 모니터링
        li CDK; Cloud Development Kit
        p CloudFormation 대신, 일반 프로그래밍 언어를 이용해 인프라 구성 자동화

    h1 싱글 웹서버
    ol
        li 규모가 작은 경우, API 게이트웨이 + 람다 조합이 더 저렴할 수 있다
        li EC2 인스턴스 생성
        p Auto-assign Public IP : Disable // 자동 할당되는 IP는 인스턴스가 시작할 때마다 변경된다
            br
            |Shutdown behavior : Stop // Terminate는 OS 정지 후 EC2 인스턴스 삭제
            br
            |Enable termination protection : 실수로 인스턴스 삭제되는 것을 방지
        li EC2 보안 그룹 설정
        p SSH | TCP | 22 | 작업 IP
            br
            |HTTP | TCP | 80 | 0.0.0.0/0
            br
            |HTTPS | TCP | 443 | 0.0.0.0/0
        li 고정 퍼블릭 IP(EIP; Elastic IP) 부여
        p AWS 관리 콘솔에서 Allocate New Address → 우클릭 → Associate Address
        li 도메인 연결 : Route 53
        p Create Record Set → Name : FQDN, Type : CNAME - Canon name, Value : EIP
        li EC2 인스턴스 삭제 시
        p Enable termination protection 해제 후 Terminate
            br
            |연결된 EBS, EIP 삭제

    h1 VPC
    ol
        +w3img('/imgs/security-diagram.png')
        li AWS 계정 생성시 VPC, 서브넷, 라우팅 테이블, 인터넷 게이트웨이, 네트워크 ACL 등은 가용 리전 및 AZ에 대해 기본적으로 생성된다
        p NAT 게이트웨이 등 사용자가 필요에 의해 직접 추가하는 리소스들은 추가 요금이 발생함에 유의
        li VPC; Virtual Private Cloud
        p AWS 계정 및 AWS 리전에 대해 고유한 전용 네트워크
        li AZ; Availability Zone, 가용 영역
        p AWS 리전은 2개 이상의 가용 영역으로 구성되며, 각 AZ는 서로의 장애로부터 물리적으로 격리된다
        li Subnet
        ul
            li VPC 내 할당 가능한 IP 주소 영역의 일부. AZ 안에 서브넷을 작성할 수 있으며, 다른 AZ와 공유되지 않는다
            li Private subnet 안에서 생성된 인스턴스에는 public IP가 부여되지 않는다
            p 또는 인스턴스 실행 시 public IP 부여 여부를 결정할 수 있으며, 인터넷 게이트웨이와 연결되지 않은 라우팅 테이블에 서브넷을 연결하면 결과적으로 public IP가 없는 것과 같은 효과를 갖는다
        li Route table
        p VPC 내부↔외부 네트워크 트래픽을 제어하는 규칙 정의. 라우팅 테이블 : 서브넷 = 1 : N 관계
        li Internet gateway
        ul
            li VPC 내부와 외부 인터넷 사이의 연결 통로
            li VPC 내 인스턴스 → 외부 인터넷 : 트래픽의 송신 주소를 인스턴스의 public IP/Elastic IP로 설정
            li 외부 인터넷 → VPC 내 인스턴스 : 트래픽의 수신 주소를 인스턴스의 private IP로 설정
        li NAT gateway
        ul
            li private 서브넷 내의 인스턴스가 외부 인터넷과 연결을 맺을 수 있도록 해준다
            p 외부 인터넷이 먼저 연결을 시작할 수는 없다
            li VPC 내 인스턴스 → 외부 인터넷 : 트래픽의 송신 주소를 NAT의 Elastic IP로 설정
            li 외부 인터넷 → VPC 내 인스턴스 : 트래픽의 수신 주소를 인스턴스의 private IP로 설정
        li VPC endpoint
        p 인터넷 게이트웨이를 거치지 않고, VPC 내 인스턴스와 AWS 서비스 또는 엔드포인트 서비스 사이의 직접적인 연결 지원
        li NIC; Network Interface Controller
        p 서브넷 내에서, 특정 보안 그룹 집합을 갖는 NIC를 생성할 수 있다. 인스턴스 : NIC = 1 : N 관계이며, 결과적으로 인스턴스는 N개의 private IP 주소를 할당받는다
        li Network ACL; Network Access Control List
        p 서브넷(들)에 대한 선택적인 방화벽 계층
        table
            caption 보안 그룹과 네트워크 ACL 비교
            +ths('Security group', 'Network ACL')
            +tds('인스턴스 단위 동작', '서브넷 단위 동작')
            +tds('허가 규칙만 존재', '허가 + 거부 규칙 존재')
            +tds('Is stateful: 응답은 무조건 허가', 'Is stateless: 응답도 규칙에 의해 허가되어야 한다')
            +tds('규칙은 순서 없이 모두 평가', '규칙은 우선순위에 의해 순차적으로 평가')
            +tds('적용된 인스턴스에 한해 적용', '서브넷에 포함된 모든 인스턴스에 자동 적용(따라서 선택적인 보안 계층을 제공함을 의미)')
        li VPC peering connection
        p 두 VPC(서로 다른 AWS 계정이어도 됨) 사이의 연결 지원. 인터넷 게이트웨이, VPN을 거치지 않고 각자의 private IP를 이용하여 AWS backbone을 통해 다이렉트로 암호화된 통신 가능
        li Client VPN
        p OpenVPN을 이용한 사용자 PC와 VPC 사이의 VPN 지원. private IP 주소를 이용한 인스턴스 접근이 가능해진다
        li Site-to-Site VPN
        p VPC와 사용자 네트워크 사이의 VPN 터널 유지
        li Traffic Mirroring
        p 두 EC2 인스턴스 사이의 트래픽을 미러링할 수 있다. ALB도 AWS 관리 EC2 인스턴스이므로, EC2 - ALB 사이의 트래픽도 확인할 수 있다.
            +asA('https://sjakthol.github.io/posts/alb-vpc-traffic-mirroring/', '참고 자료')

    h1 서버 다중화
    ol
        li ELB 설정
        p ELB는 엔드 유저의 요청을 받아야 하므로 0.0.0.0/0 소스 허용
            br
            |EC2 인스턴스 등은 ELB를 거친 연결만 허용하도록 보안 그룹 소스 변경
            br
            |ELB의 로드밸런서 프로토콜을 HTTPS, 인스턴스의 프로토콜을 HTTP로 하면 ELB가 SSL 처리를 모두 담당
        li RDS의 DB 다중화(Master-Standby)
        p 관리 콘솔 → RDS 설정 → DB 서브넷 그룹 작성 : 두 AZ 각각에 작성한 서브넷을 그루핑
            br
            |RDS 인스턴스 생성 시 멀티-AZ 옵션으로 DB 서브넷 그룹 지정
            br
            |RDS는 강제 업그레이드가 실행될 수 있으며, 멀티-AZ를 이용하는 경우, 스탠바이 서버부터 업그레이드되어 새로운 마스터가 된다

    h1 EC2
    div
        h2 Amazon Linux 2 이미지
        div
            h3 CodeDeploy agent 설치
            +asCode('shell').
                $ sudo yum install ruby -y
                $ sudo yum install wget -y

                # 리전에 따라 아래 url은 달라짐
                $ wget https://aws-codedeploy-ap-northeast-2.s3.amazonaws.com/latest/install
                $ chmod +x ./install
                $ sudo ./install auto
                $ sudo service codedeploy-agent status

            h3 JDK(corretto) 설치
            +asCode('shell').
                $ sudo rpm --import https://yum.corretto.aws/corretto.key
                $ sudo curl -L -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
                $ sudo yum install -y java-17-amazon-corretto-devel

            h3 aws configure
            p 인스턴스 내에서 aws cli 명령을 실행하려는 경우, 미리 자격 증명을 설정하는 것이 편리하다

            h3 시작 템플릿 > 사용자 데이터에서 CodeDeploy 실행
            +asCode('bash').
                #!/bin/bash
                aws deploy create-deployment --application-name AppName --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name GroupName --s3-location bucket=BucketName,bundleType=zip,key=ObjectKey

    h1 CloudFront
    div
        h2 캐시 정책 TTL 관련
        ul
            li 캐시 정책의 min, max, default TTL을 모두 31536000으로 설정해도 제대로 적용되지 않는 것으로 확인된다(2022-01-06)
            li 객체 속성 &gt; 메타데이터에서 Cache-Control값을 "public, max-age=31536000"으로 설정하는 것이 적용률이 높다
            p 그럼에도 불구하고 - 캐시 무효화를 3번이나 반복했음에도 - 모든 파일에 대해 캐시 관련 헤더가 제대로 설정되진 않았다(2022-01-06)

        h2 로드 밸런서를 원본으로 사용하는 경우 고려사항
        ul
            li GET 요청(캐시 대상)이 아닌 경우 성능이 나빠진다
            p 지리적으로 가장 가까운 엣지 포인트를 통해 AWS의 백본 네트워크를 이용하여 통신하므로 빨라질 것이라 기대해봤지만, 그렇지 않았다.
            ul
                li 테스트(2021-11-26) 조건 : 요청지@서울, 서버@us-east-2
                li 로드밸런서를 통해 직접 통신한 경우 190-200ms로 균일한 응답시간 확인
                li CDN을 거친 경우, 일부 요청은 10% 정도 빨리 응답(175ms 내외)되었지만, 절반 정도는 2배 이상 소요(670ms 내외)되었다.
            li 각 응답 캐시 시간을 Cache-Control: max-age 헤더로 조정
                +asA('https://aws.amazon.com/ko/premiumsupport/knowledge-center/cloudfront-cache-files-time/')
            li 쿼리 스트링 캐시 정책 조정
                +asA('https://docs.aws.amazon.com/ko_kr/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html')

    h1 Lambda
    div
        h2 Lambda@Edge
        ul
            li CloudFront 요청/응답으로 트리거되는 람다 함수
            p 원본 이미지 1개에 대하여, 여러 사이즈의 캐시 응답을 생성하는 예시 :
                +asA('https://aws.amazon.com/ko/blogs/networking-and-content-delivery/resizing-images-with-amazon-cloudfront-lambdaedge-aws-cdn-blog/')
            li Lambda Layer는 지원되지 않는다
        div
            h3.fake 가능한 실행 지점
            ol
                li Viewer Request : CloudFront가 요청을 받아, 캐시를 검사하는 시점에 실행
                li Origin Request : 캐시에 항목이 없어 원본(origin)을 요청하는 시점에 실행
                li Origin Response : 원본(origin) 응답을 받은 이후, 캐시에 적재하기 전에 실행
                li Viewer Response : 응답을 엔드 유저에게 전달하기 전에 실행

    h1 특이 현상
    div
        h2 CPU 사용률이 100을 초과하는 현상(2022-01-21)
        p EC2 및 ElastiCache(Redis)에서 발생하였으며, 이 때문에 Auto Scaling 그룹의 자동 조정 정책 지표를 인스턴스 평균 CPU 사용률 대신 평균 ALB 요청 수로 변경함
        +w3img('/imgs/photo_2022-02-10 16.08.44.jpeg', 'EC2 스크린샷')
        +w3img('/imgs/photo_2022-02-10 16.16.52.jpeg', 'Redis 스크린샷')

        h2 WAF 규칙 적용 후 평균 응답 시간(P95, P99 포함 전부)이 획기적으로 단축된 것으로 보고되는 현상(2022-01-16)
        p ALB 통계에 포함되는 처리 시간 일부가 WAF 규칙 평가로 옮겨가서?
        +w3img('/imgs/photo_2022-02-10 16.21.20.jpeg')
