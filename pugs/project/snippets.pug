include ../../source/skeleton.pug
+post('Code Snippets', 'Snippet', 'Code Snippet 모음')
    h1 Common - 소수 찾기
    ul
        li 에라토스테네스의 체 : 
            +codeBtn('/Repositories/Single/20220209/FindPrime.java', 'java')
        li Library 지원
        +asCode('java').
            var i = BigInteger.valueOf(10000000000000L);
            for (var count = 0; count < 100; ++count) {
                // 합성수일 가능성은 2^(-100)을 넘지 않는다
                i = i.nextProbablePrime();
                System.out.println(i);
            }

    h1 Common - 양의 정수 n이 2의 거듭제곱인지 판별
    +asCode('java') (n &amp; (n - 1)) == 0

    h1 Common - 양의 정수 n, x에 대하여, 빠른 x % 2^n 계산
    ul
        li shift 연산 이용
        +asCode('java') x &lt;&lt; (32 - n) &gt;&gt;&gt; (32 - n)
        li and 연산 이용; (2^n - 1)는 사전에 계산되어 있어야 빠르다
        +asCode('java') x &amp; (2^n - 1)

    h1 Common - 한글 종성 구분
    ol
        li 한글은 0xAC00('가')부터 0xD7A3('힣')까지 총 11,172자가 정의
        li 11,172 = 초성 19 * 중성 21 * 종성 28(종성 없는 경우 포함)
        +asA('http://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt')
        li 코드 포인트 = (초성 인덱스 * 21 + 중성 인덱스) * 28 + 종성 인덱스 + '가'0xAC00
        ul
            li (코드 포인트 - '가'0xAC00) % 28 = 종성 인덱스
            li (코드 포인트 - 종성 인덱스 - '가'0xAC00) / 28 % 21 = 중성 인덱스
            li ((코드 포인트 - 종성 인덱스 - '가'0xAC00) / 28 - 중성 인덱스) / 21 = 초성 인덱스
        li 조사 처리 예시 코드
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/HangulUtility.java', 'java')

    h1 Common - year, month, day로부터 요일 구하기
    p
        +asA('https://cs.uwaterloo.ca/~alopez-o/math-faq/mathtext/node39.html', '출처')
        br
        |예. 2020년 2월 22일
    ul
        li d = 22 # 22일
        li m = 12 # 1(3월), 2(4월), ..., 12(2월)
        li c = 20 # year // 100
        li y = 19 # (year % 100), 1-2월이면 -1
        li w = (d + floor(2.6 * m - 0.2) - 2 * c + y + (y // 4) + (c // 4)) % 7
        p Week day : 0(일요일), 1(월요일), ..., 6(토요일)

    h1 C# - Console Redirect
    +codeBtn('/Repositories/VisualStudio/CSharp/WpfDataTool/Utility/ConsoleRedirectWriter.cs', 'cs')

    h1 C# - Naive HTTP Server
    +codeBtn('/Repositories/VisualStudio/CSharp/WpfDataTool/Utility/NaiveHttpServer.cs', 'cs')

    h1 HTML, JavaScript - 브라우저 매크로
    ul
        li https://www.steamgifts.com/
        p 게임 신청을 편리하게 하기 위한
            +codeBtn('/Repositories/JavaScript/Browser/steamgifts.com.js', 'javascript') 스크립트
        li http://hiy9.net/ms-ost/
            |메이플스토리 OST 다운로드
            +codeBtn('/Repositories/JavaScript/Browser/hiy9.net.js', 'javascript') 스크립트
        li https://maplestory.fandom.com/wiki/Music
            |메이플스토리 OST 다운로드
            +codeBtn('/Repositories/JavaScript/Browser/maplestory.fandom.com.js', 'javascript') 스크립트
        li https://davidfennmusic.bandcamp.com/album/moonlighter
            |플레이리스트 다운로드
            +codeBtn('/Repositories/JavaScript/Browser/davidfennmusic.bandcamp.com.js', 'javascript') 스크립트
        li https://store.steampowered.com/
            |스팀 게임 자동으로 "제외하기"
            +codeBtn('/Repositories/JavaScript/Browser/store.steampowered.com.js', 'javascript') 스크립트

    h1 HTML, JavaScript - 이미지 인코딩/디코딩
    ol
        li 비트열 a, b에 대하여 (a ^ b) ^ b = a임을 이용
        li 인코딩 ::= 기존 데이터의 각 바이트에 대하여, data[i] ^= mask[i]
        li 디코딩 ::= 인코딩된 데이터 각 바이트에 대하여, data[i] ^= mask[i]
        li 따라서 XOR에 이용하는 mask만 정확히 재현할 수 있다면 빠르게 in-place 인코딩/디코딩이 가능하다
    ul
        li: +codeBtn('/Repositories/Single/20220209/imageEncoding.html', 'nohighlight') View live here
        li
            +codeBtn('/Repositories/Single/20220209/imageEncoding.html', 'javascript', '[45,66]') encode()
            +codeBtn('/Repositories/Single/20220209/imageEncoding.html', 'javascript', '[68,87]') decode()

    h1 HTML, JavaScript - 테이블 정렬
    +codeBtn('/Repositories/JavaScript/Browser/ordered-table.js', 'javascript')

    h1 Java - 파일명 일괄 변경
    +codeBtn('/Repositories/Single/20220207/Rename.java', 'java')

    h1 JavaScript, Google Apps Script
    ul
        li 편집 이벤트 핸들러
        +asCode('javascript') function onEdit(e) {}
        li 편집 이벤트 - 편집 시트
        +asCode('javascript') e.source.getSheetName()
        li 편집 이벤트 - 편집 획득
        +asCode('javascript') let [r, c, h, w] = [parseInt(e.range.getRow()), parseInt(e.range.getColumn()), parseInt(e.range.getHeight()), parseInt(e.range.getWidth())];
        li 이름으로 시트 획득
        +asCode('javascript') SpreadsheetApp.getActive().getSheetByName(name)
        li 활성 시트 획득
        +asCode('javascript') SpreadsheetApp.getActiveSpreadsheet().getActiveSheet()
        li 시트 활성화
        +asCode('javascript') sheet.activate()
        li 전체 행 개수 획득
        +asCode('javascript') sheet.getMaxRows()
        li Range 획득
        +asCode('javascript').
            sheet.getRange(r, c)
            sheet.getRange(r, c, h, w)
            range.offset(x, y) // 등
        li Range 값 획득
        +asCode('javascript') range.getValue()
        li Range 값 배열 획득
        +asCode('javascript') range.getValues()
        li Range 값 설정
        +asCode('javascript') range.setValue(val)
        li Range 값 배열 설정
        +asCode('javascript') range.setValues(matrix)
        li Range 메모 획득
        +asCode('javascript') range.getNote()
        li Range 메모 설정
        +asCode('javascript') range.setNote()
        li Range 배경색 설정
        +asCode('javascript') range.setBackground('green')

    h1 JavaScript, Sequelize
    p 동적으로 sql 생성
    +asCode('javascript').
        // #1
        db.query(`insert into table_name (col1, col2) values ${arr.map(x => '...').join(',')}`, {
            type: Sequelize.QueryTypes.INSERT
        })
        // #2
        let data = [['a', 'b'], ['c', 'd']]
        db.query(`insert into table_name (col1, col2) values ${data.map(x => '(?)').join(',')}`, {
            replacements: data,
            type: Sequelize.QueryTypes.INSERT
        })

    h1 PostgreSQL
    ul
        li.marker 시각 차이 획득
        +asCode('sql') select abs(extract (epoch from (insert_datetime - '2019-07-04 19:39:55'::timestamp)));
        li.marker 테이블 목록 획득
        +asCode('sql') select * from information_schema.tables
        li.marker 테이블 정보 획득
        +asCode('sql') select * from information_schema.columns where table_name = '{tableName}'
        li.marker 테이블 기본 키 획득
        +asCode('sql').
            SELECT pg_attribute.attname as column FROM pg_index, pg_class, pg_attribute, pg_namespace
            WHERE
                pg_class.oid = '{tableName}'::regclass AND
                indrelid = pg_class.oid AND
                nspname = 'public' AND
                pg_class.relnamespace = pg_namespace.oid AND
                pg_attribute.attrelid = pg_class.oid AND
                pg_attribute.attnum = any(pg_index.indkey)
            AND indisprimary;
