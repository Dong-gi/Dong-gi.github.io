include ../../source/skeleton.jade
+post('Python Built-in Functions', 'Python, Built-in, Function', 'Python 내장 함수 정리')
    h1 타입 관련
    div
        h2 class bool([x])
        ul
            li True, False 중 하나를 반환한다. int의 서브클래스로, 더 상속할 수 없다.
            li Since 3.7 : x는 키워드 인자로 전달할 수 없다
        h2 class bytearray([source[, encoding[, errors]]])
        ol
            li 변경할 수 있는 바이트 배열. 생성자에 인자가 없으면 크기가 0인 바이트 배열을 반환한다.
            li source가 문자열인 경우 : encoding이 반드시 설정되어야 하며, str.encode()를 통해 변환된다.
            li source가 정수인 경우 : 해당 바이트 크기 만큼의 배열이 0 초기화된다.
            li source가 buffer 인터페이스와 호환되는 객체일 경우, 객체의 읽기 전용 버퍼로 배열을 초기화한다.
            li source가 iterable인 경우 : 반복자 모든 요소가 [0, 255] 사이의 정수여야 한다.
        h2 class bytes([source[, encoding[, errors]]])
        p bytearray의 변경 불가 버전. b"Hello World"처럼 리터럴 표기를 통해 객체를 생성할 수도 있다.
        h2 class complex([real[, imag]])
        ol
            li '1+2j'와 같이 문자열을 넘길 수도 있다.
            li 아무 인자도 넘기지 않으면 0j를 반환한다
            li complex(x)의 대리자 호출 순서 : __complex__() → __float__() → __index__()
            li Since 3.6 : '_'이 포함된 숫자 리터럴도 허용된다.
            li Since 3.8 : __complex__(), __float__() 둘 다 없으면 __index__() 호출
        h2 class float([x])
        ul
            li "nan", "inf", "infinity"도 인자로 가능하다.
            li 일반 객체의 경우 __float__() 메서드를 호출한다.
            li Since 3.6 : 숫자 리터럴에 '_' 허용
            li Since 3.7 : x는 키워드 인자로 전달할 수 없다
            li Since 3.8 : __float__()이 없는 경우 __index__()를 찾는다
        h2.
            class int([x])<br>
            class int(x, base=10)
        ul
            li 무인자 : 0
            li x.__int__() → 없으면 x.__index__() Since 3.8 → x.__trunc__()
            li 문자열 : base에 따라 파싱
            li Since 3.6 : 숫자 리터럴에 '_' 허용
        h2.
            class str(object=")<br>
            class str(object=b", encoding='utf-8', errors='strict')
        ul
            li encoding, errors 둘 다 없으면 object.__str__() 또는 repr(object) 반환
            li encoding, errors 하나라도 있으면 object는 bytes-like object여야 한다. bytes.decode(encoding, errors)를 반환
        h2 내장 컬렉션
        +asCode('python').
            class dict(**kwarg)
            class dict(maping, **kwarg)
            class dict(iterable, **kwarg)
            class set([iterable])
            class frozenset([iterable])
            class list([iterable])
        h2 class object
        p object는 __dict__이 없으므로 임의로 속성을 할당할 수 없다.
        h2 class property(fget=None, fset=None, fdel=None, doc=None)
        ul
            li property 속성을 반환한다. fget은 getter, fset은 setter, fdel은 속성 소멸자, doc은 도움말로써, 없으면 fget의 docstring을 복사해온다.
            li @property 데커레이터를 통해 쉽게 읽기전용 property를 만들 수 있다.
            li property 객체의 getter, setter, deleter 메서드 각각을 데커레이터로 정의할 수 있다.
            +codeBtn('/Repositories/Python/Basic/property_example.py', 'python', '[1,17,20,35]')
        h2.
            class slice(stop)<br>
            class slice(start, stop[, step])
        h2.
            class type(object)<br>
            class type(name, bases, dict)
        ul
            li 인자 하나만 전달됐을 경우 : 객체의 타입을 반환한다. 보통 object.__class__와 같다.
            p Since 3.6 type.__new__를 재정의하지 않은 type의 서브클래스들은 type(object)를 이용할 수 없다.
            li 세 인자 모두 전달됐을 경우 : 동적으로 타입 객체를 생성한다.
            p name : 클래스 이름, bases : 상속할 타입들의 튜플, dict : 클래스 내부 네임스페이스
        h2 @classmethod, @staticmethod
        +asCode('python').
            @classmethod  # 메서드를 클래스 메서드로 변경한다.
            @staticmethod # static method는 클래스 메서드나 객체 메서드와 달리 명시된 인자가 없다.
        h2.
            range(stop)<br>
            range(start, stop[, step])<br>
            tuple([iterable])
        p 불변 시퀀스 반환
        h2 memoryview(obj)
        p obj에 대한 memoryview 객체를 반환한다.
        h2 isinstance(object, classinfo)
        p 호환 여부 반환. classinfo는 여러 타입 객체들로 구성된 튜플일 수 있으며, 하나라도 만족하면 True를 반환한다.
        h2 issubclass(class, classinfo)
        p 클래스 호환 여부 반환. classinfo는 여러 클래스 객체로 구성된 튜플일 수 있으며, 모두를 만족해야 True를 반환한다.
        h2 super([type[, object-or-type]])
        ul
            li 메서드 호출을 상위 클래스로 연결하는 프록시 객체를 반환한다.
            p
                | 예. type(obj).__mro__의 순서가 D → C → B → A → object일 때, super(C, obj)의 탐색 순서는 B → A → object.
                +codeBtn('/Repositories/Python/Basic/super_example.py', 'python')
            li object-or-type이 객체인 경우 isinstance(obj, type) == True, 타입인 경우 issubclass(type2, type) == True를 만족해야 한다

    h1 객체 관련
    ul
        h2 dir([object])
        ol
            li 인자가 없으면 현재 local scope의 이름들을 나열한다. 인자가 있으면 객체의 속성들을 알파벳순으로 나열한다.
            li 객체에 __dir__()이 정의되었다면 그것을 이용한다.
            p __getattr__() 또는 __getattribute__()를 정의하여 dir()의 출력을 조정할 수 있다
            li __dir__()이 정의되지 않았다면 __dict__ 속성을 이용한다.
            p 이 경우 dir()의 결과는 완전하지 않을 수 있으며, __getattr__()과 다를 수도 있다
        h2 help([object])
        ul
            li 무인자 : 대화형 도움말 콘솔을 시작한다
            li 문자열 : 일치하는 모듈, 함수, 클래스, 메서드, 키워드, 문서 토픽을 출력한다.
            li 객체 : 객체에 대한 도움말 생성
        h2 vars([object])
        ul
            li 무인자 : locals()와 유사
            li 모듈, 클래스, 인스턴스, 다른 객체의 __dict__ 속성을 반환한다.
        h2 hash(object)
        p 사용자 정의 __hash__() 메서드를 작성할 때, hash()가 호스트 머신의 비트수에 따라 결과를 자름에 유의.
        h2 get/set/del/hasattr()
        +asCode('python').
            delattr(object, name)            # del object.name
            getattr(object, name[, default]) # object.name
            hasattr(object, name)
            setattr(object, name, value)
        h2 id(object)
        p 객체가 살아있는 동안 갖는 유일한 정수

    h1 문자열 관련
    ul
        h2 input([prompt])
        ul
            li prompt가 존재한다면 newline 없이 표준 출력된다.
            li 한 줄을 표준입력 받으며, EOF를 만나면 EOFError가 발생한다.
            li 이벤트 builtins.input/result 발생
        h2 print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
        ul
            li objects의 요소들을 sep로 구분하여 file에 쓰고, end로 끝맺는다.
            li file : write(string) 메서드를 가진 객체
            li Since 3.3 flush 추가 : 강제 flush 여부
        h2 ascii(object)
        p
            | 객체의 문자열 표현(repr())을 반환한다. ASCII 문자가 아닌 경우 이스케이프된다.
            +codeBtn('/Repositories/Python/Basic/built_in_function_example.py', 'python', '[1,1]')
        h2 repr(object)
        p object에 대한 문자열 표현을 반환한다. 여러 타입들이 object == eval(repr(object))를 만족하며, 그 외의 경우 &lt;> 사이에 객체 정보가 담긴다. __repr__()를 재정의하여 결과를 변경할 수 있다.
        h2 ord(), chr()
        +asCode('python').
            ord(c) # 유니코드 코드포인트 반환
            chr(i) # 유니코드 문자 반환. 가능한 i 값의 범위는 [0, 0x10FFFF]
        h2 bin(), oct(), hex()
        +asCode('python').
            bin(x) # 정수를 "0b"로 시작하는 2진 문자열로 변환
            oct(x) # 정수를 "0o"로 시작하는 8진수 표기의 문자열 반환
            hex(x) # 정수를 소문자 16진수 표기를 반환
                # 실수의 경우 float.hex()를 이용하면 된다
            # int 타입이 아니라도, 정수를 반환하는 __index__()가 있으면 그것을 이용한다.

            >>> oct(9), format(9, '#o'), f'{9:#o}'
            ('0o11', '0o11', '0o11')
            >>> hex(15), format(15, '#X'), format(15, 'x'), f'{15:#x}'
            ('0xf', '0XF', 'f', '0xf')
        p: +codeBtn('/Repositories/Python/Basic/built_in_function_example.py', 'python', '[3,4]')
        h2 format(value[, format_spec])
        p type(value).__format__(value, format_spec)과 같으며, 빌트인 자료형들에 쓰이는 표준 format_spec이 https://docs.python.org/3/library/string.html#formatspec에 정의되어 있다.

    h1 iterable 관련
    ul
        h2 all(), any()
        +asCode('python').
            all(iterable) # iterable 모든 요소가 True면 True 반환. iterable이 빈 경우도 True 반환.
            any(iterable) # iterable 하나의 요소라도 True면 True 반환. iterable이 빈 경우 False 반환.
        h2 enumerate(iterable, start=0)
        p iterable 요소에 숫자를 붙인 튜플들로 구성된 enumerate 객체를 반환한다.
        +asCode('python').
            >>> list(enumerate('abcde', start=4))
            [(4, 'a'), (5, 'b'), (6, 'c'), (7, 'd'), (8, 'e')]
        h2 filter(function, iterable)
        p 참을 만족하는 요소들로 반복자를 구성한다. itertools.filterfalse()는 정반대의 작업을 한다.
        +asCode('python').
            if function is None:
                (item for item in iterable if item)
            else:
                (item for item in iterable if function(item))
        h2 iter(object[, sentinel])
        ul
            li iterator 객체를 반환한다. object는 sentinel의 유무에 따라 다르게 해석된다
            li sentinel 없는 경우 : object는 __iter__() 또는 0부터 시작하는 정수를 받는 __getitem__()을 구현해야 한다.
            li sentinel 있는 경우 : object는 callable이어야 한다. 매 __next__() 호출마다 object를 인자 없이 호출하며, 그 결과가 sentinel과 같으면 StopIteration 발생
        h2 len(s)
        p s는 sequence 또는 collection
        h2 map(function, iterable, ...)
        p iterable에 대한 function 결과를 생산하는 iterator 반환
        +asCode('python').
            >>> list(map(lambda x: x + 1, [1, 2, 3, 4]))
            [2, 3, 4, 5]
            >>> list(map(lambda x, y: (x + 1, y + 1), [1, 2, 3, 4], [2, 3, 4, 5]))
            [(2, 3), (3, 4), (4, 5), (5, 6)]
        h2 max(), min(), sorted()
        +asCode('python').
            max(iterable, *[, key, default])
            max(arg1, arg2, *args[, key])
            min(iterable, *[, key, default])
            min(arg1, arg2, *args[, key])
            sorted(iterable, *, key=None, reverse=False) # 정렬된 새 리스트 반환
        p key : 원소로부터 정렬 키를 뽑아내는 함수.
        h2 next(iterator[, default])
        p iterator.__next__()
        h2 reversed(seq)
        p seq에 대한 뒤집힌 iterator를 반환한다. seq는 __reversed__()를 구현했거나 sequence protocol(__len__()과 0부터 시작하는 __getitem__())을 지원해야 한다.
        h2 sum(iterable, /, start=0)
        p 문자열 접합에는 ''.join(sequence), 확장 정밀도 float 합에는 math.fsum(), iterable 접합에는 itertools.chain()이 더 빠르다.
        h2 zip(*iterables)
        ul
            li iterable들의 같은 offset의 요소들을 튜플로 묶어 yield한다. 전치행렬과 유사한 효과
            li iterable들은 좌에서 우로 검사되며, 하나라도 끝나면 종료된다.
            li 간단하게 zip(*[iter(s)]*n)으로 같은 것을 n개 중복시킬 수 있다.
            li zip(*zip())은 원래의 것으로 원복하는 효과가 있다.

    h1 산수 관련
    ul
        h2 abs(x)
        p 절댓값을 반환한다. 복소수의 경우 절댓값으로 magnitude(= sqrt(a^2+b^2))가 반환된다.
        h2 divmod(a, b)
        ul
            li 정수 연산 : (a // b, a % b)
            li 실수 연산 : (q, a % b) where q = math.floor(a/b) or math.floor(a/b) - 1
            p a % b는 b의 부호를 따르며 0 &lt;= abs(a % b) &lt; abs(b)를 만족한다.
        h2 pow(x, y[, z])
        ul
            li modulo z에서의 거듭제곱값을 반환하며, 그 값은 (x**y)%z와 같지만 처리속도는 더 빠르다.
            li Since 3.8 : x가 z와 relatively prime(gcd(x, z) == 1)일 때 y = -1이 허용되며, 반환값은 modulo z에서 x의 곱셈에 대한 역원이다 → pow(x, -1, z) * x % z == 1
            p 예를 들어 디오판토스 방정식 4258x + 147y = 369에서, y를 소거한 4258x ≡ 369(mod 147)의 해 x = 369 * pow(4258, -1, 147) % 147
            li Since 3.9 : 키워드 인자 허용
        h2 round(number[, ndigits])
        p 반올림 모드는 round to even. 일부 float에 대해 기대와 다른 결과가 나올 수 있다
        +asCode('python') round(2.675, 2) == 2.67

    h1 기타
    ol
        h2 breakpoint(*args, **kws)
        p Since 3.7, 디버거 진입. sys.breakpointhook()를 호출하면서 args와 kws를 그대로 전달한다. sys.breakpointhook()는 무인자 함수이므로 타입 에러가 발생하면서 중단된다.
        h2 callable(object)
        p Removed 3.0, Since 3.2, 콜러블처럼 보이는지 여부를 반환한다. True를 반환해도 호출 실패할 가능성이 있음에 유의. 클래스 자체도 콜러블임에 유의.
        h2 compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)
        ul
            li source(문자열, 바이트 문자열, AST 객체)를 code나 AST 객체로 컴파일한다. Code 객체는 exec()나 eval()을 통해 실행할 수 있다.
            li filename : 코드를 읽어온 파일. 파일로부터 읽은 것이 아니라면 '&lt;string>'를 보통 대신 넘긴다.
            li mode : 'exec'(여러 문장 실행), 'eval'(표현식 하나 계산), 'single'(한 줄 실행)
            +asCode('python') exec(compile("a = 1\nb = 2\nprint(a+b)", "&lt;string>", "exec"))
            li optimize Since 3.2 : 0(최적화 없음, __debug__ is true), 1(asserts 제거, __debug__ is false), 2(docstring도 제거)
            li Since 3.8 : 플래그로 ast.PyCF_ALLOW_TOP_LEVEL_AWAIT 가능
            p 최상위 레벨 await, async for, async with 사용 가능
        h2 eval(expression[, globals[, locals]])
        ul
            li 표현식 하나를 평가하여 반환한다
            li expression : 표현식 문자열 또는 컴파일된 Code 객체
            li globals : dictionary
            li locals : mapping object
            li globals, locals모두 생략하면 실행 시점 스코프의 것이 사용된다
        h2 exec(object[, globals[, locals]])
        p eval()과 유사하지만, 여러 문장을 실행할 수 있다는 차이가 있다
        h2 globals()
        p 현재 모듈(함수나 메서드는 그것이 정의된 모듈)의 global symbol table(dictionary)을 반환한다.
        h2 locals()
        p 현재 스코프의 local symbol table에 대한 스냅샷(변경 불가, 하지도 말고) dictionary를 반환한다.
        h2 open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
        ul
            li 파일을 열고 file 객체를 반환한다. 텍스트 모드의 경우 io.TextIOBase, 이진 모드의 경우 io.BufferedIOBase
            li
                | file :
                +asA('https://docs.python.org/3/glossary.html#term-path-like-object', 'path-like object')
                | . file이 file descriptor인 경우, closefd가 False면 반환된 객체가 닫혀도 descriptor를 닫지 않는다
            li mode : r(읽기, default), w(쓰기, 파일 처음부터), x(없으면 생성), a(이어 쓰기), b(이진), t(텍스트, default), +(읽기+쓰기)
            li encoding : 텍스트 모드에서만 사용. 주어지지 않은 경우 locale.getpreferredencoding(False) 이용.
            p 가능한 인코딩 목록은 codecs 모듈에 정의됨.
            li 텍스트 IO와 이진 IO를 구별하며, 전자의 경우 str을, 후자의 경우 bytes를 반환한다.
            li buffering : 0(이진모드, 버퍼링 없음), 1(텍스트 모드, 라인 단위), > 1(바이트 사이즈 버퍼링)
        h2 __import__(name, globals=None, locals=None, fromlist=(), level=0)
        p importlib.import_module()과 다르게 보통 직접 사용할 일 없는 함수. import 문을 통해 호출된다.
