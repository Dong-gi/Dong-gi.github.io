include ../../source/skeleton.jade
+post('Python 3.8 데이터 모델', 'Python, Data Model', 'Python 3.8 데이터 모델 정리')
    h1.marker Objects, values, and types
    ol
        li 모든 객체는 id, type, value를 갖는다.
        li id는 생성된 후에는 불변하며, CPython의 경우 id(obj)는 obj의 메모리 주소다.
        li type(obj)으로 obj의 타입을 얻을 수 있으며, id와 마찬가지로 불변하다.
        li Container : 다른 객체에 대한 참조를 포함하는 객체

    h1.marker The standard type hierarchy
    ul
        li None
        p 식별자 "None"으로 이 타입의 싱글톤 객체를 얻을 수 있다. 값이 없음을 알리기 위해 사용된다.
        li NotImplemented
        p 식별자 "NotImplemented"로 이 타입의 싱글톤 객체를 얻을 수 있다. 산수 메서드, 비교 메서드는 연산이 구현되지 않은 경우 이를 반환해야 한다.
        li Ellipsis
        p
            | 리터럴 ... 이나 식별자 "Ellipsis"로 이 타입의 싱글톤 객체를 얻을 수 있다. 다음은 NumPy에서 "전체 차원"을 의미하는 ...
            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[1,1,10,39]', lan: 'python' })
    div
        h2.marker numbers.Number; 수
        ol
            li.marker numbers.Integral; 정수
            ol
                li int : 크기 제약 없는 정수
                li
                    | bool : 
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[42,45]', lan: 'python' }) int의 subtype
                    | 이며, True, False는 대부분 상황에서
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[46,47]', lan: 'python' }) 1, 0처럼 동작
                    | 한다.
            li.marker numbers.Real (float) : double precision 부동 소수
            li.marker numbers.Complex : 실수부, 허수부 모두 float인 복소수.

        h2.marker 시퀀스
        ol
            li 음이 아닌 정수로 인덱싱(seq[i]) 될 수 있는 유한 길이의 순서 있는 집합
            li 내장함수 len(seq)는 시퀀스가 가진 항목의 수를 반환한다
            li seq[i:j], seq[i:j:k] 슬라이싱 지원
        div
            h3.marker 불변 시퀀스
            ol
                li.marker 문자열
                ul
                    li U+0000 ~ U+10FFFF 유니코드 코드 포인트를 표현하는 값들의 시퀀스. 코드 포인트 값은 내장 함수 ord()로 획득 가능
                    li char 타입이 없는 대신, 각 문자열의 코드 포인트들은 길이 1인 문자열 객체.
                    li str.encode()는 주어진 인코딩으로 str을 bytes로 변환하고, bytes.decode()는 그 역을 수행한다.
                    li bytes와 bytearray는 str이 제공하는 메서드들을 거의 지원한다
                    p casefold(), isdecimal(), encode() 등 유니코드 관련 메서드도 지원한다. 이진 시퀀스로 정규 표현식을 컴파일하면 정규 표현식도 이진 시퀀스에 적용 가능
                li.marker 튜플; tuple
                ul
                    li 임의 객체들로 이루어진 시퀀스.
                    li 항목이 2개 이상 : 콤마로 분리한 표현식의 나열로 튜플 생성
                    li 항목이 1개 : 표현식에 콤마를 붙여서 생성
                    li
                        | 항목이 0개 : 한 쌍의 빈 괄호로
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[50,55]', lan: 'python' }) 생성
                li.marker bytes
                ul
                    li 바이트(0 ~ 255) 단위 불변 배열
                    li 리터럴 생성 : b'Hello World'
                    li 생성자 이용 : bytes()

            h3.marker 가변 시퀀스
            ol
                li Subscription(seq[i])과 슬라이싱은 대입문과 del 문의 대상으로 사용될 수 있다
                li list
                p []안에 표현식을 콤마로 분리하여 표현함으로써 생성
                li bytearray
                p bytes와 같은 인터페이스와 기능을 제공.
                li 확장 모듈 array, collections는 추가적인 가변 시퀀스 타입을 제공한다
                p
                    | array.array : frombytes(), fromfile(), fromlist(), tobytes(), tofile(), tolist(), byteswap(), typecode
                    br
                    | collections.deque : append()와 popleft()는 원자성을 갖는다. 초과되면 오래된 항목을 버린다.
                li bisect 모듈
                p 정렬된 시퀀스에 대하여, 정렬을 유지한 채로 삽입 등의 연산이 이뤄지도록 해준다.
                li memoryview
                p
                    | 버퍼 프로토콜을 지원하는 객체의 메모리 뷰를 만든다. 버퍼 프로토콜을 지원하는 내장 객체에는 bytes와 bytearray가 있다.
                    br
                    | 기저 객체가 쓰기 가능하면, 메모리 뷰는 일차원 슬라이스 대입을 지원한다. 크기 변경은 허용되지 않는다
                li queue 모듈
                p Queue, LifoQueue, PriorityQueue : 초과되면 빈 공간이 생길 때까지 대기
                li multiprocessing 모듈
                p Queue, JoinableQueue
                li asyncio 모듈
                p Queue, LifoQueue, PriorityQueue, JoinableQueue

        h2.marker 집합
        ol
            li 중복없는 불변 객체들의 순서없는 유한집합. 인덱싱할 수는 없지만 이터레이팅은 가능하다.
            li 가변 집합 set과 불변 집합 frozenset이 있다.
            li a | b 합, a & b 교, a - b 차

        h2.marker 매핑
        ol
            li 임의의 인덱스 집합으로 인덱싱되는 객체들의 유한집합. 매핑에서 인덱스 표기법 map[k]는 매핑 map에서 k로 인덱스 되는 객체를 선택한다. 이는 표현식에 사용되거나 del 문의 대상이 될 수 있다.
            li 내장 매핑형은 dict 하나가 존재하며, 키로 사용할 수 있는 것은 불변 객체뿐 ─ 키의 해시값이 불변할 것을 요구하기 때문 ─ 이다.
            li isinstance(test_obj, collections.abc.Mapping)를 통해 타입을 검사하면 된다
            li 기본값 설정 : setdefault() 이용 or defaultdict 사용 or __missing__() 정의
            li 매핑의 읽기 전용 객체 반환 : MappingProxyType
        +asCode('python').
            collections.OrderedDict
                # 키의 삽입 순서 유지. 순회 순서 예측 가능.
                # Since 3.7 : 기본 dict도 삽입 순서를 유지함이 공식 명세화되었다
            collections.ChainMap
                # 여러 매핑을 차례로 검색.
            collections.Counter
            collections.UserDict
                # 상속하여 확장하기 위한 용도. 내부에 data 객체를 갖는다.

        h2.marker Callable type; 호출 가능 타입
        ol
            li 사용자 정의 함수
            table.marker
                caption Special attributes
                tbody
                    tr
                        th 속성
                        th 의미
                        th 제한
                    tr
                        td __doc__
                        td 함수 도움말 문자열. 없는 경우 None. 상속되지 않는다.
                        td 쓰기 가능
                    tr
                        td __name__
                        td 함수명
                        td 쓰기 가능
                    tr
                        td __qualname__
                        td 정규화된 함수명. Since 3.3
                        td 쓰기 가능
                    tr
                        td __module__
                        td 함수가 정의된 모듈명. 없는 경우 None.
                        td 쓰기 가능
                    tr
                        td __defaults__
                        td 인자의 기본값(없으면 None)으로 구성된 튜플.
                        td 쓰기 가능
                    tr
                        td __code__
                        td 컴파일된 함수의 바디(body)를 나타내는 코드 객체
                        td 쓰기 가능
                    tr
                        td __globals__
                        td 함수의 전역 변수들을 가진 딕셔너리에 대한 참조
                        td 읽기 전용
                    tr
                        td __dict__
                        td 함수에 할당된 이름 공간.
                        td 쓰기 가능
                    tr
                        td __annotations__
                        td 매개변수 애너테이션을 가진 dict. dict의 키는 변수명. 반환 값 애너테이션의 키는 'return'
                        td 쓰기 가능
                    tr
                        td __kwdefaults__
                        td 키워드 형태로만 전달 가능한 매개변수들의 기본값을 가진 dict.
                        td 쓰기 가능
            li Instance method
            p 인스턴스 메서드는 클래스, 클래스 인스턴스, 다른 콜러블 객체를 결합한다
            +asCode('python').
                __self__ # 클래스 인스턴스 객체
                __func__ # 함수 객체
                __doc__  # __func__.__doc__
                __name__ # __func__.__name__

            li Generator function
            p yield 문을 사용하는 함수, 메서드. 이터레이터 객체를 반환한다.
            li Coroutine function
            p async def로 정의된 함수, 메서드. 코루틴 객체를 반환한다.
            li Asynchronous generator function
            p async def로 정의된 함수가 yield 문을 사용하는 경우. async for문에서 사용되는 비동기 이터레이터 객체를 반환한다.
            p 비동기 이터레이터의 aiterator.__anext__() 메서드를 호출하면 awaitable을 반환하는데, await할 때 yield 문이 값을 제공할 때까지 함수가 실행된다.
            li Built-in function
            p C 함수를 래핑
            li Built-in method
            p 내장 함수에 전달될 묵시적 객체를 자동으로 설정한다
            li Class
            p 클래스는 새 인스턴스를 만드는 팩터리로 동작한다. 호출 인자는 __new__(), __init__()으로 전달된다.
            li Class instance
            p 클래스에서 __call__() 메서드를 정의하면 클래스 인스턴스를 콜러블로 만들 수 있다

    h1.marker 특별 메서드
    p
        | 특별 메서드를 구현하면 사용자 정의 객체도 내장형 객체처럼 작동하게 된다.
        | 사용자 정의 클래스의 묵시적인 특수 메서드 호출은 메서드가 인스턴스 딕셔너리가 아닌 객체의 형에 정의되어 있을 때만 올바르게 작동함이
        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/special_method.py', lan: 'python' }) 보장된다
    p 특별 메서드를 직접 구현하기보다는 ABC를 상속하는 것이 낫다.
    ul
        li collections.abc
        p Iterable, Container, Sized, Callable, Hashable, Iterator, Sequence, MutableSequence, Mapping, MutableMapping, Set, MutableSet, MappingView, ItemsView, Keyiew, ValuesView
        li numbers
        p Number, Complex, Real, Rational, Integral
    div
        h2.marker Basic customization
        ul
            li.marker object.__new__(clazz[, ...])
            ol
                li 클래스 clazz의 새 인스턴스를 만들기 위해 호출된다.
                li 첫 번째 인자는 만들려는 인스턴스의 클래스, 나머지는 생성자에 전달될 것들
                li __new__()가 clazz 인스턴스를 반환한다면 인스턴스의 __init__() 메서드가 __init__(self[, ...])처럼 호출된다.
                li 주로 int, str, tuple 등 불변형 클래스의 서브 클래스의 인스턴스 생성을 위해 사용하고, 일반적인 구현은 super().__new__(cls[, ...])를 호출한 뒤에 나머지 작업 수행
            li.marker object.__init__(self[, ...])
            ol
                li 베이스 클래스가 __init__() 메서드를 갖고 있다면, 서브 클래스 __init__() 구현 시 명시적으로 호출해주는 것이 옳다.
                li __new__() 메서드가 생성하고 __init__() 메서드가 값을 설정하므로, __init__()은 None만을 반환할 수 있다.
            li.marker object.__del__(self)
            ol
                li 베이스 클래스가 __del__() 메서드를 갖고 있다면, 서브 클래스에서 명시적으로 호출해줘야 한다.
                li del x는 x의 참조 횟수를 감소시키고, x.__del__()은 참조 횟수가 0이 될 때 호출된다.
                li 인터프리터 종료 시 남아있는 객체들의 __del__() 호출은 보장되지 않는다.
            li.marker object.__repr__(self)
            ol
                li repr() 내장 함수에 의해 호출되며, 객체에 대한 정형적인 문자열 표현을 계산한다.
                li 객체의 문자열 표현 자체가 객체를 만들 수 있는 표현식이 되는 것이 좋다
                li __str__()이 없는 경우 대신 호출될 수 있다
            li.marker object.__str__(self)
            ol
                li str(object)와 내장 함수 format(), print()에 의해 호출된다
                li 읽기 좋은 객체의 문자열 표현을 반환하면 된다
                li object에 정의된 기본 구현은 object.__repr__()을 호출한다
            li.marker object.__bytes__(self)
            p bytes 생성자에 의해 호출되며, 객체의 바이트열 표현을 반환하면 된다.
            li.marker object.__format__(self, format_spec)
            p format() 내장 함수, 포맷 문자열 리터럴 계산, str.format() 메서드에 의해 호출된다. 정의되지 않은 경우 str(x)가 호출된다.
            li.marker object.__lt__(self, other) + le, eq, ne, gt, ge
            p 각각 &lt;, &lt;=, ==, !=, >, >=로 호출된다.
            li.marker object.__hash__(self)
            ol
                li 내장 함수 hash()와 set, frozenset, dict과 같은 해시형 컬렉션에서 호출된다.
                li 사용자 정의 클래스는 기본적으로 인스턴스의 고유값을 반환하는 __hash__()와 __eq__()를 갖는다.
                li __eq__()를 재정의하면 __hash__()는 None으로 설정된다. __hash__()를 재정의할 때, __eq__()를 같이 정의해줘야 컬렉션에서 정상 작동된다.
                li __eq__()를 재정의하지 않고 __hash__()를 지원하지 않으려는 경우, __hash__ = None 설정을 직접 해줘야 한다.
            li.marker object.__bool__(self)
            ol
                li 논리값 검사와 내장 연산 bool()에서 호출된다.
                li 재정의하지 않은 경우, __len__()이 정의됐다면 return __len__() != 0
                li 재정의하지 않았고, __len__()도 없다면 참으로 취급

        h2.marker Customizing attribute access
        ol
            li.marker object.__getattribute__(self, name)
            ol
                li 인스턴스의 속성을 접근할 때 항상 호출된다.
                li 인스턴스의 속성값을 반환하거나 AttributeError를 일으켜야 한다.
                li 재정의할 때, 무한 재귀의 발생을 방지하기 위해 object.__getattribute__(self, name)처럼 베이스 클래스의 메서드를 호출해야 한다.
            li.marker object.__getattr__(self, name)
            p __getattribute__()가 AttributeError를 일으키거나 __get__()이 AttributeError를 일으킬 때 호출된다.
            li.marker object.__setattr__(self, name, value)
            p 속성명(name)에 대한 값(value)을 별개 객체가 아닌, 인스턴스(self)의 속성에 직접 대입하는 경우, object.__setattr__(self, name, value)처럼 베이스 클래스의 메서드를 호출해야 한다.
            li.marker object.__delattr__(self, name)
            p del obj.name이 의미가 있는 경우에만 재정의해야 한다.
            li.marker object.__dir__(self)
            p 객체에 dir()이 호출될 때 호출된다. 시퀀스를 반환해야 한다.
        div
            h3.marker Customizing module attribute access
            p
                | 모듈 수준의 __getattr__, __dir__ 정의 가능. 다른 특별 메서드들도 정의해주고 싶다면 모듈 객체의 __class__ 속성을 types.ModuleType의 서브 클래스로 설정.
                +w3a()&attributes({target:'_blank', href:'https://docs.python.org/ko/3/reference/datamodel.html#customizing-module-attribute-access'}) 참고자료 1
                +w3a()&attributes({target:'_blank', href:'https://www.python.org/dev/peps/pep-0562/'}) 참고자료 2
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/large_module.py', lan: 'python' }) large_module.py »
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/test_module.py', lan: 'python' }) test_module.py »
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/module_example.py', lan: 'python' }) module_example.py »

            h3.marker Implementing Descriptors
            p 다음의 메서드들은, 메서드가 정의된 클래스의 인스턴스가 소유자(owner) 클래스에 등장할 때만 적용된다. 속성(attribute)들은 소유자 클래스의 __dict__의 키로 이용되는 속성을 가리킨다.
            ol
                li.marker object.__get__(self, instance, owner)
                ol
                    li 소유자 클래스 속성 접근, 소유자 클래스 인스턴스의 속성 접근시 호출된다.
                    li owner는 항상 소유자 클래스며, 클래스 속성 접근 시 instance는 None.
                    li 속성값을 반환하거나 AttributeError를 일으켜야 한다
                li.marker object.__set__(self, instance, value)
                li.marker object.__delete__(self, instance)
                li.marker object.__set_name__(self, owner, name)
                p
                    | 소유자 클래스 owner가 생성될 때 호출되어 이 디스크립터를 name에 할당한다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/descriptor_example.py', lan: 'python' }) descriptor_example.py »
            div
                h4.marker 디스크립터 호출
                ol
                    li 디스크립터 : __get__(), __set__(), __delete__() 중 하나라도 정의한 클래스
                    ul
                        li Data descriptor : __set__()이나 __delete__() 중 하나라도 정의한 경우
                        p
                            | 보통 데이터 디스크립터는 __get__()과 __set__()을 모두 정의한다. 이 경우 데이터 디스크립터는 인스턴스의 __dict__에 있는 값보다 우선한다.
                            br
                            +w3a()&attributes({target:'_blank', href:'https://docs.python.org/ko/3/library/functions.html#property'}) property() 함수
                            | 는 데이터 디스크립터로 구현되기 때문에, 인스턴스가 property의 동작을 변경할 수 없다. property는 __set__()을 자동 구현하므로, 읽기 전용 속성을 만들기 쉽다.
                            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/property_example.py', displayrange: '[1,17,20,35]', lan: 'python' }) property_example.py »
                        li Non-data descriptor : 인스턴스 __dict__보다 우선순위가 낮다
                        p
                            | 파이썬 메서드(staticmethod(), classmethod() 포함)는 비데이터 디스크립터로 구현되기 때문에, 인스턴스가 메서드를 새로 정의하거나 덮어쓸 수 있다. 따라서 같은 클래스의 다른 인스턴스들과는 다른 동작을 할 수 있다.
                            br
                            | → 모든 사용자 정의 함수는 __get__() 메서드가 정의된 디스크립터다. 사용자 정의 함수가 객체의 메서드로 바인드되고, 바인딩된 메서드 객체는 __call__() 메서드를 가지며, __self__ 속성을 첫 번째 인자로 전달해서 __func__ 속성이 참조하는 원래 함수를 호출한다.
                    li.marker 속성 접근(obj.name) 기본 절차
                    p obj.__dict__['name'] → type(obj).__dict__['name'] → type(obj)의 메타 클래스를 제외한 베이스 클래스 조회
                    li.marker 속성 접근 기본 절차 대신 디스크립터가 호출되는 경우
                    ol
                        li 직접 호출
                        p name.__get__(obj)
                        li 인스턴스 결합
                        p obj.name → type(obj).__dict__['name'].__get__(obj, type(obj))
                        li 클래스 결합
                        p Clazz.name → Clazz.__dict__['name'].__get__(None, Clazz)
                        li Super 결합
                        p super(Child, obj).method() → obj.__class__.__mro__에서 Child 바로 다음 나오는 베이스 클래스 Parent를 찾은 뒤, Parent.__dict__['method'].__get__(obj, obj.__class__)

            h3.marker object.__slots__
            ol
                li 멤버를 명시적으로 선언하고 __dict__와 __weakref__ 생성을 거부할 수 있다. 이를 통해 공간 절약 + 속성 접근 속도 향상을 기대할 수 있다.
                li __slots__가 없는 클래스를 상속하면 인스턴스의 __dict__와 __weakref__ 속성은 항상 존재한다
                li __dict__가 생성되지 않으므로, __slots__에 없는 새 속성을 할당할 수 없다(AttributeError).
                p 동적으로 새로운 속성을 할당하는 것이 필요하다면 __slots__에 '__dict__'를 추가한다
                li __weakref__가 생성되지 않으므로, 인스턴스에 대한 약한 참조를 지원하지 않는다.
                p 약한 참조 지원이 필요하다면 __slots__에 '__weakref__'를 추가한다.
                li __slots__는 각 변수 이름마다 디스크립터를 만드는 방식으로 클래스 수준에서 구현된다
                li 부모가 선언한 __slots__는 자식 클래스에도 제공된다
                p 자식 클래스가 __slots__(새로 추가되는 변수명만 포함)을 정의하지 않으면 __dict__와 __weakref__를 갖게 된다

        h2.marker Customizing class creation
        ol
            li.marker
                i classmethod
                |  object.__init_subclass__(cls)
            p
                | 클래스를 상속하는 경우, 베이스 클래스의 __init_subclass__가 호출된다. 클래스 데코레이터는 직접 적용할 클래스를 지정해줘야 하지만, __init_subclass__는 미래에 정의될 모든 서브 클래스에 적용된다.
                br
                | 새 클래스에 주어진 키워드 인자들(metaclass 제외)은 부모 클래스의 __init_subclass__로 전달된다. __init_subclass__에서는 필요한 키워드 인자들만 사용하고, 나머지는 베이스 클래스로 전달해야 한다.
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/init_subclass.py', lan: 'python' })
            li.marker metaclass
            ol
                li
                    +asA('https://stackoverflow.com/a/6581949/7369515')
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/metaclass_example.py', displayrange: '[1,48,50,62]', lan: 'python' })
                li 기본적으로 클래스는 type(name, bases, dict)을 사용해서 만들어진다.
                li 메타클래스는 type(name, bases, dict)의 동작을 대신 수행할 수 있는 함수/클래스다. __new__, __init__, __call__을 후킹하여 복잡한 작업을 뒤에서 처리할 수 있게 해준다.
            li.marker 클래스 및 인스턴스 검사
            ol
                li ABC; Abstract Base Class 도입을 위해 추가되었다
                p
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[191,192]', lan: 'python' }) abc 호환 검사 »
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[194,197]', lan: 'python' }) abc 호환 추가 »
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[199,211]', lan: 'python' }) 특별 메서드와 abc 호환 검사 »
                li class.__instancecheck__(self, instance)
                p isinstance(instance, class)에서 호출된다
                li class.__subclasscheck__(self, subclass)
                p issubclass(subclass, class)에서 호출된다
            li.marker 제네릭 흉내내기
            p
                i classmethod
                |  object.__class_getitem__(cls, key)
            li.marker 콜러블 흉내내기
            p object.__call__(self[, args...])
            li.marker 컨테이너 흉내내기
            ol
                li 매핑 : keys(), values(), items(), get(), clear(), setdefault(), pop(), popitem(), copy(), update()
                p collections.abc 모듈의 추상 베이스 클래스 MutableMapping을 이용하면 쉽다
                li 가변 시퀀스 : append(), count(), index(), extend(), insert(), pop(), remove(), reverse(), sort()
                li 시퀀스 : __add__(), __radd__(), __iadd__(), __mul__(), __rmul__(), __imul__()
                li in 연산자를 위해 매핑, 시퀀스 모두 __contains__()를 구현하도록 권장
                li 이터레이션을 위해 매핑, 시퀀스 모두 __iter__()를 구현하도록 권장
            div
                h4.marker 메서드 목록
                ol
                    li object.__len__(self) : 내장함수 len()에서 호출. __bool__()을 정의하지 않은 경우 이를 이용한다
                    li object.__length_hist__(self) Since 3.4 : operator.length_hint()에서 호출. 추정값을 반환하면 된다
                    li 슬라이싱
                    ol
                        li object.__getitem__(self, key)
                        p self[key]. 시퀀스 타입의 경우 정수와 슬라이스 객체만 key로 허용. 음수 인덱스를 어떻게 해석할 지를 여기서 구현한다. key가 적절하지 않은 타입이면 TypeError, 시퀀스의 범위 밖이면 IndexError(특히 for 루프가 이에 의존), 매핑의 key가 없으면 KeyError
                        li object.__setitem__(self, key, value)
                        li object.__delitem__(self, key)
                    li object.__missing__(self, key) : dict.__getitem__()이 못찾은 경우 이를 통해 기본값을 반환
                    li object.__iter__(self) : 이터레이터가 필요한 경우 호출된다
                    li object.__reversed__(self)
                    p 역순으로 탐색하는 이터레이터를 반환하면 된다. reversed() 내장함수는 기본적으로 시퀀스 프로토콜 ─ __len__(), __getitem__()을 이용하므로 이보다 효율적인 구현을 제공할 수 있을때만 구현한다
                    li object.__contains__(self, item)
                    p in, not in에서 호출되며, 기본적으로 __iter__()를 이용하고, 없으면 __getitem__()을 이용한다.
            li.marker 숫자 흉내내기
            ul
                li +, -, *, @(내적, matmul), /, //, %, divmod(), pow(), **, &lt;&lt;, >>, &, ^, |
                p
                    | object.__add__(self, other), __sub__, __mul__, __matmul__, __truediv__, __floordiv__, __mod__, __divmod__, __pow__, __lshift__, __rshift__, __and__, __xor__, __or__
                    br
                    | 연산자 우측에 있을 때도 동작하도록 하려면 object.__radd__(self, other), __rsub__, ...
                li +=, -=, *=, @=, ...
                p object.__iadd__(self, other), __isub__, ...
                li 일항 연산 +, -, abs(), ~
                p object.__neg__(self), __pos__, __abs__, __invert__
                li 내장 함수 complex(), int(), float()
                p object.__complex__(self), __int__, __float__
                li 인덱스 반환
                p object.__index__(self). 반드시 정수를 반환해야 하며, 정수형이라면 __int__()와 값이 동일해야 한다
                li 내장 함수 round(), math 모듈 trunc(), floor(), ceil()
                p
                    | object.__round__(self[, ndigits]), __trunc__(self), __floor__, __ceil__
                    br
                    | __int__()가 정의되지 않은 경우, 내장 함수 int()는 __trunc__()를 사용한다
            li.marker with문
            ol
                li 컨텍스트 관리 객체의 __enter__(), __exit__() 메서드가 반드시 호출됨을 보장한다
                li object.__enter__(self)
                p as 절로 지정된 대상은 이 메서드의 반환값을 가리킨다
                li object.__exit__(self, exc_type, exc_value, traceback)
                p 예외 없이 종료된 경우 self외 모든 인자는 None
            li.marker 객체 복사
            p
                | from copy import deepcopy
                br
                | __copy__(), __deepcopy__()를 구현하면 copy(), deepcopy() 동작을 제어할 수 있다.

    h1.marker Coroutine
    ol
        li.marker Generator Coroutine
        p yield문의 실행 제어 효과를 이용한 비동기 처리 구문
        ul
            li generator.close()
            p 제너레이터가 실행을 중단한 yield 표현식이 GeneratorExit 예외를 발생하게 만든다. GeneratorExit 예외를 받으면 제너레이터는 아무런 값도 생성하지 않아야 한다.
            li generator.throw(exc_type[, exc_value[, traceback]])
            p
                | 제너레이터가 중단한 곳의 yield 표현식에 예외를 전달한다. 제너레이터가 예외를 처리하면 제어 흐름이 다음 yield 문까지 진행되고, 생성된 값은 generator.throw() 호출 값이 된다. 제너레이터가 예외를 처리하지 않으면 코루틴은 중단되고 호출자까지 예외가 전파된다.
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[68,81]', lan: 'python' }) 제너레이터를 이용한 간단한 코루틴 »
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[83,98]', lan: 'python' }) 값을 반환하는 코루틴 »
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[101,126]', lan: 'python' }) 첫 번째 yield까지 자동 진행하는 코루틴 »
            li yield from
            ul
                li yield from x
                p
                    | iter(x)를 호출해서 x의 반복자를 가져온다. StopIteration 예외를 내부적으로 잡아서 자동으로 처리한다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[128,134,177,188]', lan: 'python' })
                li
                    | yield from은 가장 바깥쪽 호출자와 가장 안쪽의 하위 제너레이터 사이에 양방향 채널을 열어준다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Python/Basic/data_model.py', displayrange: '[101,109,137,175]', lan: 'python' })
                ul
                    li delegating generator : yield from 표현식을 갖는 제너레이터 함수
                    li subgenerator : yield from 표현식이 가져온 제너레이터.
                    li caller : delegating generator를 호출하는 코드
        li.marker Awaitable Object
        p object.__await__(self) Since 3.5 : 어웨이터블 구현을 위한 이터레이터 반환
        li.marker Coroutine Object
        p 코루틴 객체는 어웨이터블 객체다. 코루틴의 실행은 __await__()의 호출 결과를 이터레이트함으로써 제어된다.
        ul
            li coroutine.send(value)
            p 코루틴의 실행을 시작하거나 재개. value가 None이면 __await__()의 이터레이터를 전진, None이 아니면 이터레이터의 send() 메서드로 위임
            li coroutine.throw(type[, value[, traceback]])
            p 코루틴에서 예외가 처리되지 않으면 호출자에게 되돌아온다
            li coroutine.close()
        li.marker Asynchronous Iterator Since 3.5
        ul
            li object.__aiter__(self)
            p 비동기 제너레이터 반환
            li object.__anext__(self)
            p 비동기 제너레이터는 여기서 비동기 코드를 호출할 수 있다. 이터레이터의 다음 값을 반환하는 어웨이터블을 반환해야 한다. 이터레이션이 끝났다면 StopAsyncIteration을 발생해야 한다
        li.marker async with문 Since 3.5
        ul
            li object.__aenter__(self)
            p __enter__()와 유사하며, 어웨이터블을 반환한다
            li object.__aexit__(self, exc_type, exc_value, traceback)
            p __exit__()과 유사하며, 어웨이터블을 반환한다
