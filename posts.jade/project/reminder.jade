include ../../source/skeleton.jade
+post('Reminder', 'Spring Boot, Toy Project', 'Spring Boot Toy Project - Reminder')
    h1.marker 웹 알리미
    div
        h2.marker 개요
        ol
            li
                +asA('https://www.fastviewkorea.com/', '패스트뷰')
                +asA('https://fastviewkorea.atlassian.net/wiki/spaces/FDV/pages/96501906/My+Reminder+Mobile', '사전 과제')
                | 로 제작한 웹앱입니다.
            li: +asA('https://donggi.herokuapp.com/', 'Heroku 체험 링크')
            ul
                li 무료 서비스를 이용하였기 때문에, 최초 진입 시 앱 구동을 위해 다소 시간이 소요될 수 있습니다. 이후 접속은 원활히 진행됩니다.
                li 무료 서비스기 때문에, 종료 후 업로드된 파일들은 삭제됩니다.
            li
                | GitHub 저장소 링크 : 
                +asA('https://github.com/Dong-gi/Reminder')

        h2.marker 기술 스택
        ol
            li Spring Boot + Web
            li Spring AOP
            li PostgreSQL + MyBatis
            li W3.CSS

        h2.marker 주요 특징
        ol
            li 요청 사전 처리 - 인증
            p 인덱스 페이지, 로그인 시도 api 등 사전 인증이 필요없는 요청은 즉시 처리합니다.
            +asCode('java', 'AuthAspect.java').
                @Around("execution(public * io.github.donggi.reminder.action..*(..))")
                public Object aroundAction(ProceedingJoinPoint jp) throws Throwable {
                    boolean noAuth = ((MethodSignature) jp.getSignature()).getMethod().isAnnotationPresent(NoAuthAction.class);
                    if (noAuth)
                        return jp.proceed();
                    
                    // ↓ 인증이 필요한 요청은 세션이 수립되었는지 확인
                    HttpServletRequest servletRequest = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
                    LocalShare.SESSION.set(servletRequest.getSession());
                    if (LocalShare.SESSION.get().getAttribute(SessionKey.USER_ID) == null)
                        throw new ApiException(ApiResultCode.REQUEST_TOKEN_EXPIRED, "로그인 필요");
                    // ...
                }
            li 요청 사전 처리 - 중복 제외
            p 중복 처리되면 안 되는 요청들은 고유한 토큰을 이용하여 한 번만 처리됨을 보장했습니다.
            +asCode('java', 'AuthAspect.java').
                @Around("execution(public * io.github.donggi.reminder.action..*(..))")
                public Object aroundAction(ProceedingJoinPoint jp) throws Throwable {
                    // ...
                    if (noToken)
                        return jp.proceed();
            
                    String clientToken = servletRequest.getHeader(Texts.SERVLET_REQUEST_TOKEN_HEADER).trim();
                    LocalShare.SESSION.get().setAttribute(
                        SessionKey.REQUEST_TOKEN,
                        userLogic.refreshSession(LocalShare.USER_ID.get(), clientToken, null).getNextToken()
                    );
                    return jp.proceed();
                }
            li 예외에 안전한 API 응답
            p 예외가 발생한 경우에도 적절한 응답을 클라이언트에 전달합니다.
            +asCode('java', 'ApiExceptionAspect.java').
                @Around("execution(public * io.github.donggi.reminder.action..*(..))")
                public Object aroundAction(ProceedingJoinPoint jp) throws Throwable {
                    Object result = ((MethodSignature) jp.getSignature()).getReturnType();

                    try {
                        result = jp.proceed();                                         // 정상 응답
                        addApiAccessLog(ApiResultCode.OK, null);                       // 로깅
                    } catch (ApiException e) {
                        result = ((Class) result).newInstance();
                        ((ApiResponse) result).setApiResultCode(e.getApiResultCode()); // 닉네임 중복, 토큰 만료 등 서버 관리 에러 응답
                        addApiAccessLog(e.getApiResultCode(), e);                      // 로깅
                    } catch (Exception e) {
                        result = ((Class) result).newInstance();
                        ((ApiResponse) result).setApiResultCode(ApiResultCode.INTERNAL_ERROR); // 그 외 서버 에러 응답
                        addApiAccessLog(ApiResultCode.INTERNAL_ERROR, e);              // 로깅
                    }
                    // ...
                    return result;
                }
            li 자동 로그인
            p 자동 로그인을 허용한 경우, 토큰 만료 시각을 2222년으로 설정하여 이후 요청에 이용할 수 있게 했습니다.
            li SF; Simple HTML Framework
            p
                | 이 문제의 풀이에는 개인적으로 작성한 HTML 라이브러리를 적용했습니다. 자세한 내용은 다음의 링크를 참고해주세요.
                +asA('/posts/project/sf.html')

        h2.marker 개발 중 경험한 문제
        ul
            li Enum 자동 변환을 위해 설정한 MyBatis typeHandler 구현 클래스의 생성자에 Class&lt;Object>를 전달받아 초기화 불가능했던 문제
            p
                | insert 쿼리 실행 시 문제가 발생하여 
                +asA('https://stackoverflow.com/questions/62373191/mybatis-does-not-support-javatype-property/62373453', '스택 오버플로 질문')
                | 도 올렸지만, 결과적으로 POJO -> SQL 변환 시에는 setNonNullParameter, setParameter가 사용되기 때문에 해당 인자를 무시해도 된다는 것을 알게 됐습니다.

        h2.marker 스크린샷
        +w3img('/imgs/20200621_174003.jpg', '로그인').marker
        +w3img('/imgs/20200621_174002.jpg', '스낵바 알림').marker
        +w3img('/imgs/20200621_174000.jpg', '할일 목록').marker
        +w3img('/imgs/20200621_174001.jpg', '목록 검색').marker
