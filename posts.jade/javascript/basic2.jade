include ../../source/skeleton.jade
+post('브라우저 JavaScript', '브라우저, JavaScript', '브라우저 JavaScript 정리')
    h1.marker BOM; Browser Object Model
    ul
        li window
        p
            | 브라우저 윈도우를 가리키는 객체
            +codeBtn('/Repositories/JavaScript/Browser/window_open.js', 'javascript') Window#open
            +codeBtn('/Repositories/JavaScript/Browser/window_resizeto.js', 'javascript') Window#resizeTo
            +codeBtn('/Repositories/JavaScript/Browser/window_popup.js', 'javascript') Window#alert, confirm, prompt
        p window.onload : 문서를 전부 로드했을 때 실행되는 이벤트 리스너.
        li screen
        p window.screen과 동일. 표시되는 화면과 연관
        li location
        p
            | window.location과 동일. 현재 페이지 URL과 연관
            +codeBtn('/Repositories/JavaScript/Browser/location.js', 'javascript')
        li history
        p window.history와 동일. 페이지 기록과 연관
        li navigator
        p window.navigator와 동일. 브라우저 자체와 연관
        li document
        p window.document와 동일. 표시되는 페이지 내용과 연관

    h1.marker DOM; Document Object Model
    p
        | Icons made by
        +asA('http://www.freepik.com', 'Freepik')
        |  from
        +asA('http://www.flaticon.com', 'www.flaticon.com')
        |  is licensed by
        +asA('http://creativecommons.org/licenses/by/3.0/', 'CC 3.0 BY')
    #basic2-div1
        +codeBtn('/Repositories/JavaScript/Browser/dom_example1.js', 'javascript') DOM 예시 1
        +codeBtn('/Repositories/JavaScript/Browser/dom_example2.js', 'javascript') DOM 예시 2
        +codeBtn('/posts/javascript/audio_example.html', 'nohighlight') Audio 예시
        +codeBtn('/posts/javascript/audio_example.html', 'html') Audio 예시 코드
        +codeBtn('/posts/javascript/form_example.html', 'nohighlight') Form 예시
        +codeBtn('/posts/javascript/form_example.html', 'html') Form 예시 코드
        +codeBtn('/posts/javascript/selector_example.html', 'nohighlight') Query selector 예시
        +codeBtn('/posts/javascript/selector_example.html', 'html') Query selector 예시 코드

    h1.marker 이벤트 모델
    div
        h2.marker DOM 이벤트 흐름
        p 이벤트 캡처링 → 타깃 → 이벤트 버블링
        ul
            li 이벤트 캡처링 : 최상위 노드로부터 이벤트가 전달되는 과정
            p 캡처링 단계에서 리스너의 호출 기본값은 false. 동작을 위해 addEventListener()의 옵션 매개변수를 지정해야 한다
            li 이벤트 버블링 : 최하위 노드로부터 이벤트가 전달되는 과정

        h2.marker JavaScript 이벤트 핸들러 설정
        ol
            li EventTarget : Element, Document, Window, XMLHttpRequest
            li EventTarget.addEventListener() : 이벤트 핸들러 추가
            li EventTarget.dispatchEvent() : 처리할 이벤트 추가
            li EventTarget.removeEventListener() : 이벤트 핸들러 제거


    h1.marker 브라우저 저장소
    p
        +codeBtn('/posts/javascript/storage_example.html', 'nohighlight') 저장소 예시
        +codeBtn('/posts/javascript/storage_example.html', 'html') 저장소 예시 코드

    h1.marker 웹 워커
    ol
        li 메인 페이지와 별개의 스코프에서 백그라운드에서 실행되는 작업자
        +asCode('javascript').
            let worker = new Worker("filename.js");
            worker.postMessage("start!"); // 작업 시작. JSON 구조로 직렬화 가능한 값은 모두 전달 가능
            worker.terminate(); // 즉시 종료
            worker.onmesage = ...
            worker.onerror ...
        li 웹 워커 내부에서 전역 객체는 worker 자체
        p 페이지에서 보낸 메시지를 알기 위해서 onmesage 이벤트 핸들러를 등록한다.
        +asCode('javascript') self.onmessage = ...

    h1.marker 웹 소켓
    ol
        li 오래 지속되는 하나의 연결을 이용해 완전한 양방향 통신을 제공한다.
        li 프로토콜은 ws(비보안), wss(보안)
        li 웹 소켓은 동일 소스 정책이 적용되지 않으므로, 연결을 수락할지는 완전히 서버의 권한
        li 이벤트 종류 : open, message, error, close
    +asCode('javascript').
        let connection = new WebSocket("ws://host-address/page_or_function_name");
        // new WebSocket("wss://secure.example.com/chat", {"chat.v1", "chat.v2"});
        // connection.readyState === WebSocket.OPEN // CONNECTING, OPEN, CLOSING, CLOSED
        // connection.bufferedAmount : 전송 대기중인 크기

        connection.send("Hello World");
        connection.onmessage = function(event) { event.data ... }
        // onopen, onclose, onerror
        // onclose 이벤트 종료코드 1000외는 모두 비정상 종료 : http://tools.ietf.org/html/rfc6455#section-7.4
        // onmessage 이벤트 data 프로퍼티 : 메시지가 텍스트면 문자열, 메시지가 바이너리고 connection.binaryType이 "blob"(기본)이면 Blob, 메시지가 바이너리고 connection.binaryType이 "arraybuffer"면 ArrayBuffer

        connection.close(); // close 이벤트 객체는 wasClean, code, reason 프로퍼티 존재

    h1.marker 함수 감속
    p 윈도우 resize, scroll 이벤트처럼 연속적으로 발생하지만 연속적으로 처리할 필요가 없는 경우, 타이머를 등록한 뒤 로직이 실행되도록 하고, 로직이 실행되기 전에 재호출되면 기존 타이머를 제거하고 타이머를 재등록하는 기법
    +asCode('javascript').
        Donggi.throttle = function throttle(f, t, opt) {
            return function (args) {
                let previousCall = this.lastCall;
                this.lastCall = Date.now();
                if (!previousCall || (!!opt && !!opt.fast) || (this.lastCall - previousCall) > t) {
                    f(args);
                }
            }
        }
        Donggi.debounce = function debounce(f, t, opt) {
            return function (args) {
                let previousCall = this.lastCall;
                this.lastCall = Date.now();
                if (previousCall && ((this.lastCall - previousCall) <= t)) {
                    if (!opt || !opt.fast)
                        clearTimeout(this.lastCallTimer);
                }
                this.lastCallTimer = setTimeout(() => f(args), t);
            }
        }   

    h1.marker AJAX; Asynchronous JavaScript and XML + JSONP
    ol
        li 핵심 기술은 XMLHttpRequest; XHR
        li Ajax 이벤트
        ul
            li loadstart : 응답의 첫 번째 바이트를 수신
            li progress : 응답 수신 중 계속 발생
            li error : 요청에 에러가 있을 때
            li abort : abort() 호출해 연결을 종료했을 때
            li load : 응답을 완전히 받았을 때
            li loadend : 통신 종료. error, abort, load보다 나중에 발생
        li JSONP : JSON with Padding
        p Cross origin 제약이 적용되지 않는다. &lt;script src="~.js">&lt;/script>, &lt;script src="~.json">&lt;/script>도 JSONP 통신의 일종
    +asCode('javascript').
        // XMLHttpRequest 예
        let request = new XMLHttpRequest();
        // XMLHttpRequest.open(method, url, async, user, password)
        request.open('GET', './index.html', false);
        request.send();
        console.log(request.responseText);

        // FormData를 보낼 수 있다
        let data = new FormData();
        data.append("key", "value");
        let data = new FormData(document.forms[0]);
        request.send(data);
        // Blob, BufferSource, FormData, URLSearchParams, ReadableStream, USVString 전송 가능

        // jQuery Ajax 구문
        //     Ajax 간편 표기 : $.get(), $.post(), $.getJSON(), $.getScript(), $(selector).load()
        $.ajax({ type: 'get', url: './index.html', success: (data) => console.log(data) });
        $.ajax({
            type: 'post',
            dataType: 'json',
            url: 'http://donggi.dothome.co.kr/add_comment.php',
            data: { path: path, comment: comment },
            success: (data) => {
                if (data === "OK") {
                    showSnackbar("등록 성공", $('body'));
                    $(posts.contents[id]).find('input.form-control').val('');
                    getComment(path);
                } else {
                    showSnackbar("60초당 1번씩 등록 가능", $('body'));
                }
            },
            error: (request, status, error) => {
                showSnackbar("등록 실패.", $('body'));
            }
        });
        // jQuery Ajax 옵션
        //     async, complete(xhr, status), data, error(xhr, status, error), jsonp, jsonpCallback, success(data, status, xhr), timeout, type, url

    h1.marker 파일 API
    ol
        li 이전에는 자바스크립트에서 로컬 파일에 접근하는 것이 불가능했지만, 사용자가 입력 태그에 직접 설정한 파일에 대해 읽기가 가능해졌다.
        p
            | 로컬 파일 접근을 허용하는 브라우저에서 &lt;input type="file"> 요소의 files 프로퍼티는 FileList 객체다.
            | FileList는 길이 0 이상의 File 객체 목록이며, File 객체는 name과 lastModifiedDate 프로퍼티가 있는 Blob 객체다.
        li 아래 입력 필드에 아무 파일이나(이왕이면 이미지로) 드롭해보세요
        p
            input#basic2-input-files1(type='file', multiple)
            +codeBtn('/Repositories/JavaScript/Browser/file_example.js', 'javascript')
        li File, Blob 객체를 slice하면 Blob 객체가 반환된다
        li BLOB; BInary Large Object
        ul
            li postMessage()로 웹 워커에 blob을 보낼 수 있다
            li XMLHttpRequest.send()로 blob을 보낼 수 있다
            li URL.createObjectURL()로 blob:// 주소를 가져올 수 있으며, 이 url은 DOM이나 CSS를 활용할 수 있다
            p
                | Blob URL 삭제 : URL.revokeObjectURL()
                +codeBtn('/Repositories/JavaScript/Browser/blob_example.js', 'javascript')
            li FileReader 객체를 사용하면 Blob 내용을 비동기적으로 문자열이나 ArrayBuffer로 추출할 수 있다
        li FileReader
        +asCode('javascript') readAsText(file, encoding), readAsDataURL(file), readAsBinaryString(file), readAsArrayBuffer(file)

    h1.marker 브라우저 콘솔에서 jQuery 추가
    +asCode('javascript').
        let script = document.createElement('script');
        script.src = "https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js";
        document.getElementsByTagName('head')[0].appendChild(script);
