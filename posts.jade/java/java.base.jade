include ../../source/skeleton.jade
+post('java.base 모듈 12', 'Java, Base, JDK12', 'JDK12 java.base 모듈 정리')
    h1.marker java.io Since 1.0
    div
        h2.marker interface Closeable extends AutoCloseable Since 1.5
        ol
            li 데이터의 출발지나 목적지를 닫을 수 있으면 Closeable하다.
            li void close()
            p
                | 스트림 및 이와 관련된 시스템 자원을 해제한다. 이미 호출되었다면 아무 일도 하지 않는다.
                br
                | close() 실패했을 때, 예외를 던지는 대신 사용하던 자원을 모두 포기하고 Closeable 객체 내부적으로 '닫혔다(closed)'고 마크하길 권장한다.
        h2.marker interface Flushable Since 1.5
        ol
            li Flush할 수 있는 데이터 목적지는 Flushable하다.
            li void flush()
            p 버퍼에 저장된 데이터를 스트림에 모두 써 보낸다.
        h2.marker final class Console implements Flushable Since 1.6
        ol
            li
                | JVM이 컨트롤할 수 있는 문자 기반 콘솔에 대한 접근 제공. 콘솔 존재 여부는 하위 플랫폼에 의존적이며, 싱글톤으로 System.console()을 통해 얻을 수 있다. 만일 가용한 콘솔이 없다면 null이 넘겨진다.
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/ConsoleExample.java', lan: 'java'})
            li 콘솔에 대한 읽기/쓰기 작업은 모두 원자적으로 이루어지며, 따라서 다른 스레드가 대기할 가능성이 있다.
            li 콘솔에 대한 close()는 실제로 아무런 영향을 미치지 않는다.
            li 유닉스의 Ctrl+D, 윈도우의 Ctrl+Z와 같은 종료 문자를 만나면 읽기 메서드는 null을 반환한다.
            li 보안 유의 : 패스워드와 같은 중요한 데이터를 읽어들일 때, readPassword(), readPassword(String, Object...) 메서드를 이용하고, 반환된 char[]를 수동으로 0 초기화한다.
        +asCode('java').
            PrintWriter writer() // 유니크한 PrintWriter 객체 반환
            Reader reader()      // 유니크한 Reader 객체 반환
            char[] readPassword(String fmt, Object... args)
            char[] readPassword()
        h2.marker 바이트 단위 IO 관련
        div
            h2.marker interface DataInput Since 1.0
            ol
                li binary stream으로부터 바이트들을 읽고, 또 이를 자바 기본 타입 또는 String으로 만들어 반환하는 기능을 제공한다.
                li 읽기는 1바이트 단위로 이루어진다.
                li Modified UTF-8 : DataInput과 DataOutput 인터페이스는 수정된 UTF-8을 이용한다.
                ul
                    li '\u0001' ~ '\u007F'는 1바이트(0???????)로 표현한다.
                    li null('\u0000'), '\u0080' ~ '\u07FF'는 2바이트(110????? 10??????)로 표현한다.
                    li '\u0800' ~ '\uFFFF'는 3바이트(1110??? 10?????? 10??????)로 표현한다.
            +asCode('java').
                int skipBytes(int n)
                    // 입력 스트림의 n바이트를 무시한다. 실제로 무시한 바이트 길이가 반환된다.
                
                String readLine()
                    // 줄의 끝이나 파일 끝을 만나기까지의 문자열을 반환한다.
                    // 각 바이트들을 0 패딩하여 char로 변환하므로, 유니코드를 읽기는 부적합하다.
                    // 아무것도 읽지 못한 경우, 빈 문자열이 아닌 null이 반환된다.
                
                String readUTF()
                    // 먼저 readUnsignedShort()와 같은 방법으로 2개 바이트를 읽어와 UTF 길이를 구한다.
                    // 구한 길이만큼의 바이트를 읽으면서 상기한 Modified UTF-8에 맞춰 String을 만든다.
                    // 길이만큼의 바이트를 다 읽기 전에 EOF를 만나면 예외를 던진다.

            h2.marker interface DataOutput Since 1.0
            p DataInput과 대칭

            h2.marker abstract class InputStream implements Closeable Since 1.0
            ol
                li 바이트 단위 읽기에 대한 최상위 추상 클래스
                li 작업이 끝날 때까지 스레드가 블록되며, 스트림이 비동기적으로 닫히거나, 인터럽트가 발생하는 경우에 대해 대처하지 않는다.
            +asCode('java').
                static InputStream nullInputStream() Since 11
                    // 아무것도 읽지 않는 InputStream을 반환한다. 반환된 스트림은 처음부터 열려 있고, 마치 스트림의 끝에 도달한 것처럼 작동한다. 일반 InputSteram과 마찬가지로 close()를 통해 닫는다.
                
                long transferTo(OutputStream out) Since 9
                    // 입력 스트림의 모든 바이트를 읽어들여 out에 쓴다. 총 전송 바이트 수를 반환하며, 스트림을 닫는 작업을 하진 않는다.
                byte[] readAllBytes() Since 9
                byte[] readNBytes(int len) Since 11
                
                long skip(long n)
                    // 실제로 건너뛴 바이트 수를 반환. 음수 매개변수에 대해 0을 반환한다. 서브클래스들의 구현은 이와 다를 수 있다.
                int available()
                    // 막힘 없이 한 번에 읽어올 수 있는 바이트 수 예상값을 반환. InputStream 구현에 따라 전체 바이트 수를 반환하기도, 그렇지 않기도 하다. InputStream 자체는 항상 0을 반환하며, 서브클래스에서 재정의해야 한다.
                
                // 마킹 관련
                boolean markSupported()    // mark, reset 메서드를 지원하는지 여부 반환. 기본 false
                void mark(int readlimit)   // 현재 위치 마킹
                void reset()               // 마지막 마킹 위치로 이동

            h2.marker abstract class OutputStream implements Closeable, Flushable Since 1.0
            ol
                li 바이트 단위 쓰기에 대한 최상위 추상 클래스
            +asCode('java').
                static OutputStream nullOutputStream() Since 11
                    // 실제로 데이터를 쓰지는 않는 OutputStream 객체를 반환한다.

            h2.marker class FilterInputStream extends InputStream Since 1.0
            p 다른 InputStream에 대한 필터 장식자 정의 클래스로, 추가적인 메서드는 없다.

            h2.marker class FilterOutputStream extends OutputStream Since 1.0
            p 다른 OutputStream에 대한 필터 장식자 정의 클래스로, 추가적인 메서드는 없다.

            h2.marker class ByteArrayInputStream extends InputStream Since 1.0
            p 내부 버퍼 byte[] buf에 대한 읽기 연산을 지원하는 InputStream

            h2.marker class ByteArrayOutputStream extends OutputStream Since 1.0
            p 내부 버퍼 byte[] buf에 대해 쓰기 연산을 지원하는 OutputStream. 버퍼 크기는 자동으로 확장된다.
            +asCode('java').
                void writeTo(OutputStream out)
                    // 버퍼를 out에 모두 쓴다. == out.write(buf, 0, count)
                
                byte[] toByteArray() // buf 복사본 반환.
                void reset() // 지금까지 쓴 것을 무시하고 처음부터 재활용.
                int size()
                String toString(String charsetName) // Since 1.1 + 오버로딩

            h2.marker class BufferedInputStream extends FilterInputStream Since 1.0
            p 다른 입력 스트림에 버퍼를 제공하여 mark와 reset이 가능하게 해준다.
            +asCode('java').
                protected byte[] buf
                protected int count // 마지막 유효 바이트 인덱스 + 1
                protected int marklimit, markpos, pos
                    // |pos - markpos| &lt; marklimit면 markpos는 -1(기본값)이 된다.

            h2.marker class BufferedOutputStream extends FilterOutputStream Since 1.0
            p 다른 출력 스트림에 버퍼를 제공하여, 시스템 쓰기 작업이 빈번하게 일어나지 않게 해준다.

            h2.marker class DataInputStream extends FilterInputStream implements DataInput Since 1.0
            ol
                li 플랫폼 독립적인 자바 기본 타입 읽기를 정의한 DataInput을 구현한 장식자 클래스(FilterInputStream).
                li public DataInputStream(InputStream in)
                li static final String readUTF(DataInput in)
                |             Modified UTF-8을 이용하여 in 스트림으로부터 String을 해석해 반환한다.
        details
            h2.marker
                | class DataOutputStream extends FilterOutputStream implements DataOutput Since 1.0
            ol
                li 플랫폼 독립적인 자바 기본 타입 쓰기를 정의한 DataOutput을 구현한 장식자 클래스(FilterOutputStream)
                li protected int written
                |             현재까지 쓴 바이트 수. 오버플로될 경우 Integer.MAX_VALUE로 설정된다.
                li public DataOutputStream(OutputStream out)
                li final int size() == return written;
        details
            h2.marker
                | class PrintStream extends FilterOutputStream implements Appendable, Closeable Since 1.0
            ol
                li OutputStream에 기본 타입 및 각종 문자열을 쓰는 기능을 제공한다.
            details
                h2.marker Constructor Detail
                ol
                    li public PrintStream(OutputStream out, boolean autoFlush) + 1 오버로딩
                    |                 바이트 배열을 다 쓰거나, 새 줄 문자, '\n'을 쓰면 자동으로 flush()
                    li
                        | public PrintStream(OutputStream out, boolean autoFlush, String encoding) Since 1.4 + 1 오버로딩
                    li public PrintStream(String fileName, String csn) Since 1.5 + 2 오버로딩
                    |                 csn : Characterset Name
                    li public PrintStream(File file, String csn) Since 1.5 + 2 오버로딩
            details
                h2.marker Method Detail
                ol
                    li boolean checkError()
                    |                 flush()한 다음 오류 상태를 검사한다. 예외를 던지지 않으므로 이 메서드로 확인해야 한다. 스트림에 InterruptedIOException이 발생하면 Thread.currentThread().interrupt()를 실행한다.
                    li protected void setError Since 1.1
                    |                 에러 상태를 true로 한다.
                    li protected void clearError Since 1.6
                    |                 에러 상태를 초기화한다.
                    li 각종 print(), println(), append()
                    |                 void print(Object obj) == print(String.valueOf(Object))
                    li PrintStream printf(String format, Object... args) Since 1.5 + 1 오버로딩
                    li PrintStream format(String format, Object... args) Since 1.5 + 1 오버로딩
        details
            h2.marker class PipedInputStream extends InputStream Since 1.0
            ol
                li
                    | PipedOutputStream과 연결되어 바이트들을 받는 InputStream. PipedOutputStream과 별개의 스레드에서 동작해야 한다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/PipedStreamExample.java', lan: 'java'})
                li public PipedInputStream(PipedOutputStream src, int pipeSize) Since 1.6 + 3 오버로딩
                |             pipeSize : 내부 버퍼 크기. 지정되지 않으면 기본값 PIPE_SIZE 이용
                li void connect(PipedOutputStream src)
        details
            h2.marker class PipedOutputStream extends OutputStream Since 1.0
            ol
                li
                    | 연결된 PipedInputStream으로 바이트들을 보내는 OutputStream. PipedInputStream과 별개의 스레드에서 동작해야 한다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/PipedStreamExample.java', lan: 'java'})
                li public PipedOutputStream(PipedInpuStream snk) + 1 오버로딩
                li void connect(PipedInputStream snk)
        details
            h2.marker class SequenceInputStream extends InputStream Since 1.0
            ol
                li 여러 InputStream을 이어붙인듯이 활용하는 InputStream.
                li public SequenceInputStream(InputStream s1, InputStream s2)
                li public SequenceInputStream(Enumeration&lt;? extends InputStream> e)
        details
            h2.marker class PushbackInputStream extends FilterInputStream Since 1.0
            ol
                li
                    | 이미 읽은 것을 취소하고 다시 읽을 수 있는 기능을 지원한다. 이전에 읽은 내용을 저장하지는 않으므로, 덮어쓰기처럼 이용할 수 있다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/PushBackExample.java', lan: 'java'})
                li public PushbackInputStream(InputStream in, int size) Since 1.1
                li public PushbackInputStream(InputStream in) Since 1.1 : 1바이트짜리 버퍼를 이용한다.
                li void unread(int b) : 하위 8비트만 버퍼에 쓴다.
                li void unread(byte[] b), unread(byte[] b, int off, int len) Since 1.1
        details
            h2.marker class FileInputStream extends InputStream Since 1.0
            ol
                li
                    | FileInputStream(File file) + 2 오버로딩
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/SerializableExample.java', lan: 'java'})
                li FileChannel getChannel() Since 1.4
                |             유니크한 FileChannel을 반환하며, 채널에서의 위치는 스트림에서 읽어들인 만큼과 같다.
                li final FileDescriptor getFD()
        details
            h2.marker class FileOutputStream extends OutputStream Since 1.0
            ol
                li
                    | FileOutputStream(File file, boolean append) + 3 오버로딩
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/SerializableExample.java', lan: 'java'})
                li FileOutputStream(FileDescriptor fdObj)
                |             파일에 대한 새로운 OutputStream을 생성한다. 파일과의 연결에 대한 새 FileDescriptor 객체가 생성되고, 파일의 처음부터 쓰기 시작한다.
                |             Security manager가 있으면 checkWrite 메서드로 권한을 검사한다.
                li final FileDescriptor getFD()
                li FileChannel getChannel() Since 1.4
                |             유니크한 FileChannel을 반환하며, 채널에서의 위치는 스트림에서 쓴 바이트 수와 같다(append 모드가 아닐 경우). append 모드에서는 파일의 크기와 채널의 위치가 동일하다.
        h
        detils
        h2.marker 객체 IO(직렬화) 관련
        details
            h2.marker interface ObjectInput extends DataInput, AutoCloseable Since 1.1
            ol
                li DataInput을 통해 기본 자료형을 읽어오고, 추가적으로 객체를 읽어오는 작업을 지원한다.
                li Object readObject()
        details
            h2.marker interface ObjectOutput extends DataOutput, AutoCloseable Since 1.1
            ol
                li DataOutput에 추가로 객체 쓰기 작업을 지원한다.
                li void writeObject(Object obj)
        details
            h2.marker interface Serializable Since 1.1
            ol
                li
                    | 직렬화와 역질렬화를 지원하는 마커 인터페이스. ObjectInputStream, ObjectOutputStream의 메서드들을 이용해 알아서 저장/복구한다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/SerializableExample.java', lan: 'java'})
                li 직렬화하지 않을 멤버는 transient 키워드로 표시한다.
                li 직접 구현하고 싶다면 Externalizable 인터페이스를 구현하거나, 다음의 메서드들을 작성한다.
                ul
                    li private void writeObject(java.io.ObjectOutputStream out)
                    |                 out에 알아서 객체 표현 바이트들을 쓰면 된다.
                    li private void readObject(java.io.ObjectInputStream in)
                    |                 in에서 바이트들을 읽어와 알아서 객체를 생성하면 된다.
                    li private void readObjectNoData()
                    |                 객체들의 버전이 다르거나, 기타 이유로 객체를 초기화할 필요가 있는 경우 사용.
                li 대체 객체를 이용해 저장 : ANY-ACCESS-MODIFIER Object writeReplace()
                li 대체 객체를 이용해 복구 : ANY-ACCESS-MODIFIER Object readResolve()
                li 클래스 버전
                |             정의되지 않은 경우 기본값을 사용하지만, 명시할 것을 권장하고 있다.
                br
                |             ANY-ACCESS-MODIFIER static final long serialVersionUID = (version number)L;
        details
            h2.marker interface Externalizable extends Serializable Since 1.1
            ol
                li
                    | 객체 직렬화를 직접 구현하고자 할 때 이를 구현한다. 객체 직렬화는 빈 객체를 만든 뒤 각 속성의 값을 쓰므로 기본 생성자가 필요하다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/ExternalizableExample.java', lan: 'java'})
                li void writeExternal(ObjectOutput out)
                |             객체를 out에 쓴다.
                li void readExternal(ObjectInput in)
                |             in으로 객체를 생성한다.
        details
            h2.marker
                | class ObjectInputStream extends InputStream implements ObjectInput, ObjectStreamConstants Since 1.1
            |         객체 읽기에 관한 InputStream.
            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/SerializableExample.java', lan: 'java'})
        details
            h2.marker
                | class ObjectOutputStream extends OutputStream implements OjbectOutput, ObjectStreamConstants Since 1.1
            |         객체 쓰기에 관한 OutputStream.
            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/SerializableExample.java', lan: 'java'})
        h
        detils
        h2.marker 문자 단위 IO 관련
        details
            h2.marker abstract class Reader implements Readable, Closeable Since 1.1
            ol
                li char 단위 읽기에 대한 최상위 추상 클래스
                li 서브클래스들은 read(char[], int, int)와 close()만 구현해도 된다.
            details
                h2.marker Field Detail
                ol
                    li protected Object lock
                    |                 내부적으로 동기화에 이용하는 객체
            details
                h2.marker Method Detail
                ol
                    li static Reader nullReader() Since 11
                    |                 아무 것도 읽지 않는 Reader 객체를 반환한다.
                    li int read()
                    |                 char 하나를 읽고 int로 반환. 스트림의 끝이라면 -1을 반환한다.
                    li
                        | int read(char[] cbuf)
                        br
                        |                     abstract int read(char[] cbuf, int off, int len)
                    |                 실제로 읽은 글자 수를 반환.
                    li long skip(long n)
                    |                 실제로 건너 뛴 글자 수(바이트 수x) 반환
                    li boolean ready()
                    |                 다음 read()가 블록되지 않음을 보장하면 true, 보장하지 못하면 false
                    li 마킹 관련 : InputStream과 유사
                    li long transterTo(Writer out) Since 10
                    |                 모든 글자를 읽어 out에 쓴다. 전송한 글자 수를 반환한다.
        details
            h2.marker abstract class Writer implements Appendable, Closeable, Flushable Since 1.1
            ol
                li char 단위 쓰기에 대한 취상위 추상 클래스
                li Appendable하므로 편리함이 크다.
            details
                h2.marker Field Detail
                ol
                    li protected Object lock
                    |                 내부적으로 동기화에 이용되는 객체.
            details
                h2.marker Method Detail
                ol
                    li static Writer nullWriter() Since 11
                    |                 아무것도 쓰지 않는 Writer 객체를 반환한다.
                    li void write(int c)
                    |                 하위 16비트만 쓴고 나머지는 무시한다.
                    li
                        | void write(char[] cbuf)
                        br
                        |                     abstract void write(char[] cbuf, int off, int len)
                        br
                        |                     void write(String str)
                        br
                        |                     void write(String str, int off, int len)
        details
            h2.marker class InputStreamReader extends Reader Since 1.1
            ol
                li
                    | InputStream에 대해 Reader 작업을 지원해주는 bridge 클래스.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/BufferedReaderExample.java', lan: 'java'})
                li public InputStreamReader(InputStream in, String charsetName) + 3 오버로딩
                li String getEncoding()
        details
            h2.marker class OutputStreamWriter extends Writer Since 1.1
            ol
                li OutputStream에 Writer 작업을 지원해주는 bridge 클래스.
                li public OutputStreamWriter(OutputStream out, String charsetName) + 3 오버로딩
                li String getEncoding()
        details
            h2.marker abstract class FilterReader extends Reader Since 1.1
            |         다른 Reader에 대한 필터 장식자 정의 클래스로, 추가적인 메서드는 없다.
        details
            h2.marker abstract class FilterWriter extends Writer Since 1.1
            |         다른 Writer에 대한 필터 장식자 정의 클래스로, 추가적인 메서드는 없다.
        details
            h2.marker class CharArrayReader extends Reader Since 1.1
            ol
                li 내부 버퍼 char[] buf에 대한 읽기 연산을 지원하는 Reader
                li public CharArrayReader(char[] buf, int offset, int length) + 1 오버로딩
        details
            h2.marker class CharArrayWriter extends Writer Since 1.1
            ol
                li 내부 버퍼 char[] buf에 대해 쓰기 연산을 지원하는 Writer. 버퍼 크기는 자동으로 확장된다.
                li public CharArrayWriter(int initialSize) + 1 오버로딩
                li void writeTo(Writer out)
                |             out에 버퍼의 모든 내용을 쓴다.
                li void reset()
                |             버퍼를 비우고 재활용한다.
                li char[] toCharArray()
                li int size()
        details
            h2.marker class StringReader extends Reader Since 1.1
            ol
                li String에 대해 읽기 연산을 수행하는 Reader.
                li public StringReader(String s)
        details
            h2.marker class StringWriter extends Writer Since 1.1
            ol
                li 내부 StringBuffer에 쓰기 연산을 지원하는 Writer.
                li public StringWriter(int initialSize) + 1 오버로딩
                li StringBuffer getBuffer()
        details
            h2.marker class BufferedReader extends Reader Since 1.1
            ol
                li
                    | 다른 Reader에 대한 버퍼를 제공하여, 시스템 읽기 작업이 빈번하게 일어나지 않게 해준다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/BufferedReaderExample.java', lan: 'java'})
                li public BufferedReader(Reader in, int sz) + 1 오버로딩
                li String readLine() : EOF도 줄의 끝으로 간주
                li Stream&lt;String> lines() Since 1.8
        details
            h2.marker class BufferedWriter extends Writer Since 1.1
            ol
                li Writer에 버퍼를 제공하여 시스템 쓰기 작업이 빈번하게 일어나지 않도록 한다.
                li public BufferedWriter(Writer out, int sz) + 1 오버로딩
                li void newLine() : 줄 바꿈 문자열은 시스템 속성 line.separator로 결정된다.
        details
            h2.marker class LineNumberReader extends BufferedReader Since 1.1
            ol
                li Reader가 줄 끝을 만날때마다 라인을 카운트하는 클래스. 처음 시작은 0.
                li void setLineNumber(int lineNumber)
                |             읽기 위치가 이동하는 건 아니다
                li int getLineNumber()
        details
            h2.marker class PrintWriter extends Writer Since 1.1
            |         PrintStream의 Writer 버전. 텍스트 출력 스트림에 객체들을 정형화된 텍스트로 쓰는 기능을 제공한다.
        details
            h2.marker class PipedReader extends Reader Since 1.1
            |         PipedInputStream과 유사.
            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/PipedReaderExample.java', lan: 'java'})
        details
            h2.marker class PipedWriter extends Writer Since 1.1
            |         PipedOutputStream과 유사.
            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/PipedReaderExample.java', lan: 'java'})
        details
            h2.marker class PushbackReader extends FilterReader Since 1.1
            |         PushbackInputStream과 비슷.
            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/PushBackExample.java', lan: 'java'})
        details
            h2.marker class FileReader extends InputStreamReader Since 1.1
            ol
                li public FileReader(File file, Charset charset) Since 11 + 3 오버로딩
                li public FileReader(FileDescriptor fd)
        details
            h2.marker class FileWriter extends OutputStreamWriter Since 1.1
            ol
                li public FileWriter(FileDescriptor fd)
                li public FileWriter(File file, Charset charset, boolean append) Since 11 + 7 오버로딩
        h
        detils
        h2.marker 파일 관련
        details
            h2.marker @FunctionalInterface interface FileFilter Since 1.2
            ol
                li
                    | 파일 패스 필터링에 사용되며 File#listFiles의 매개변수로 객체가 넘겨진다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/FileFilterExample.java', lan: 'java'})
                li boolean accept(File pathname)
        details
            h2.marker @FunctionalInterface interface FilenameFilter Since 1.0
            ol
                li
                    | 특정 디렉터리에서의 파일명 필터링에 사용되며 FileDialog#setFilenameFilter, File#list, File#listFiles의 매개변수로 객체가 넘겨진다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/FilenameFilterExample.java', lan: 'java'})
                li boolean accept(File dir, String name)
        details
            h2.marker
                | class File implements Serializable, Comparable
                file  Since 1.0
            ol
                li 추상화된 파일 및 디렉터리 경로에 대한 추상화된 표현 제공.(물리적 저장 장치 » 경로 문자열 » File 객체)
                li 경로 문자열은 절대 경로, 상대 경로 둘 다 허용된다. 상대 경로의 기준 위치는 System속성 "user.dir"로 얻을 수 있다.
                li 보다 많은 기능을 제공하는 java.nio.file 패키지가 존재한다.
            details
                h2.marker Field Detail
                ol
                    li public static final char separatorChar, String separator
                    |                 시스템 속성 "file.separator", UNIX : '/', Windows : '\\'
                    li public static final char pathSeparatorChar, String pathSeparator
                    |                 시스템 속성 "path.separator", UNIX : ':', Windows : ';'
            details
                h2.marker Constructor Detail
                ol
                    li public File(URI uri) Since 1.4 // 기타 생성자 생략
                    |                 file 스킴으로 시작하는 uri를 통해 객체를 초기화한다. uri 형식은 시스템에 따라 다를 수 있다.
            details
                h2.marker Method Detail
                ol
                    li String getParent(), File getParentFile() Since 1.2
                    li String getPath(), String getAbsolutePath(), File getAbsoluteFile() Since 1.2
                    li String getCanonicalPath() Since 1.1, File getCanonicalFile() Since 1.2
                    li
                        | boolean isAbsolute(), canRead(), exists(), isDirectory(), isHidden(), canExecute() 등
                    li long lastModified(), long length()
                    li
                        | boolean createNewFile(), mkdir(), delete(), renameTo(File dest), setLastModified(long time)
                    li boolean mkdirs() : 경로상 필요한 모든 디렉터리들 생성
                    li
                        | boolean setReadOnly(), setWritable(~), setReadable(~), setExecutable(~) Since 1.6
                    li String[] list(), list(FilenameFilter filter)
                    li
                        | File[] listFiles(), listFiles(FilenameFilter filter), listFiles(FileFilter filter) Since 1.2
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/FileFilterExample.java', lan: 'java'}) FileFilter
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/FilenameFilterExample.java', lan: 'java'}) FilenameFilter
                    li static File[] listRoots() Since 1.2
                    li long getTotalSpace(), getFreeSpace(), getUsableSpace() Since 1.6
                    li
                        | static File createTempFile(String prefix, String suffix, File directory) Since 1.2
                    li static File createTempFile(String prefix, String suffix) Since 1.2
                    |                 특정 디렉터리에 새로운 빈 파일을 만들어 반환한다. 이 메서드는 오직 임시 파일 작업을 위해 만들어졌으며, deleteOnExit()을 통해 자동으로 정리되어야 한다.
                    br
                    |                 prefix : 의미 있는 접두어, suffix : null이면 ".tmp"
                    li void deleteOnExit() Since 1.2
                    li int hashCode() : 추상 경로이름과 1234321 사이의 xor 연산
                    li URI toURI() Since 1.4, java.nio.file.Path toPath() Since 1.7
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/FileExample.java', lan: 'java'}) File
        details
            h2.marker final class FilePermission extends Permission implements Serializable Since 1.2
            ol
                li
                    | 파일 및 디렉터리에 관한 권한을 표현하는 클래스.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/io/FilePermissionExample.java', lan: 'java'})
                ul
                    li "/*"로 끝나는 경로는 해당 디렉터리 내부 모든 파일 및 디렉터리를 가리킨다. "*"는 현재 디렉터리 내부.
                    li "/-"로 끝나는 경로는 해당 디렉터리 내부 모든 파일 및 모든 서브디렉터리를 가리킨다. "-"는 현재 디렉터리 내부.
                    li "&lt;&lt;ALL FILES>>"로 표현된 경로는 임의 파일과 대응한다.
                    li 권한 리스트는 콤마로 구분한 문자열로 표현한다.
                    |                 가능한 키워드는 "read", "write", "execute"(Runtime.exec 메서드 호출 관련), "delete"(File.delete 메서드 호출 관련), "readlink"(java.nio.file.Files.readSymbolicLink 메서드와 관련)
                    li 주의 : 임의 파일에 대한 권한은 보안상 위험하다. 기본적으로 코드가 포함된 디렉터리는 읽기가 가능하므로 굳이 권한을 부여할 필요 없다.
            details
                h2.marker Constructor Detail
                ol
                    li public FilePermission(String path, String actions)
                    |                 시스템 속성 "jdk.io.permissionsUseCanonicalPath"가 매개변수 path의 처리에 대해 기술한다.
                    a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/io/FilePermission.html#%3Cinit%3E(java.lang.String,java.lang.String)') 자세히
            details
                h2.marker Method Detail
                ol
                    li boolean implies(Permission p) : 객체의 권한이 인자의 권한을 내포하는지 여부 반환
                    li String getActions()
                    li PermissionCollection newPermissionCollection()
                    |                 예. 컬렉션에 다음 두 가지 권한─("/tmp/-", "read"), ("/tmp/scratch/foo", "write")─들이 있을 때, 이에 대한 implies메서드에 권한 ("/tmp/scratch/foo", "read,write")을 넘겨준 결과는 true를 반환해야 한다.
        details
            h2.marker class RandomAccessFile implements DataOutput, DataInput, Closeable Since 1.0
            ol
                li 읽기/쓰기 가능한 임의 접근 파일. 읽기/쓰기의 기준 위치 file pointer가 존재.
                |             읽기로 예정된 바이트들을 모두 읽기 전에 EOF를 만나면 EOFException 발생.
            details
                h2.marker Constructor Detail
                ol
                    li RandomAccessFile(String name, String mode)
                    li RandomAccessFile(File file, String mode)
                    |                 mode » "r", "rw", "rws"(파일 내용 및 메타데이터 변경을 곧바로 반영), "rwd"(파일 내용 변경을 곧바로 반영)
            details
                h2.marker Method Detail
                ol
                    li final FileDescriptor getFD()
                    li final FileChannel getChannel() Since 1.4
                    li
                        | int read() : InputStream.read()와 동일
                        br
                        |                     int read(byte[] b)
                        br
                        |                     int read(byte[] b, int off, int len)
                        br
                        |                     final void readFully(byte[] b)
                        br
                        |                     readFully(byte[] b, int off, int len)
                    li long getFilePointer()
                    li void seek(long pos) : file pointer 설정
                    li long length()
                    li void setLength(long newLength) Since 1.2
                    |                 기존 크기 > newLength && getFilePointer() > newLength → 자르고, file pointer = newLength
                    br
                    |                 기존 크기 &lt; newLength → 확장. 확장한 영역의 데이터는 초기화되지 않는다.
        hr


    h1.marker java.lang Since 1.0
        details
            h2.marker interface Appendable Since 1.5
            ol
                li 유니코드 CharSequence 또는 char 값을 덧붙일 수 있는 객체를 표현한다.
                li Appendable append(CharSequence csq) + 2 오버로딩
        hr
        details
            h2.marker interface AutoCloseable Since 1.7
            |     자동으로 자원을 해제하는 객체를 표현한다. try-with-resources 블록에 사용되면 close()가 자동으로 호출된다. IO 작업이 없는 것들을 try-with-resources 블록에 이용하는 것은 불필요한 일이다.
            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/TryWithResources.java', lan: 'java'})
        hr
        details
            h2.marker interface Cloneable Since 1.0
            |     Object#clone()을 재정의했음을 나타내는 마커 인터페이스.
        hr
        details
            h2.marker interface Comparable&lt;T> Since 1.2
            ol
                li 자연스러운 순서로 클래스의 모든 객체를 정렬할 수 있음을 표현.
                li 이를 구현한 클래스 객체들의 List, array는 Collections.sort, Arrays.sort로 각각 정렬할 수 있다.
                li 이를 구현한 클래스 객체들은 Comparator 정의 없이 SortedMap, SortedSet의 키로 이용할 수 있다.
                li
                    | null은 객체가 아니므로 equals(null)이 false를 리턴하는 것과 달리 compareTo(null)은 NullPointerException을 내보내는 것이 바람직하다.
                li 다음 성질을 만족하도록 구현함이 권장된다. (e1.compareTo(e2) == 0) == e1.equals(e2)
                li int compareTo(T o)
                |         return this - o; // o보다 앞서면(작으면) 음수, 같으면 0, 뒤면(크면) 양수 반환.
        hr
        details
            h2.marker interface Iterable&lt;T> Since 1.5
            ol
                li
                    | 이를 구현한 클래스 객체는 enhanced for statement의 순회 대상이 될 수 있다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/lang/IterableExample.java', lan: 'java'})
                li Iterator&lt;T> iterator()
                |         구현한 클래스 인스턴스를 반환하면 된다.
                li default void forEach(Consumer&lt;? super T> action) Since 1.8
                |         순회하면서 action을 적용한다. 기본 구현 : for(T t : this) action.accept(t);
                li default Spliterator&lt;T> spliterator() Since 1.8
                |         기본 구현은 Sliterator의 모든 사항을 구현하지 않으므로 재정의하는 것이 더 좋은 성능을 보인다.
        hr
        details
            h2.marker
                | interface ProcessHandle extends Comparable
                processhandle  Since 9
            ol
                li
                    | native process들에 대한 제어 제공. 프로세스 생애 모니터링, 자식 프로세스 나열, 프로세스 정보 얻기, 프로세스 종료 등.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/lang/ProcessHandleExample.java', lan: 'java'})
                li 프로세스 ID는 OS가 할당한 것으로, 값의 범위는 OS에 의존적이다.
                li ProcessHandle 객체는 다음 팩터리 메서드로 반환된다.
                |         current(), of(long), children(), descendants(), parent(), allProcesses()
                br
                |         parent() » zombie 상태의 프로세스는 보통 parent가 없다.
                li SecurityManager의 RuntimePermission("manageProcess")만큼의 제어 권한을 갖는다.
                li ProcessHandle 객체들을 비교할 때는 equals, compareTo 메서드를 이용해야 한다.
            details
                h2.marker static interface ProcessHandle.Info Since 9
                ul
                    li Optional&lt;String> command()
                    |             실행가능한 경로 반환
                    li Optional&lt;String> commandLine()
                    |             command()와 arguments()의 결과를 공백으로 구분한 결과 반환
                    li Optional&lt;String[]> arguments()
                    |             프로세스의 인자 반환
                    li Optional&lt;Instant> startInstant()
                    |             프로세스의 시작 시각 반환
                    li Optional&lt;Duration> totalCpuDuration()
                    |             CPU 사용 시간 반환
                    li Optional&lt;String> user()
                    |             프로세스 유저 반환
            details
                h2.marker Method Detail
                ol
                    li ProcessHandle.Info info()
                    li boolean supportsNormalTermination()
                    |             destroy() 메서드가 정상적으로 프로세스를 종료하는지 여부. false면 프로세스를 강제로 즉시 종료함을 의미.
                    li CompletableFuture&lt;ProcessHandle> onExit()
                    |             onExit().get()을 호출하면 프로세스가 종료되는 것을 기다린다. supportsNormalTermination()이 false일 경우 onExit()에 등록한 후처리들이 진행되지 않을 수 있음.
                    li boolean destroy()
                    |             프로세스 종료에 시간이 걸릴 수 있으므로, isAlive()가 얼마간 true를 반환할 수 있다. 성공적으로 프로세스를 종료하면 true, 아니면 false를 반환한다.
                    li boolean destroyForcibly() : 강제 종료
                    li long pid()
                    li boolean isAlive()
                    |             PID가 유효하면 alive로 간주
        hr
        details
            h2.marker interface Readable Since 1.5
            ol
                li
                    | Readable은 문자들에 대한 소스다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/lang/ReadableExample.java', lan: 'java'})
                li int read(CharBuffer cb)
                |         문자들을 그대로 cb에 put()을 통해 저장한다. cb에 대한 어떠한 사전처리도 없다. 저장한 char 개수를 반환하며, 소스의 끝이면 -1을 반환한다.
        hr
        details
            h2.marker @FunctionalInterface interface Runnable Since 1.0
            |     Runnable은 한 스레드로서 실행되도록 구현돼야 한다. Thread의 run()만을 재정의할 때 사용한다.
            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/lang/RunnableExample.java', lan: 'java'})
        hr
        details
            h2.marker class SecurityManager Since 1.0
            ol
                li 보안 정책을 구현할 수 있는 클래스. 전형적인 확인 절차는 아래와 같다.
                |         SecurityManager security = System.getSecurityManager();
                br
                |         if (security != null) {
                br
                |         　　security.checkXXX(argument, . . . );
                br
                |         }
                li Object getSecurityContext() : 현재 실행 환경을 캡슐화한 객체 반환.
                li ThreadGroup getThreadGroup() Since 1.1 : 새로운 스레드를 생성할 수 있는 스레드그룹 반환
                li void checkPermission(Permission perm) Since 1.2 + checkXXX()
                li void checkPermission(Permission perm, Object context) Since 1.2
        hr
        details
            h2.marker final class Math Since 1.0, StrictMath Since 1.3
            details(open='')
                h2.marker Field Detail
                ol
                    li static double E, PI
            details(open='')
                h2.marker Method Detail
                ol
                    li 삼각함수, 쌍곡선 함수, 라디안-육십분법 변환, 지수-로그, 제곱/3제곱/제곱근/3제곱근/pow
                    li static double IEEEremainder(double f1, double f2)
                    li ceil, floor, rint, round
                    |             rint : round to even이 이용된다.
                    li static double random()
                    li abs, max, min, signum
                details
                    h2.marker 사칙연산
                    ul
                        li
                            | 오버플로우되면 예외 : addExact, substractExact, multiplyExact, incrementExact, decrementExact, negateExact, toIntExact
                        li
                            | static long multiplyFull(int x, int y) Since 9
                            br
                            |                     static long multiplyHigh(long x, long y) Since 9 : 상위 64개 비트를 반환
                        li floorDiv(x, y)
                        |                 floor(x/y)를 반환한다. Integer/Long.MIN_VALUE를 -1로 나누는 경우는 오버플로우가 발생하고 Integer/Long.MIN_VALUE를 반환한다.
                        li floorMod(x, y)
                        |                 x - (floorDiv(x, y) * y)를 반환한다. 부호는 y와 같다.
                        li static double fma(double a, double b, double c) Since 9 // + float : a * b + c
        hr
        details
            h2.marker 공유 변수 관련
            details
                h2.marker abstract class ClassValue&lt;T> Since 1.7
                ol
                    li 임의의 타입에 대하여, 필요할 때에 연산된 값을 가져오도록 지원. 해당 값은 해당 타입에 대해 일관성을 갖는다.
                    li protected abstract T computeValue(Class&lt;?> type)
                    |             해당 type에 대하여, 최초 get 메서드 호출 시 한 번만 호출되며, 이후 remove 메서드 호출이 없으면 더 이상 불리지 않는다.
                    li T get(Class&lt;?> type)
                    |             값이 계산되지 않은 상태에서 여러 스레드들이 경합을 벌일 경우, 임의 스레드의 결과값을 모두에 반환한다.
                    li void remove(Class&lt;?> type)
            details
                h2.marker class ThreadLocal&lt;T> Since 1.2
                ol
                    li 스레드 단위의 지역 변수를 제공한다. 호출 지점과 관계없이 한 스레드 내부에서 변수를 공유한다.
                    li protected T initialValue()
                    |             초기값이 설정되지 않은 상태에서 최초 get() 호출에 의해 불린다. remove() 호출 후의 get() 요청으로 다시 불린다.
                    li static &lt;S> ThreadLocal&lt;S> withInitial(Supplier&lt;? extends S> supplier) Since 1.8
                    |             supplier로 초기값이 설정되는 ThreadLocal 반환.
                    li T get()
                    li void set(T value)
                    li void remove() Since 1.5
            details
                h2.marker class InheritableThreadLocal&lt;T> extends ThreadLocal&lt;T> Since 1.2
                ol
                    li
                        | ThreadLocal에 상속성을 부여. 자식 스레드는 부모의 thread-local 변수들을 모두 상속받고 시작한다. childValue 메서드를 재정의함으로써 부모의 값과 다르게 설정할 수도 있다.
                    li protected T childValue(T parentValue)
        hr
        details
            h2.marker 타입 관련
            details
                h2.marker interface CharSequence Since 1.4
                ol
                    li
                        | 일련의 char 값들을 표현한다. equals(), hashCode()에 대한 규약이 없어서 두 CharSequence 객체를 비교하는 결과는 정의되어 있지 않으며, 따라서 set이나 map의 키로 이용하기에 부적절하다.
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/lang/CharSequenceExample.java', lan: 'java'})
                    li static int compare(CharSequence cs1, CharSequence cs2) Since 11
                    |             두 CharSequence를 사전순으로 비교한다.
                    li int length()
                    |             길이. 16비트 char의 개수.
                    li char charAt(int index)
                    li CharSequence subSequence(int start, end)
                    |             start부터 end-1까지. start == end일 경우 빈 CharSequence 객체가 반환된다.
                    li String toString()
                    li default IntStream chars() Since 1.8
                    |             char들을 int로 0패딩하여 스트림 생성. 두 char로 쪼개진 유니코드 보충 평면의 문자를 하나로 합치진 않는다.
                    li default IntStream codePoints() Since 1.8
                    |             유니코드 값들을 스트림으로 생성. 보충 평면의 문자는 Character.toCodePoint 메서드를 통해 하나의 int 값으로 형성.
            details
                h2.marker final class Boolean implements Serializable, Comparable&lt;Boolean> Since 1.0
                ol
                    li 원시 타입 boolean의 wrapper 클래스
                    li static final Boolean FALSE
                    li static final Boolean TRUE
                    li static Class&lt;Boolean> TYPE Since 1.1
                details
                    h2.marker Method Detail
                    ol
                        li static boolean parseBoolean(String s) Since 1.5
                        |                 s가 null이 아니고 대소문자 구분없이 "true"와 일치하면 true 반환.
                        li boolean booleanValue()
                        li static Boolean valueOf(String s) : valueOf(parseBoolean(s))와 동일 + 1 오버로딩
                        li static String toString(boolean b) Since 1.4 : "true" or "false"
                        li int hashCode() : true면 1231, false면 1237
                        li static int hashCode(boolean value) Since 1.8
                        li static boolean getBoolean(String name)
                        |                 name에 해당하는 system property가 존재하고, 대소문자 구분없이 "true"와 일치하면 true 반환
                        li int compareTo(Boolean b) Since 1.5
                        |                 TRUE.compareTo(FALSE) > 0, FALSE.compareTo(TRUE) &lt; 0
                        li static int compare(boolean x, boolean y) Since 1.7
                        li static boolean logicalAnd(boolean a, boolean b) Since 1.8 + or, xor
            details
                h2.marker abstract class Number implements Serializable Since 1.0
                ol
                    li 수에 관한 최상위 추상 wrapper 클래스
                    li abstract int intValue() + long, float, double
                    li byte byteValue() Since 1.1 : intValue()를 byte로 변환하여 반환
                    li short shortValue() Since 1.1 : intValue()를 short로 변환하여 반환
            details
                h2.marker final class Byte extends Number implements Comparable&lt;Byte> Since 1.1
                ol
                    li 기본 타입 byte에 대한 wrapper 클래스
                    li static final int BYTES Since 1.8 : 2의 보수 형태로 byte 값을 표현하기 위해 필요한 바이트 수
                    li static final byte MAX_VALUE : 2^7-1
                    li static final byte MIN_VALUE : -2^7
                    li static final int SIZE Since 1.5: 2의 보수 형태로 byte 값을 표현하기 위해 필요한 비트 수
                    li static final Class&lt;Byte> TYPE
                details
                    h2.marker Method Detail
                    ol
                        li static String toString(byte b) : 10진수 표현으로 반환
                        li static Byte valueOf(byte b) Since 1.5
                        li static byte parseByte(String s, int radix) + 1 오버로딩
                        |                 예외 : s가 null이거나 길이가 0일 때. s에 radix진수가 아닌 문자가 포함될 때(단, s가 2글자 이상일 때 첫 '-', '+'는 가능). radix가 [Character.MIN_RADIX, Character.MAX_RADIX] 범위를 벗어날 때, 값이 byte를 벗어날 때.
                        li static Byte valueOf(String s, int radix) + 1 오버로딩
                        li static Byte decode(String nm)
                        |                 다음 문법으로 표현된 10진수, 16진수, 8진수를 parseByte()를 이용해 디코딩한다. 공백을 허용하지 않는다.
                        ul
                            li (Sign?)(10진수)
                            li (Sign?)(0x | 0X | #)(16진수)
                            li (Sign?)0(8진수)
                            li Sign: '-', '+'
                        li static int hashCode(byte value) Since 1.8
                        li int compareTo(Byte anotherByte) Since 1.2 : this - anotherByte
                        li static int compare(byte x, byte y) Since 1.7
                        li static int compareUnsigned(byte x, byte y) Since 9
                        li static int toUnsignedInt(byte x) Since 1.8
                        li static long toUnsignedLong(byte x) Since 1.8
            details
                h2.marker final class Character implements Serializable, Comparable&lt;Character> Since 1.0
                ol
                    li 기본타입 char에 대한 wrapper 클래스. 추가적으로 문자 집합(소문자, 숫자 등) 정의, 변환 기능을 갖는다.
                    li 유니코드 표준 8.0.0을 따른다.(JDK 9 기준)
                    ul
                        li 16비트 고정폭으로 값을 표현하며, 유효한 범위는 U+0000 부터 U+10FFFF까지(= Unicode scalar value).
                        li
                            | [U+0000, U+FFFF] == Basic Multilingual Plane(BMP), (U+FFFF, ~) == supplementary characters
                        li 자바 플랫폼은 보충 평면의 문자들은 2개의 char의 쌍으로 표현한다.
                        li 하위 21개 비트를 이용하여 int 하나로 모든 유니코드 code point를 표현할 수 있다.
                    li int를 받는 메서드는 모든 유니코드를 처리할 수 있지만, char만을 받는 메서드는 보충 평면 문자를 처리하지 못한다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/lang/CharacterExample.java', lan: 'java'})
                details
                    h2.marker static class Character.Subset Since 1.2
                    ul
                        li
                            | 이 클래스의 객체는 유니코드 문자 집합을 표현한다. Character 클래스 내부에서 정의한 문자 집합은 Character.UnicodeBlock뿐이다.
                        li
                            | final boolean equals(Object obj) : 오직 같은 객체일 때만 true를 반환함으로써 모든 부분집합들이 동일함을 보장한다.
                        li
                            | final int hashCode() : 기본 정의된 Object.hashCode()를 이용한다. final로 정의하여 equals()와 일관성을 유지한다.
                        li final String toString() : name 반환
                details
                    h2.marker static final class Character.UnicodeBlock extends Character.Subset Since 1.2
                    ul
                        li 유니코드 문자 블록. 각 문자들은 최대 하나의 유니코드 블록에 포함된다.
                        li static Character.UnicodeBlock ARABIC, GREEK, HANGUL 등
                        li static Character.UnicodeBlock of(char c) : c가 속한 유니코드 블록 반환
                        li static Character.UnicodeBlock of(int codePoint) Since 1.5
                        li static final Character.UnicodeBlock forName(String blockName) Since 1.5
                        |                 블록 이름이 변경될 경우, 변경 전/후 이름 둘 다 사용할 수 있다.
                details
                    h2.marker static enum Character.UnicodeScript Since 1.7
                    ul
                        li 유니코드 표준 스크립트 이름 정의를 표현. 모든 문자는 하나의 스크립트(각 언어|INHERITED|COMMON|UNKNOWN)에 할당된다.
                        li ARABIC, GREEK, HANGUL 등
                        li static Character.UnicodeScript valueOf(String name)
                        li static Character.UnicodeScript of(int codePoint)
                        li static final Character.UnicodeScript forName(String scriptName)
                details
                    h2.marker Field Detail
                    ol
                        li static final int MIN_RADIX : 문자열-숫자 간 변환을 지원하는 최소 radix
                        li static final int MAX_RADIX : 문자열-숫자 간 변환을 지원하는 최대 radix
                        li static final char MIN_VALUE Since 1.0.2 : '\u0000'
                        li static final char MAX_VALUE Since 1.0.2 : '\uFFFF'
                        li static final Class&lt;Character> TYPE Since 1.1
                        li static final byte MODIFIER_LETTER, SPACE_SEPARATOR, MATH_SYMBOL 등
                        li static final char MIN_HIGH_SURROGATE Since 1.5 : '\uD800'
                        li static final char MAX_HIGH_SURROGATE Since 1.5 : '\uDBFF'
                        li static final char MIN_LOW_SURROGATE Since 1.5 : '\uDC00'
                        li static final char MAX_LOW_SURROGATE Since 1.5 : '\uDFFF'
                        li static final int MIN_SUPPLEMENTARY_CODE_POINT Since 1.5 : U+10000
                        li static final int MIN_CODE_POINT Since 1.5 : U+0000
                        li static final int MAX_CODE_POINT Since 1.5 : U+10FFFF
                        li static final int SIZE Since 1.5 : 표현에 필요한 비트 수, 16
                        li static final int BYTES Since 1.8 : 표현에 필요한 바이트 수
                details
                    h2.marker Method Detail
                    ol
                        li static Character valueOf(char c) Since 1.5
                        li char charValue()
                        li static int hashCode(char value) Since 1.8 == (int)value
                        li static String toString(int codePoint) Since 11 + 1 오버로딩
                        li static boolean isValidCodePoint(int codePoint) Since 1.5
                        |                 + isBmpCodePoint, isSupplementaryCodePoint, isHighSurrogate, isLowSurrogate, isSurrogate, isSurrogatePair, isLowerCase, isUpperCase, isTitleCase
                        li static boolean isDigit(char ch) + 1 오버로딩 : getType(ch) == DECIMAL_DIGIT_NUMBER
                        ul
                            li '\u0030' through '\u0039', ISO-LATIN-1 digits ('0' through '9')
                            li '\u0660' through '\u0669', Arabic-Indic digits
                            li '\u06F0' through '\u06F9', Extended Arabic-Indic digits
                            li '\u0966' through '\u096F', Devanagari digits
                            li '\uFF10' through '\uFF19', Fullwidth digits 등
                        li static boolean isDefined(int codePoint) Since 1.5 + 1 오버로딩 : 유니코드에 정의되었는지 여부
                        |                 + isLetter(char ch) : getType(ch) == *_LETTER, isLetterOrDigit
                        li static boolean isAlphabetic(int codePoint) Since 1.7
                        |                 UPPERCASE_LETTER, LOWERCASE_LETTER, TITLECASE_LETTER, MODIFIER_LETTER, OTHER_LETTER, LETTER_NUMBER, 및 기타 알파벳 문자인지 여부
                        li
                            | static boolean isIdeographic(int codePoint) Since 1.7 : CJKV(중국어, 일본어, 한국어, 베트남어) 여부
                        li static boolean isJavaIdentifierStart(char ch) Since 1.1 + 1 오버로딩 : 자바 식별자 선두문자
                        |                 + isJavaIdentifierPart, isUnicodeIdentifierStart, isUnicodeIdentifierPart, isIdentifierIgnorable
                        li
                            | static boolean isSpaceChar(char ch) Since 1.1 + 1 오버로딩 : getType(ch) == *_SEPARATOR
                        li static boolean isWhitespace(char ch) Since 1.1 + 1 오버로딩
                        |                 공백 문자(단, non-breaking space('\u00A0', '\u2007', '\u202F') 제외), '\t', '\n', 'u000B', '\f', '\r', '\u001C', '\u001D', '\u001E', '\u001F'
                        li static boolean isISOControl(char ch) Since 1.1 + 1 오버로딩
                        |                 '\u0000' ~ '\u001F', '\u007F' ~ '\u009F'
                        li static int charCount(int codePoint) Since 1.5 : 표현에 필요한 char 수(1 or 2)
                        li static int toCodePoint(char high, char low) Since 1.5
                        li static int codePointAt(CharSequence seq, int index) Since 1.5 + 2 오버로딩
                        |                 + codePointBefore, highSurrogate, lowSurrogate
                        li static char[] toChars(int codePoint) Since 1.5 + 1 오버로딩
                        li
                            | static int codePointCount(CharSequence seq, int beginIndex, int endIndex) Since 1.5 + 1 오버로딩
                        |                 [beginIndex, endIndex) 사이의 유니코드 문자 수 반환
                        li
                            | static int offsetByCodePoints(CharSequence seq, int index, int codePointOffset) Since 1.5 + 1 오버로딩
                        |                 지정된 index로부터 offset 개수만큼 유니코드를 건너뛴 위치. +일 경우 index 포함, -인 경우 index 미포함(예시 코드 참고)
                        li
                            | static int toLowerCase(int codePoint) Since 1.5 + 1 오버로딩 + toUpperCase, toTitleCase
                        |                 isLowerCase(toLowerCase(x))가 항상 true는 아니다. String.toLowerCase()가 사용 언어에 따른 효과적인 변환을 수행한다.
                        li static int digit(int codePoint, int radix) + 1 오버로딩: 예제 참조
                        li static int getNumericValue(char ch) Since 1.1
                        |                 로마 숫자, a~z 등을 10진법 수로 반환한다. 음수일 경우 -2, 숫자가 아닐 경우 -1 반환.
                        li static char forDigit(int digit, int radix)
                        li static int getNumericValue(int codePoint) Since 1.5
                        li static int getType(int codePoint) Since 1.5 + 1 오버로딩
                        li static byte getDirectionality(char ch) Since 1.4
                        |                 문자 표시 순서를 반환한다. DIRECTIONALITY_UNDEFINED, DIRECTIONALITY_LEFT_TO_RIGHT 등
                        li static byte getDirectionality(int codePoint) Since 1.5
                        li static boolean isMirrored(char ch) Since 1.4 + 1 오버로딩 : 좌우 대칭되는 문자가 존재하는지 여부
                        li static int compare(char x, char y) Since 1.7 : x - y
                        li static char reverseBytes(char ch) Since 1.5
                        li static String getName(int codePoint) Since 1.7
                        |                 이름 반환 : Character.UnicodeBlock.of(codePoint).toString().replace('_', ' ') + " " + Integer.toHexString(codePoint).toUpperCase(Locale.ROOT);
                        br
                        |                 정의되어 있지 않으면 null 반환
                        li static int codePointOf(String name) Since 9 : 정의되어 있지 않으면 예외
            details
                h2.marker
                    | final class Double extends Number implements Comparable&lt;Double>, Constable, ConstantDesc Since 1.0
                details
                    h2.marker Field Detail
                    ol
                        li
                            | public static final double POSITIVE_INFINITY : == Double.longBitsToDouble(0x7ff0000000000000L)
                        li
                            | public static final double NEGATIVE_INFINITY : == Double.longBitsToDouble(0xfff0000000000000L)
                        li public static final double NaN : == Double.longBitsToDouble(0x7ff8000000000000L)
                        li
                            | public static final double MAX_VALUE : == 0x1.fffffffffffffP+1023 == Double.longBitsToDouble(0x7fefffffffffffffL)
                        li public static final double MIN_NORMAL Since 1.6
                        |                 진수가 1 이상인 가장 작은 양수 표현. == 0x1.0p-1022 == Double.longBitsToDouble(0x0010000000000000L)
                        li public static final double MIN_VALUE
                        |                 가장 작은 양수 표현 == 0x0.0000000000001P-1022 == Double.longBitsToDouble(0x1L)
                        li
                            | public static final int MAX_EXPONENT Since 1.6 : == Math.getExponent(Double.MAX_VALUE)
                        li
                            | public static final int MIN_EXPONENT Since 1.6 : == Math.getExponent(Double.MIN_NORMAL)
                        li public static final int SIZE Since 1.5 : 표현에 필요한 비트 수
                        li public static final int BYTES Since 1.8 : 표현에 필요한 바이트 수
                        li public static final Class&lt;Double> TYPE Since 1.1
                details
                    h2.marker Method Detail
                    ol
                        li static String toString(double d)
                        li static String toHexString(double d) Since 1.5
                        li static Double valueOf(String s) + 1 오버로딩 + parseDouble
                        li static boolean isNaN(double v) + isInfinite, isFinite + non-static methods
                        li static int hashCode(double value) Since 1.8 + non-static method
                        |                 (int)(v^(v>>>32)), v = Double.doubleToLongBits(this.doubleValue())
                        li static long doubleToLongBits(double value)
                        |                 double 표현 그대로 long으로 전환. 63번 비트는 부호, 62-52번 비트는 지수, 51-0번 비트는 진수
                        li static long doubleToRawLongBits(double value) Since 1.3
                        |                 NaN의 경우 각각의 NaN에 대응하는 값으로 반환.
                        li static double longBitsToDouble(long bits)
                        |                 range 0x7ff0000000000001L through 0x7fffffffffffffffL or in the range 0xfff0000000000001L through 0xffffffffffffffffL, the result is a NaN
                        li int compareTo(Double anotherDouble) Since 1.2
                        |                 Double.NaN은 Double.POSITIVE_INFINITY보다 크다고 간주, 0.0d는 -0.0d보다 크다고 간주
                        li static int compare(double d1, double d2) Since 1.4
                        li static double sum(double a, double b) Since 1.8 + max, min
            details
                h2.marker final class Integer extends Number implements Comparable&lt;Integer> Since 1.0
                details
                    h2.marker Field Detail
                    ol
                        li @Native public static final int MIN_VALUE : -2^31
                        li @Native public static final int MAX_VALUE : 2^31-1
                        li public static final Class&lt;Integer> TYPE Since 1.1
                        li @Native public static final int SIZE Since 1.5 : 표현하는데 필요한 비트 수
                        li public static final int BYTES Since 1.8 : 표현하는데 필요한 바이트 수
                details
                    h2.marker Method Detail
                    ol
                        li
                            | static String toString(int i, int radix) + toUnsignedString, toBinaryString, toOctalString, toHexString
                        |                 radix in [Character.MIN_RADIX, Character.MAX_RADIX]
                        li
                            | static int parseInt(CharSequence s, int beginIndex, int endIndex, int radix) Since 9 + 2 오버로딩 + parseUnsignedInt, valueOf
                        |                 [beginIndex, endIndex - 1]. 파싱 중 CharSequence 변경에 대한 조치를 하지 않음
                        li static Integer decode(String nm)
                        |                 문자열을 정수로 파싱하는 것은 parseInt와 같으나, nm의 포맷(접두 0x, 0X, 0, #...)에 따라 radix를 자동 조정한다.
                        li static int sum(int a, int b) Since 1.8 + max, min
                    details
                        h2.marker System Property 관련
                        ol
                            li static Integer getInteger(String nm, int val) + 2 오버로딩
                            |                     nm : property name, val : 기본값
                            br
                            |                     속성 값은 decode 메서드를 통해 변환된다
                    details
                        h2.marker unsigned 연산
                        ol
                            li static int compareUnsigned(int x, int y) Since 1.8
                            li static long toUnsignedLong(int x) Since 1.8
                            li static int divideUnsigned(int dividend, int divisor) Since 1.8
                            li static int remainderUnsigned(int dividend, int divisor) Since 1.8
                    details
                        h2.marker bit 관련
                        ol
                            li static int highestOneBit(int i) Since 1.5
                            li static int lowestOneBit(int i) Since 1.5
                            li static int numberOfLeadingZeros(int i) Since 1.5
                            li static int numberOfTrailingZeros(int i) Since 1.5
                            li static int bitCount(int i) Since 1.5
                            li static int rotateLeft(int i, int distance) Since 1.5
                            li static int rotateRight(int i, int distance) Since 1.5
                            li static int reverse(int i) Since 1.5
                            li static int reverseBytes(int i) Since 1.5 : 바이트 단위로 뒤집기
                            li static int signum(int i) Since 1.5 : -1, 0, 1
            details
                h2.marker
                    | final class String implements Serializable, Comparable&lt;String>, CharSequence, Constable, ConstantDesc Since 1.0
                ol
                    li 유니코드 보충 평면 문자는 surrogate pairs로써 2자리를 차지한다.
                    li 로캐일을 고려한 문자열 비교는 Collator 클래스를 이용.
                    li static final Comparator&lt;String> CASE_INSENSITIVE_ORDER Since 1.2
                    |             대소문자 구분없는 비교자. 직렬화 가능.
                details
                    h2.marker Constructor Detail
                    ol
                        li public String()
                        li public String(String original)
                        li public String(char[] value) + 1 오버로딩
                        li public String(int[] codePoints, int offset, int count) Since 1.5
                        li
                            | public String(byte[] bytes, int offset, int length, Charset charset) Since 1.6 + 5 오버로딩
                        li public String(StringBuffer buffer)
                        li public String(StringBuilder builder) Since 1.5
                details
                    h2.marker Method Detail
                    ol
                        li boolean isEmpty() Since 1.6
                        li int codePointAt(int index) Since 1.5 + codePointBefore
                        li int codePointCount(int beginIndex, int endIndex)
                        li void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
                        li byte[] getBytes(Charset charset) Since 1.6 + 2 오버로딩
                        |                 지정되지 않은 경우, 플랫폼 기본 문자셋을 이용한다. 기본 문자셋을 변경하려면 JVM 옵션을 조정하면 된다.
                        li boolean contentEquals(StringBuffer sb) Since 1.4 + 1 오버로딩
                        li boolean equalsIgnoreCase(String anotherString)
                        li int compareToIgnoreCase(String str) Since 1.2
                        li boolean regionMatches(int tooffset, String other, int ooffset, int len) + 1 오버로딩
                        |                 부분 문자열이 일치하는지 여부 반환. t(his's)offset, o(ther's)offset
                        li boolean startsWith(String prefix, int toffset) + 1 오버로딩
                        li boolean endsWith(String suffix)
                        li int indexOf(int ch, int fromIndex) + 3 오버로딩 + lastIndexOf
                        li String substring(int beginIndex, int endIndex) + 1 오버로딩
                        li String concat(String str)
                        li String replace(char oldChar, char newChar)
                        li boolean matches(String regex) Since 1.4 == Pattern.matches(regex, str)
                        li boolean contains(CharSequence s) Since 1.5
                        li String replaceAll(String regex, String replacement) Since 1.4 + replaceFirst
                        li String replace(CharSequence target, CharSequence replacement) Since 1.5
                        li String[] split(String regex, int limit) Since 1.4
                        |                 limit이 음수인 경우, 제한 없이 분리. 0인 경우 빈 문자열로 끝나지 않음.
                        li String[] split(String regex) Since 1.4 : split(regex, 0)
                        li
                            | static String join(CharSequence delimiter, CharSequence... elements) Since 1.8 + 1 오버로딩
                        li String toLowerCase(Locale locale) Since 1.1 + 1 오버로딩 + toUpperCase
                        li String trim() : 시작과 끝의 공백(&lt;= U+0020) 제거
                        li String strip() Since 11 + stripLeading, stripTrailing : 공백 제거
                        li boolean isBlank() Since 11 : 비거나 공백 문자로만 이루어졌는지 여부
                        li Stream&lt;String> lines() Since 11 : 줄 끝(\n, \r, \r\n) 기준으로 분리
                        li String indent(int n) Since 12
                        |                 각 줄이 n개의 공백으로 시작하도록 조정하고, 줄 끝을 \n로 정규화한다. n이 음수인 경우, 최대 n개의 앞선 공백을 제거한다.
                        li &lt;R> R transform(Function&lt;? super String, ? extends R> f) Since 12
                        li IntStream codePoints() Since 9 + chars
                        li char[] toCharArray()
                        li static String format(String format, Object... args) Since 1.5 + 1 오버로딩
                        li static String valueOf(Object obj) : obj.toString() + 8 오버로딩
                        li String intern() : 문자열 객체에 대한 내부 표현 반환
                        li String repeat(int count) Since 11
            details
                h2.marker
                    | final class StringBuffer implements Serializable, Comparable&lt;StringBuffer>, CharSequence Since 1.0
                ol
                    li 스레드-안전한 변경 가능한 문자열.
                details
                    h2.marker Constructor Detail
                    ol
                        li public StringBuffer()
                        li public StringBuffer(int capacity)
                        li public StringBuffer(String str)
                        li public StringBuffer(CharSequence seq) Since 1.5
                details
                    h2.marker Method Detail
                    ol
                        li void trimToSize() Since 1.5
                        |                 버퍼 크기를 줄여 문자열 크기에 맞춘다
                        li void setLength(int newLength)
                        |                 새로운 크기의 문자열에 기존 문자열을 복사. 남는 부분은 '\u0000'(null)로 채워진다.
                        li void ensureCapacity(int minimumCapacity)
                        li StringBuffer reverse() Since 1.0.2
                        li 추가 / 삽입 » append, insert
                        li 삭제 / 변경 » delete, set~, replace
                        li 기타 String과 유사한 메서드 생략
            details
                h2.marker
                    | final class StringBuilder implements Serializable, Comparable&lt;StringBuilder>, CharSequence Since 1.5
                |         StringBuffer의 비동기화 버전.
            details
                h2.marker
                    | abstract class Enum&lt;E extends Enum&lt;E>> implements Constable, Comparable&lt;E>, Serializable Since 1.5
                ol
                    li 모든 공용체의 베이스. Enum을 집합이나 맵의 키로 이용하면 효율적인 구현을 얻을 수 있다.
                details
                    h2.marker
                        | static final class Enum.EnumDesc&lt;E extends Enum&lt;E>> extends DynamicConstantDesc&lt;E> Since 12
                    |             static &lt;E extends Enum&lt;E>> Enum.EnumDesc&lt;E> of(ClassDesc enumClass, String constantName) Since 12
                details
                    h2.marker Method Detail
                    ol
                        li final String name()
                        li final int ordinal()
                        li final Class&lt;E> getDeclaringClass()
                        li static &lt;T extends Enum&lt;T>> T valueOf(Class&lt;T> enumType, String name) Since 1.5
            details
                h2.marker class Throwable implements Serializable Since 1.0
                ol
                    li 모든 에러와 예외의 조상.
                details
                    h2.marker Constructor Detail
                    ol
                        li public Throwable()
                        li public Throwable(String message)
                        li public Throwable(String message, Throwable cause) Since 1.4
                        li public Throwable(Throwable cause) Since 1.4
                        li
                            | protected Throwable(String message, THrowable cause, boolean enableSuppression, boolean writableStackTrace) Since 1.7
                details
                    h2.marker Method Detail
                    ol
                        li String getMessage() + getLocalizedMessage
                        li Throwable getCause() Since 1.4
                        li Throwable initCause(Throwable cause) Since 1.4
                        li void printStackTrace(PrintStream s) Since 1.1 + 1 오버로딩
                        li StackTraceElement[] getStackTrace() Since 1.4
                        li void setStackTrace(StackTraceElement[] stackTrace) Since 1.4
                        li final void addSuppressed(Throwable exception) Since 1.7
                        li final Throwable[] getSuppressed() Since 1.7
        hr
        details
            h2.marker 클래스 관련
            details
                h2.marker
                    | final class Class&lt;T> implements Serializable, GenericDeclaration, Type, AnnotatedElement, TypeDescriptor.OfField&lt;Class&lt;?>>, Constable Since 1.0
                details
                    h2.marker Method Detail
                    ol
                        li ClassLoader getClassLoader()
                        li InputStream getResourceAsStream(String name) Since 1.1 // ClassLoader 관련
                        li URL getResource(String name) Since 1.1
                        li T cast(Object obj) Since 1.5 » obj를 호출한 Class 객체와 같은 타입으로 변환
                        li &lt;U> Class&lt;? extends U> asSubclass(Class&lt;U> clazz) Since 1.5
                        |                 호출한 Class 객체의 타입을 변환한다. 반환되는 변수는 현재 객체를 참조한다.
                        br
                        |                 U : 변환하고자 하는 타입, clazz : 변환하고자 하는 타입 Class 객체
                    details
                        h2.marker Nest
                        ol
                            li Nest는 같은 런타임 패키지 안의, private member에 접근 가능한 클래스와 인터페이스의 집합.
                            |                     Nest에 속한 클래스, 인터페이스를 nestmate라 부르고, 하나의 nest에서 하나의 nestmate는 host 역할을 하고 나머지 nestmate 목록을 갖는다.
                            li Class&lt;?> getNestHost() Since 11
                            li Class&lt;?>[] getNestMembers() Since 11
                    details
                        h2.marker 클래스 이름 관련
                        ol
                            li
                                | String toString()
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/lang/ClassExample.java', lan: 'java'})
                            li String toGenericString() Since 1.8 : 접근한정자 및 타입 포함하여 반환
                            li String getName()
                            |                     배열의 경우 차원마다 '['를 붙이며, 배열 원소 타입을 아래와 같이 인코딩한다.
                            br
                            |                     boolean : Z, byte : B, char : C, class or interface : L
                            i className
                            | ;, double : D, float : F, int : I, long : J, short : S
                            li String getSimpleName() Since 1.5
                            |                     익명 클래스면 빈 문자열 반환
                            li String getCanonicalName() Since 1.5
                            |                     Local class, 익명 클래스, 또는 이들의 배열은 canonical name이 없어 null을 반환한다.
                            li static Class&lt;?> forName(String className) » 로드된 클래스는 초기화가 진행된다.
                            li
                                | static Class&lt;?> forName(String name, boolean initialize, ClassLoader loader) Since 1.2
                            li static Class&lt;?> forName(Module module, String name) Since 9
                            |                     주어진 모듈에서
                            a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://docs.oracle.com/javase/9/docs/api/java/lang/ClassLoader.html#name') binary name
                            | 을 가진 클래스를 반환한다.
                            br
                            |                     클래스를 초기화하지 않으며, 클래스를 찾을 수 없으면 null을 반환한다.
                    details
                        h2.marker is~ Methods
                        ol
                            li boolean isInstance(Object obj) Since 1.1
                            |                     instanceof 연산자의 동적인 형태라고 보면 된다. 원시타입 클래스 객체는 false만을 반환한다.
                            li boolean isAssignableFrom(Class&lt;?> cls) Since 1.1
                            |                     cls 타입 객체를 현재 클래스의 참조 변수로 참조할 수 있는지 여부 반환.
                            li
                                | boolean isInterface() + isArray, isPrimitive, isAnnotation, isEnum, isAnonymousClass, isLocalClass, isMemberClass
                            |                     wrapper 클래스는 원시타입이 아님에 유의 : Integer.class != Integer.TYPE, Integer.TYPE == int.class
                            li boolean isSynthetic() Since 1.5
                            |                     Synthetic class : 명시적/암시적으로 생성자가 정의되지 않은 채 생성된 클래스
                            li
                                | boolean isAnnotationPresent(Class&lt;? extends Annotation> annotationClass) Since 1.5
                            li boolean isNestmateOf(Class&lt;?> c) Since 11
                    details
                        h2.marker 리플렉션 관련
                        ol
                            li Module getModule() Since 9
                            li Package getPackage()
                            li String getPackageName() Since 9
                            |                     익명 패키지면 빈 문자열 반환. 배열 클래스의 경우 원소 타입이 속한 패키지 이름 반환. 원시 타입 또는 void의 경우 "java.lang" 반환.
                            li TypeVariable&lt;Class&lt;T>>[] getTypeParameters() Since 1.5
                            li Class&lt;? super T> getSuperclass() + getGenericSuperclass
                            li Class&lt;?>[] getInterfaces() : 구현한/상속한 인터페이스 Class 객체 배열 반환
                            li Type[] getGenericInterfaces() Since 1.5
                            li Class&lt;?> getComponentType() Since 1.1
                            |                     배열 원소 타입 클래스 객체 반환. 배열이 아닌 경우 null 반환
                            li int getModifiers() Since 1.1 : java.lang.reflect.Modifier
                            li Object[] getSigners() Since 1.1 : 없으면 null 반환
                            li
                                | Method getEnclosingMethod() Since 1.5 + getEnclosingConstructor, getDeclaringClass, getEnclosingClass
                            |                     이 클래스가 메서드 내부에서 정의된 경우, 해당 메서드를 반환한다.
                            li Class&lt;?>[] getClasses() Since 1.1
                            |                     public 멤버로 정의된 클래스, 인터페이스 Class 객체 배열 반환.
                            li Field[] getFields() Since 1.1 + getMethods, getConstructors
                            li Field getField(String name) Since 1.1 + getMethod, getConstructor
                            li
                                | Class&lt;?>[] getDeclaredClasses() Since 1.1 + getDeclaredFields, getDeclaredMethods, getDeclaredConstructors
                            |                     상속된 것을 제외한, 호출하는 클래스 내부에 정의된 public, protected, default, private 클래스와 인터페이스들을 반환한다.
                            li
                                | Field getDeclaredField(String name) Since 1.1 + getDeclaredMethod, getDeclaredConstructor
                            li T[] getEnumConstants() Since 1.5
                            li AnnotatedType getAnnotatedSuperclass() Since 1.8
                            li AnnotatedType[] getAnnotatedInterfaces() Since 1.8
            details
                h2.marker abstract class ClassLoader extends Object Since 1.0
                ol
                    li 전형적으로, 로드할 클래스 이름을 파일명으로 변환하여 ".class"파일을 읽어온다.
                    li 모든 Class 객체들은 ClassLoader에 대한 참조를 갖고 있다.
                    li 배열의 경우 런타임에 Class 객체가 생성되며, 이때 Class.getClassLoader()는 원소의 것과 동일하다.
                    li 클래스를 로드하는 것 외에, 자원(.class 파일, 구성 파일, 이미지 등)을 배치하는 책임도 진다.
                    li
                        | Delegation model : ClassLoader 객체들은 각기 parent class loader를 갖는다. 클래스나 자원을 찾기 전에 parent를 먼저 조사하게 된다.
                    li
                        | 동시 로딩을 지원하는 parallel capable class loader들은 클래스 초기화 시 registerAsParallelCapable()를 통해 등록해야 한다. ClassLoader 클래스는 기본적으로 등록되나, 서브클래스들도 자신을 등록해야 한다.
                    li
                        | 계층구조가 약한 delegation model의 경우 클래스 로더들이 parallel capable하지 않으면 deadlock 발생 가능성이 있다.
                    li Run-time Built-in Class Loaders
                    ul
                        li Bootstrap class loader : JVM 내장 클래스 로더. 보통 null이며, parent가 없다.
                        li Platform class loader : Java SE APIs, JDK-specific run-time classes
                        li
                            | System class loader, a.k.a Application class loader : Used to define classes on the application class path, module path, and JDK-specific tools
                    li
                        | 파일이 아닌 네트워크 같은 다른 소스로부터 클래스를 로드할 경우, defineClass()를 통해 Class 객체를 얻고 Constructor.newInstance()를 통해 클래스 객체를 생성하면 된다.
                    li 네트워크 클래스 로더는 findClass(), loadClassData() 메서드를 반드시 작성해야 한다.
                    |             public Class findClass(String name) {
                    br
                    |             　　byte[] b = loadClassData(name);
                    br
                    |             　　return defineClass(name, b, 0, b.length);
                    br
                    |             }
                    br
                    |             private byte[] loadClassData(String name) { /**/ }
                    li Binary names
                    |             ClassLoader 메서드에 전달하는 String 타입 클래스 이름은 아래와 같은 형식을 따라야 한다.
                    br
                    |             "java.lang.String", "javax.swing.JSpinner$DefaultEditor", "java.security.KeyStore$Builder$FileBuilder$1", "java.net.URLClassLoader$3$1"
                details
                    h2.marker Constructor Detail
                    ol
                        li protected ClassLoader(String name, ClassLoader parent) Since 9
                        |                 parent가 null일 경우, 해당 클래스 로더가 모든 플랫폼 클래스를 볼 수 있다는 보장은 없다. name : class loader's name; or null if not named
                        li protected ClassLoader(ClassLoader parent) Since 1.2
                        li protected ClassLoader() == ClassLoader(getSystemClassLoader())
                details
                    h2.marker Method Detail
                    ol
                        li String getName() Since 9 : 클래스 로더 이름 반환. 없으면 null
                        li Class&lt;?> loadClass(String name) : loadClass(name, false)
                        li protected Class&lt;?> loadClass(String name, boolean resolve)
                        ol
                            li findLoadedClass(String)로 이미 로드됐나 확인
                            li 없으면 : parent 혹은 VM의 클래스 로더의 loadClass를 호출
                            li 없으면 : findClass(String) 호출
                            li 위를 통해 클래스를 찾았고, resolve가 true면 resolveClass(Class) 호출.
                            li ClassLoader의 서브클래스들은 이 메서드가 아닌 findClass(String)을 재정의하면 된다.
                            li 재정의되지 않은 이상, getClassLoadingLock()을 통해 메서드는 동기화된다.
                        li protected Object getClassLoadingLock(String className) Since 1.7
                        li protected Class&lt;?> findClass(String name) Since 1.2 + 1 오버로딩
                        li protected final Class&lt;?> findSystemClass(String name) : 시스템 클래스 로더에 의해 호출
                        li protected final Class&lt;?> findLoadedClass(String name) Since 1.1 : 없으면 null
                        li
                            | protected final Class&lt;?> defineClass(String name, byte[] b, int off, int len) Since 1.1 + 2 오버로딩
                        |                 지정되지 않은 경우, 기본 ProtectionDomain을 새 클래스에 할당한다. 기본 ProtectionDomain은 Policy.getPolicy().getPermissions(new CodeSource(null, null))과 같은 권한을 부여받는다. 기본 ProtectionDomain은 첫 호출시 생성되고 재사용된다.
                        li protected final void resolveClass(Class&lt;?> c) : 클래스를 링크한다.
                        li protected final void setSigners(Class&lt;?> c, Object[] signers) Since 1.1
                        |                 상기한 메서드들을 통한 클래스 정의시 SecurityException이 발생하는 경우와 관계 있다.
                        |                 한 패키지 내부의 클래스들은 동일한 certificate 집합을 가져야 한다.
                        |                 정의하는 클래스가 어떤 패키지에 추가될 때, 패키지의 certificate 집합과 비교하여 서로 다른 경우 예외가 발생한다.
                        |                 Certificate 집합은 ProtectionDomain의 CodeSource로부터 얻을 수 있다.
                        li protected static boolean registerAsParallelCapable() Since 1.7
                        |                 호출자의 인스턴스가 만들어지지 않았고, 호출자의 모든 수퍼클래스들이 parallel capable로 등록된 경우
                        li final boolean isRegisteredAsParallelCapable() Since 9
                        li final ClassLoader getParent() Since 1.2
                        |                 Bootstrap class loader를 표현하는 데 null을 사용하는 구현도 있다.
                        li final Module getUnnamedModule() Since 9 : 이 클래스 로더를 위한 익명 모듈을 반환한다.
                        li static ClassLoader getPlatformClassLoader() Since 9
                        li static ClassLoader getSystemClassLoader()
                        |                 시스템 클래스 로더를 반환하며, 이는 새롭게 정의되는 클래스 로더들의 default delegation parent다.
                        li final Package getDefinedPackage(String name) Since 9
                        li final Package[] getDefinedPackages() Since 9
                        li protected Package[] getPackages() Since 1.2 : 현재 및 조상 클래스 로더들이 정의한 패키지들을 반환.
                        li
                            | protected Package definePackage(String name, String specTitle, String specVersion, String specVendor, String implTitle, String implVersion, String implVendor, URL sealBase) Since 1.2
                        |                 필요한 경우, defineClass 메서드 전에 호출되어야 한다.
                        li void setDefaultAssertionStatus(boolean enabled) Since 1.4
                        li void setPackageAssertionStatus(String packageName, boolean enabled) Since 1.4
                        li void setClassAssertionStatus(String className, boolean enabled) Since 1.4
                        li void clearAssertionStatus() Since 1.4
                    details
                        h2.marker 리소스 관련
                        ol
                            li protected URL findResource(String moduleName, String name) Since 9
                            li URL getResource(String name) Since 1.1
                            li Enumeration&lt;URL> getResources(String name) Since 1.2
                            li Stream&lt;URL> resources(String name) Since 9
                            li protected URL findResource(String name) Since 1.2
                            li protected Enumeration&lt;URL> findResources(String name) Since 1.2
                            li static URL getSystemResource(String name) Since 1.1
                            li static Enumeration&lt;URL> getSystemResources(String name) Since 1.2
                            li InputStream getResourceAsStream(String name) Since 1.1
                            li static InputStream getSystemResourceAsStream(String name) Since 1.1
            details
                h2.marker class Package implements AnnotatedElement Since 1.2
                details
                    h2.marker Method Detail
                    ol
                        li String getName()
                        li String getSpecificationTitle()
                        li String getSpecificationVersion()
                        li String getSpecificationVendor()
                        li String getImplementationVersion()
                        li String getImplementationVendor()
                        li boolean isSealed()
                        li boolean isSealed(URL url) : 해당 url로 봉인했는지 여부
                        li boolean isCompatibleWith(String desired) » 현재 사양 버전이 desired 이상이면 true
                        li static Package[] getPackages() : 호출자의 클래스 로더와 그 조상들이 정의한 모든 패키지
            details
                h2.marker final class Module implements AnnotatedElement Since 9
                ol
                    li 이름 있는 모듈에 속하지 않은 모든 타입은 각 클래스 로더의 익명 모듈에 속한다.
                details
                    h2.marker Method Detail
                    ol
                        li boolena isNamed()
                        li String getName() : 없으면 null
                        li ClassLoader getClassLoader()
                        li ModuleDescriptor getDescriptor()
                        li ModuleLayer getLayer()
                        li boolean canRead(Module other)
                        li Module addReads(Module other)
                        li boolean isExported(String pn, Module other)
                        li boolean isOpen(String pn, Module other)
                        li boolean isExported(String pn)
                        li boolean isOpen(String pn)
                        li Module addExports(String pn, Module other)
                        li Module addOpens(String pn, Module other)
                        li Module addUses(Class&lt;?> service)
                        li boolean canUse(Class&lt;?> service)
                        li Set&lt;String> getPackages()
                        li InputStream getResourceAsStream(String name)
                        |                 해당 모듈의 리소스를 스트림으로 반환. name은 '/'으로 구분된 경로
        hr
        details
            h2.marker 프로그램 실행 단위
            details
                h2.marker class Thread implements Runnable Since 1.0
                ol
                    li 스레드는 실행 우선순위를 가지며, 그 초깃값은 스레드를 생성한 스레드의 것과 같다. 데몬 스레드로부터 생성된 스레드도 데몬 스레드다.
                    li
                        | JVM이 시작되면 하나의 non-daemon 스레드가 존재하며, 전형적으로 main 메서드를 호출한다. JVM은 다음의 상황 중 하나라도 일어나기 전까지 실행을 계속한다.
                    ul
                        li Runtime 클래스의 exit 메서드 호출, 또는 SecurityManager의 exit 허용
                        li 모든 데몬 스레드가 아닌 스레드들의 종료 : run 메서드의 반환이든 예외 발생이든 관계없이
                details
                    h2.marker static enum Thread.State Since 1.5
                    |             NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED
                details
                    h2.marker @FunctionalInterface static interface Thread.UncaughtExceptionHandler Since 1.5
                    ol
                        li
                            | 처리되지 않은 예외로 인해 스레드가 종료되는 상황을 대비한 핸들러. 그러한 상황에서, 먼저 Thread.getUncaughtExceptionHandler()를 통해 얻은 핸들러에 해당 스레드와 예외 객체를 전달한다.
                        li
                            | 만일 스레드에 핸드러가 설정되지 않은 경우, ThreadGroup의 핸들러를 이용하며, ThreadGroup에도 없는 경우 default 핸들러를 이용할 수 있다.
                        li void uncaughtException(Thread t, Throwable e)
                details
                    h2.marker Field Detail
                    ol
                        li public static final int MIN_PRIORITY
                        li public static final int NORM_PRIORITY
                        li public static final int MAX_PRIORITY
                details
                    h2.marker Constructor Detail
                    ol
                        li public Thread()
                        li public Thread(Runnable target)
                        li public Thread(ThreadGroup group, Runnable target)
                        li public Thread(String name)
                        li public Thread(ThreadGroup group, String name)
                        li public Thread(Runnable target, String name)
                        li public Thread(ThreadGroup group, Runnable target, String name)
                        li
                            | public Thread(ThreadGroup group, Runnable target, String name, long stackSize) Since 1.4
                        |                 stackSize는 스레드에 할당하는 바이트 크기를 가리키나, 플랫폼에 따라 그 효과는 다르다.
                        li
                            | public Thread(ThreadGroup group, Runnable target, String name, long stackSize, boolean inheritThreadLocals) Since 9
                details
                    h2.marker Method Detail
                    ol
                        li static Thread currentThread()
                        li static void yield()
                        li static void sleep(long millis) + 1 오버로딩
                        li static void onSpinWait() Since 9
                        details
                            h2.marker Spin-wait 루프에서 조건이 충족되어 루프를 벗어나기를 기다린다.
                            |                     class EventHandler {
                            br
                            |                     　　volatile boolean eventNotificationNotReceived;
                            br
                            |                     　　void waitForEventAndHandleIt() {
                            br
                            |                     　　　　while ( eventNotificationNotReceived ) {
                            br
                            |                     　　　　　　java.lang.Thread.onSpinWait();
                            br
                            |                     　　　　}
                            br
                            |                     　　　　readAndProcessEvent();
                            br
                            |                     　　}
                            br
                            br
                            |                     　　void readAndProcessEvent() {
                            br
                            |                     　　　　// Read event from some source and process it
                            br
                            |                     　　　　 . . .
                            br
                            |                     　　}
                            br
                            |                     }
                        li void start() : JVM이 run()을 호출. 스레드를 재시작하는 것은 허용되지 않는다.
                        li void run() : 관련된 Runnable의 run() 호출
                        li void interrupt()
                        ul
                            li
                                | checkAccess()가 호출된다. wait, join, sleep으로 블록된 경우 인터럽트 상태가 초기화되고, InterruptedException 발생.
                            li
                                | InterruptibleChannel로 I/O 작업 중 블록된 경우, 인터럽트 상태가 설정되고 채널은 닫힌다. ClosedByInterruptException 발생.
                            li Selector에서 블록된 경우, 인터럽트 상태가 설정되고 selection 연산에서 즉시 반환된다. 그 외의 경우 인터럽트 상태가 설정된다.
                        li
                            | static boolean interrupted() : 현재 스레드가 인터럽드됐는지 여부. 스레드의 인터럽트 상태는 이 메서드로 인해 초기화된다.
                        li boolean isInterrupted() : 스레드의 인터럽트 상태를 변경하지 않고 반환한다.
                        li final boolean isAlive()
                        li final void setPriority(int newPriority) + getPriority
                        li final void setName(String name) + getName
                        li final ThreadGroup getThreadGroup()
                        li static int activeCount() : 현재 스레드 그룹 하위의, 활동중인 스레드 추정치 반환.
                        li
                            | static int enumerate(Thread[] tarray) : 현재 스레드 그룹 하위의 모든 활동 스레드를 배열에 복사하고 그 갯수를 반환한다.
                        li final void join(long millis) + 2 오버로딩
                        |                 이 스레드가 중지되기까지 일시 대기. 0이면 무기한 대기. 지정 되지 않은 경우 0
                        li static void dumpStack() : 현재 스레드의 스택 추적을 표준 에러 출력
                        li final void setDaemon(boolean on) + 1 오버로딩 + isDaemon
                        |                 스레드를 daemon 또는 user 스레드로 변경. user 스레드가 하나도 없으면 프로그램은 종료된다. 스레드가 시작되기 전에 호출돼야한다.
                        li final void checkAccess() : 현재 스레드가 이 스레드를 변경할 수 없으면 SecurityException 발생
                        li ClassLoader getContextClassLoader() Since 1.2
                        li static boolean holdsLock(Object obj) Since 1.4
                        |                 특정 객체를 lock으로 갖는지 확인하기 위해 만들어짐.
                        li StackTraceElement[] getStackTrace() Since 1.5 : 현재 스레드의 스택 추적 반환
                        li
                            | static Map&lt;Thread, StackTraceElement[]> getAllstackTraces() Since 1.5 : 전체 스레드에 대해 스택 추적 반환
                        li long getId() Since 1.5
                        li Thread.State getState() Since 1.5
                        li
                            | static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh) Since 1.5 + getDefaultUncaughtExceptionHandler
                        li
                            | void setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh) Since 1.5 + getUncaughtExceptionHandler
            details
                h2.marker class ThreadGroup implements Thread.UncaughtExceptionHandler Since 1.0
                details
                    h2.marker Constructor Detail
                    ol
                        li public ThreadGroup(String name) Since 1.0
                        li public ThreadGroup(ThreadGroup parent, String name) Since 1.0
                details
                    h2.marker Method Detail
                    ol
                        li final String getName() Since 1.0
                        li final ThreadGroup getParent() Since 1.0
                        li boolean isDestroyed() Since 1.1
                        li final void setDaemon(boolean daemon) Since 1.0 + isDaemon
                        |                 데몬 스레드 그룹은 마지막 스레드나 스레드 그룹이 파괴되면 자동으로 파괴된다.
                        li final void setMaxPriority(int pri) Since 1.0 + getMaxpriority
                        li final boolean parentOf(ThreadGroup g) Since 1.0
                        li final void checkAccess() Since 1.0
                        li int activeCount()
                        li int enumerate(Thread[] list) : Thread 클래스의 설명과 동일
                        li int enumerate(Thread[] list, boolean recurse) Since 1.0
                        li int activeGroupCount() Since 1.0
                        li int enumerate(ThreadGroup[] list) Since 1.0
                        li int enumerate(ThreadGroup[] list, boolean recurse) Since 1.0
                        li final void interrupt() Since 1.2 : 그룹의 모든 스레드에 인터럽트
                        li final void destroy() Since 1.0 : 그룹과 하위 모든 그룹을 파괴
                        li void list() : 표준 출력으로 설명 출력
                        li
                            | void uncaughtException(Thread t, THrowable e) Since 1.0 : 처리되지 않은 예외에 대하여 JVM이 호출한다
            details
                h2.marker abstract class Process Since 1.0
                ol
                    li ProcessBuilder.start, Runtime.exec으로 시작된 native process들에 대한 제어 제공.
                details
                    h2.marker Method Detail
                    ol
                        li abstract OutputStream getOutputStream() + getInputStream, getErrorStream
                        li abstract int waitFor()
                        |                 현재 스레드가 이 프로세스의 종료를 기다린다. 프로세스의 종료 값을 반환.
                        li boolean waitFor(long timeout, TimeUnit unit) Since 1.8
                        |                 timeout : maximum time to wait. 시간 내에 프로세스가 종료되었다면 true 반환
                        li abstract int exitValue()
                        li abstract void destroy() : 정상 종료.
                        li Process destroyForcibly() Since 1.8 : 강제, 즉시 종료.
                        li boolean supportsNormalTermination() Since 9
                        li boolean isAlive() Since 1.8
                        li long pid() Since 9
                        li CompletableFuture&lt;Process> onExit() Since 9
                        li ProcessHandle toHandle() Since 9
                        li ProcessHandle.Info info() Since 9
                        li Stream&lt;ProcessHandle> children() Since 9
                        li Stream&lt;ProcessHandle> descendants() Since 9
            details
                h2.marker final class ProcessBuilder Since 1.5
                ol
                    li 이 클래스는 스레드-안전하지 않다.
                details
                    h2.marker abstract static class ProcessBuilder.Redirect Since 1.7
                    ol
                        li 서브프로세스의 입력 소스 또는 출력 방향을 표현한다.
                    details
                        h2.marker static enum ProcessBuilder.Redirect.Type
                        |                 APPEND : Redirect.appendTo(File), INHERIT, PIPE, READ : Redirect.from(File), WRITE : Redirect.to(File)
                    details
                        h2.marker Field Detail
                        ol
                            li public static final ProcessBuilder.Redirect PIPE : 현재 프로세스와 파이프로 연결
                            li public static final ProcessBuilder.Redirect INHERIT : 현재 프로세스의 것과 동일
                            li public static final ProcessBuilder.Redirect DISCARD Since 9: 출력 버림
                    details
                        h2.marker Method Detail
                        ol
                            li abstract ProcessBuilder.Redirect.Type type()
                            li File file() : 입력 소스 또는 출력지와 관계된 File 반환. 없으면 null.
                            li static ProcessBuilder.Redirect from(File file)
                            li static ProcessBuilder.Redirect to(File file) : file의 이전 내용은 새로운 쓰기 작업에 의해 버려진다.
                            li static ProcessBuilder.Redirect appendTo(File file)
                details
                    h2.marker Constructor Detail
                    ol
                        li public ProcessBuilder(List&lt;String> command)
                        li public ProcessBuilder(String... command)
                details
                    h2.marker Method Detail
                    details(open='')
                        h2.marker Setter
                        ol
                            li ProcessBuilder command(String... command) + 1 오버로딩
                            li ProcessBuilder directory(File directory)
                            li
                                | ProcessBuilder redirectInput(ProcessBuilder.Redirect source) Since 1.7 + 1 오버로딩 + redirectOutput, redirectError
                            li ProcessBuilder inheritIO() Since 1.7
                            li ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
                            |                     true면 서브프로세스들의 에러 출력이 표준 출력과 함께 나온다.
                    details(open='')
                        h2.marker Getter
                        ol
                            li List&lt;String> command()
                            li Map&lt;String, String> environment()
                            li File directory()
                            li
                                | ProcessBuilder.Redirect redirectInput() Since 1.7 + redirectOutput, redirectError
                            li boolean redirectErrorStream()
                    ol
                        li Process start()
                        li static List&lt;Process> startPipeline(List&lt;ProcessBuilder> builders) Since 9
                        |                 프로세스들의 표준 출력을 다음 프로세스의 표준 입력으로 연결한다.
            details
                h2.marker class Runtime Since 1.0
                ol
                    li 모든 Java 애플리케이션은 하나의 Runtime 인스턴스를 가진다.
                details
                    h2.marker
                        | static final class Runtime.Version implements Comparable&lt;Runtime.Version> Since 9
                    ul
                        li $VNUM : $FEATURE.$INTERIM.$UPDATE.$PATCH == [1-9][0-9]*((\.0)*\.[1-9][0-9]*)*
                        |                 $FEATURE : Feature-release counter
                        br
                        |                 $INTERIM : Interim-release counter
                        br
                        |                 $UPDATE : Update-release counter
                        br
                        |                 $PATCH : Emergency patch-release counter
                        li
                            | Version String : $VNUM(-$PRE)?\+$BUILD(-$OPT)? or $VNUM-$PRE(-$OPT)? or $VNUM(+-$OPT)?
                        |                 $PRE : [a-zA-Z0-9]+ : Pre-release identifier
                        br
                        |                 $BUILD : 0|[1-9][0-9]* : Build number
                        br
                        |                 $OPT : [-a-zA-Z0-9.]+ : Additional build information
                details
                    h2.marker Method Detail
                    ol
                        li static Runtime getRuntime()
                        li void exit(int status) : 현재 실행중인 JVM을 종료
                        li void addShutdownHook(Thread hook) Since 1.3 + removeShutdownHook
                        |                 JVM이 종료 절차에 진입하면 등록된 모든 hook를 실행
                        li void halt(int status) Since 1.3 : 강제종료
                        li Process exec(String[] cmdarray, String[] envp, File dir) Since 1.3 + 5 오버로딩
                        li int availableProcessors() Since 1.4
                        li long freeMemory() + totalMemory, maxMemory
                        li void gc() : Garbage collector 작동.
                        li void runFinalization() : 소멸 대기중인 모든 객체 소멸
                        li void load(String filename) : Native library 로드. JNI에서 사용.
                        li void loadLibrary(String libname)
                        li static Runtime.Version version() Since 9 : JVM 버전 반환.
            details
                h2.marker final class System Since 1.0
                details
                    h2.marker static interface System.Logger Since 9
                    details
                        h2.marker static enum System.Logger.Level Since 9
                        ol
                            li
                                | ALL(Integer.MIN_VALUE), TRACE(400), DEBUG(500), INFO(800), WARNING(900), ERROR(1000), OFF(Integer.MAX_VALUE)
                            li final String getName()
                            li final int getSeverity()
                    details
                        h2.marker Method Detail
                        ol
                            li String getName() : 로거 이름 반환.
                            li boolean isLoggable(System.Logger.Level level)
                            li default void log(System.Logger.Level level, String msg) + 오버로딩
                details
                    h2.marker abstract static class System.LoggerFinder Since 9
                    ul
                        li 로거의 생성, 관리, 구성에 관한 서비스 제공.
                        li 기본 구현 : java.logging 모듈이 있는 경우 java.util.logging이용. 없으면 INFO 수준으로 표준 에러 출력
                    details
                        h2.marker Method Detail
                        ol
                            li static System.LoggerFinder getLoggerFinder()
                            li abstract getLogger(String name, Module module)
                            li
                                | System.Logger getLocalizedLogger(String name, ResourceBundle bundle, Module module)
                details
                    h2.marker Field Detail
                    ol
                        li public static final InputStream in
                        li public static final PrintStream out
                        li public static final PrintStream err
                details
                    h2.marker Method Detail
                    ol
                        li static void setIn(InputStream in) Since 1.1 + setOut, setErr
                        li static Console console() Since 1.6
                        li static Channel inheritedChannel() Since 1.5
                        li static void setSecurityManager(SecurityManager s) + getSecurityManager
                        li static long currentTimeMillis() + nanoTime
                        li
                            | static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)
                        li static int identityHashCode(Object x) Since 1.1
                        li static String lineSeparator() Since 1.7
                        li static void setProperties(Properties props) + getProperties
                        li static String setProperty(String key, String value) Since 1.2 + 2 오버로딩
                        li static String clearProperty(String key) Since 1.5
                        li static String getenv(String name) + 1 오버로딩 : 환경변수
                        li static System.Logger getLogger(String name) Since 9 + 1 오버로딩
                        li static void exit(int status)
                        li static void gc() : Runtime의 것을 호출
                        li static void runFinalization() : Runtime의 것을 호출
                        li static void load(String filename) : Runtime의 것을 호출
                        li static void loadLibrary(String libname) : Runtime의 것을 호출
            details
                h2.marker final class StackWalker Since 9
                ol
                    li
                        | 현재 스레드의 StackFrame에 대한 스트림을 열고 특정 작업을 수행한다. 스트림은 실행 지점인 맨 위 frame부터 아래로 내려가면서 작업한다.
                    |             예. 현재 스레드의 상위 10개 스택 프레임 가져오기. StackWalker.getInstance().walk(s -> s.limit(10).collect(Collectors.toList()));
                details
                    h2.marker static enum StackWalker.Option Since 9
                    ul
                        li RETAIN_CLASS_REFERENCE : StackWalker가 작업하는 StackFrame들에 클래스 정보 유지
                        li SHOW_HIDDEN_FRAMES : 모든 숨겨진 프레임 표시.
                        li SHOW_REFLECT_FRAMES : 모든 reflection 프레임 표시
                details
                    h2.marker static interface StackWalker.StackFrame Since 9
                    ul
                        li 각 StackFrame 객체는 StackWalker로부터 반환된, 메서드 호출을 표현한다.
                    details
                        h2.marker Method Detail
                        ol
                            li String getClassName() : 이 프레임이 나타내는 메서드가 정의된 클래스를 binary name으로 반환
                            li String getMethodName() : 이 프레임이 나타내는 메서드의 이름 반환.
                            li
                                | Class&lt;?> getDeclaringClass() : 이 프레임이 나타내는 메서드가 정의된 클래스의 객체 반환. Option.RETAIN_CLASS_REFERENCE가 설정되어야 지원된다
                            li default MethodType getMethodType() Since 10
                            li default String getDescriptor() Since 10
                            li int getByteCodeIndex() : 실행 지점을 포함하는 Code 속성에서의 인덱스 반환.
                            li String getFileName() : 이 프레임이 가리키는 실행 지점이 포함된 소스 파일 이름 반환.
                            li int getLineNumber()
                            li boolean isNativeMethod()
                            li StackStraceElement toStackTraceElement() : 이 프레임에 관한 StackTraceElement 반환.
                details
                    h2.marker Method Detail
                    ol
                        li static StackWalker getInstance() : 숨겨진 프레임을 모두 생략. 클래스 정보 미포함.
                        li static StackWalker getInstance(StackWalker.Option option)
                        li static StackWalker getInstance(Set&lt;StackWalker.Option> options)
                        li
                            | static StackWalker getInstance(Set&lt;StackWalker.Option> options, int estimateDepth)
                        li
                            | &lt;T> T walk(Function&lt;? super Stream&lt;StackWalker.StackFrame>, ? extends T> function)
                        li void forEach(Consumer&lt; super StackWalker.StackFrame> action)
                        li Class&lt;&?> getCallerClass()
                        |                 이 메서드의 호출자의 클래스 객체를 반환. 예를 들어, Util#getResourceBundle 메서드는 이 메서드를 통해 얻은 호출자의 클래스로부터 클래스 로더를 얻고, 클래스 로더를 통해 리소스를 로드한다.
            details
                h2.marker final class StackTraceElement implements Serializable Since 1.4
                details
                    h2.marker Constructor Detail
                    ol
                        li
                            | public StackTraceElement(String declaringClass, String methodName, String fileName, int lineNumber) Since 1.5
                        li
                            | public StackTraceElement(String classLoaderName, String moduleName, String moduleVersion, String declaringClass, String methodName, String fileName, int lineNumber) Since 9
                details
                    h2.marker Method Detail
                    ol
                        li String getFileName()
                        li int getLineNumber()
                        li String getModuleName() Since 9
                        li String getModuleVersion() Since 9
                        li String getClassLoaderName() Since 9
                        li String getClassName()
                        li String getMethodName()
                        li boolean isNativeMethod()
        hr


    h1.marker java.lang.annotation Since 1.5
        details
            h2.marker interface Annotation Since 1.5
            ol
                li 이 인터페이스를 구현하는 것으로 새로운 애너테이션을 정의할 순 없다.
                li Class&lt;? extends Annotation> annotationType()
                li int hashCode()
        hr
        details
            h2.marker enum ElementType Since 1.5
            ol
                li 애너테이션이 적용되는 요소를 표현한다.
                li
                    | TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VALIABLE, ANNOTATION_TYPE, PACKAGE, TYPE_PARAMETER Since 1.8, MODULE Since 9
        hr
        details
            h2.marker enum RetentionPolicy Since 1.5
            ol
                li 애너테이션 유지 정책.
                li SOURCE : 컴파일러가 제거
                li CLASS : 컴파일러가 클래스 파일에 기록(default)
                li RUNTIME : 클래스 파일에 기록하고 JVM 런타임에도 유지. 따라서 리플렉션 가능.
        hr
        details
            h2.marker
                | @Documented @Retention(RUNTIME) @Target(ANNOTATION_TYPE) @interface Documented Since 1.5
            |     @Documented가 다른 애너테이션 타입 A에 존재하면, @A로 꾸며진 요소의 공개적인 서명으로 인식하여 JavaDoc에 포함된다.
        hr
        details
            h2.marker
                | @Documented @Retention(RUNTIME) @Target(ANNOTATION_TYPE) @interface Inherited Since 1.5
            |     Superclass의 애너테이션을 상속함을 표시. 클래스에만 유효한 애너테이션이다.
        hr
        details
            h2.marker @Documented @Target(FIELD) @Retention(SOURCE) @interface Native Since 1.8
            |     필드가 네이티브 코드 값을 정의함을 표현.
        hr
        details
            h2.marker
                | @Documented @Retention(RUNTIME) @Target(ANNOTATION_TYPE) @interface Repeatable Since 1.8
            |     애너테이션을 반복적으로 정의할 수 있음을 표현.
            a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html') 튜토리얼
        hr
        details
            h2.marker
                | @Documented @Retention(RUNTIME) @Target(ANNOTATION_TYPE) @interface Retention Since 1.5
            |     애너테이션을 얼마나 유지할 지 표현. value ← RetentionPolicy
        hr
        details
            h2.marker
                | @Documented @Retention(RUNTIME) @Target(ANNOTATION_TYPE) @interface Target Since 1.5
            |     애너테이션을 적용할 요소들을 표현한다. 여러 개(또는 0개)일 경우 배열 리터럴 표기 {}를 이용한다. value ← ElementType[]
        hr


    h1.marker java.lang.module Since 9
        details
            h2.marker interface ModuleFinder Since 9
            ol
                li
                    | Module Resolution : 모듈들의 연관 관계를 계산하는 작업. 각 모듈의 필요(requires) 모듈들을 반복적으로 찾아내고 관계 그래프를 구한다.
                li
                    | ModuleFinder는 module resolution과 service binding(Configuration#resolveAndBind)에서 모듈을 찾는 데 이용된다.
            details
                h2.marker Method Detail
                ol
                    li Optional&lt;ModuleReference> find(String name)
                    li Set&lt;ModuleReference> findAll()
                    li static ModuleFinder ofSystem()
                    li static ModuleFinder of(Path... entries)
                    li static ModuleFinder compose(ModuleFinder... finders)
        hr
        details
            h2.marker interface ModuleReader Extends Closeable Since 9
            ol
                li 모듈 내용에 대한 접근 제공.
                li Optional&lt;URI> find(String name)
                li default Optional&lt;InputStream> open(String name)
                li default Optional&lt;ByteBuffer> read(String name)
                li default void release(ByteBuffer bb)
                li Stream&lt;String> list()
        hr


    h1.marker java.lang.ref Since 1.2
        details(open='')
            h2.marker Package h2.marker
            ol
                li 참조 객체에 관한 클래스를 제공한다
                li 3단계의 참조 레벨을 제공한다 : Soft > Weak > Phantom
                li 객체 참조 레벨
                ul
                    li Strongly reachable
                    |             참조 객체의 조회없이 객체에 직접 접근 가능한 스레드가 존재. 객체를 생성한 스레드가 이 레벨에 해당
                    li Softly reachable
                    |             Not strongly reachable + Soft 참조 객체의 조회로 객체에 접근 가능
                    li Weakly reachable
                    |             Not strongly reachable + Not softly reachable + Weak 참조 객체의 조회로 객체에 접근 가능.
                    |             약한 참조가 해제되면 대상 객체는 소멸(finilization) 대상이 된다.
                    li Phantom reachable
                    |             Not strongly reachable + Not softly reachable + Not weakly reachable + 객체는 소멸됐지만 Phantom 참조 객체가 참조하는 중
                    li Unreachable
                    |             참조 불가능하며, 따라서 메모리 해제 대상이 된다.
        hr
        details
            h2.marker final class Cleaner Since 9
            ol
                li 객체 참조와 관련 정리 작업을 관리한다.
                |         객체가 phantom reachable 상태로 변했음을 통지받으면 정리 작업이 실행된다. 참조 레벨의 변경을 통지받기 위해 PhantomReference와 ReferenceQueue를 이용한다.
                li 객체 참조와 정리 작업을 등록하면 Cleanable 인스턴스가 반환된다
                |         가장 효과적인 사용법은 객체의 close() 메서드나, 객체가 필요없는 시점에 명시적으로 clean()을 호출하는 것.
                li 등록하는 객체를 객체 정리 작업이 참조하면 안 된다
                |         참조하는 경우, 객체는 Phantom reachable 레벨에 도달할 수 없고, 자동적으로 정리 작업은 호출될 일이 없어진다.
                li
                    | 정리 작업은 Runnable이며, 실행 중 발생하는 모든 예외는 무시된다. 발생한 예외는 Cleaner와 다른 정리 작업에 영향을 미치지 않는다.
                |         Cleaner 인스턴스와 관계된 스레드가 정리 작업을 실행하며, 모든 정리 작업이 실행된 후엔 Cleaner 인스턴스가 GC에 의해 정리된다
                li System.exit 도중의 정리 작업의 실행은 정의되지 않는다
            details
                h2.marker static interface Cleaner.Cleanable Since 9
                |         void clean() : cleanable을 등록 취소하고 정리 작업을 실행한다. 반복 호출되도 정리 작업은 최대 1번만 실행된다.
            details
                h2.marker Method Detail
                ol
                    li static Cleaner create() + 1 오버로딩
                    li Cleaner.Cleanable register(Object obj, Runnable action)
        hr
        details
            h2.marker class ReferenceQueue&lt;T> Since 1.2
            ol
                li 참조 큐. 참조 레벨 변화를 감지하면 GC가 참조 객체를 큐에 추가한다
                li Reference&lt;? extends T> poll()
                |         참조 객체가 즉시 사용 가능하면 큐에서 제거하고 반환한다. 그 외의 경우 즉시 null을 반환한다.
                li Reference&lt;? extends T> remove(long timeout) + 1 오버로딩
                |         다음 참조 객체를 규에서 제거하고 반환한다. 그 다음 참조 객체가 사용 가능해질 때까지 최대 timeout 만큼 대기한다
        hr
        details
            h2.marker abstract class Reference&lt;T> Since 1.2
            ol
                li GC와 상호작용하기 위한 메서드들을 정의한다. 이 클래스를 직접 상속하지 않아야 한다
                li T get() : 참조하는 객체를 반환한다
                li void clear()
                li boolean enqueue() : 참조 객체를 정리하고 등록된 큐에 넣는다 + isEnqueued
                li static void reachabilityFence(Object ref)
                |         ref의 참조 레벨을 Strongly reachable로 고정한다. 대부분의 상황에서는 필요없다.
            details
                h2.marker Sub Class
                ol
                    li class SoftReference&lt;T> extends Reference&lt;T> Since 1.2
                    li class WeakReference&lt;T> extends Reference&lt;T> Since 1.2
                    li class PhantomReference&lt;T> extends Reference&lt;T> Since 1.2
        hr


    h1.marker java.lang.reflect Since 1.1
        details(open='')
            h2.marker 자바 제네릭의 제약사항
            ol
                li 자바의 제네릭은 컴파일 과정에서 모두 Object 또는 바운드된 클래스로 교체된다.
                li 따라서 List&lt;T> 참조 변수만 가지고 T가 어떤 타입인지 런타임에 알아내는 방법은 없다.
                |         다만, 원소가 존재한다면 instanceof, Class#isInstanse, Class#isAssignableFrom을 이용한 판별은 가능하다.
                li 따라서 제네릭 타입에 대한 직접적인 연산은 모두 무효하다.
        hr
        details
            h2.marker final class Array Since 1.1
            ol
                li 동적으로 자바 배열을 생성하고 접근하는 static 메서드들을 제공.
                li static Object newInstance(Class&lt;?> componentType, int length) + 1 오버로딩
                li static int getLength(Object array)
                li static Object get(Object array, int index) + getBoolean, getByte, ...
                li
                    | static void set(Object array, int index, Object value) + setBollean, setByte, ...
        hr
        details
            h2.marker class Modifier Since 1.1
            ol
                li
                    | public static final int PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, SYNCHRONIZED, VOLATILE, TRANSIENT, NATIVE, INTERFACE, ABSTRACT, STRICT
                li static boolean isPublic(int mod) ~ isStrict(int mod)
                li static String toString(int mod)
                li
                    | static int classModifiers() Since 1.7 + interfaceModifiers, constructorModifiers, ...
                |         사용할 수 있는 제한자들을 OR하여 반환
        hr
        details
            h2.marker 지원 타입 종류
            ol
                li interface Type Since 1.5
                |         모든 타입의 공통 super interface.
                li interface ParameterizedType extends Type Since 1.5
                |         Collection&lt;String>처럼 파라미터화된 타입을 표현.
                li interface GenericArrayType extends Type Since 1.5
                |         원소 타입이 parameterized type 또는 type 변수인 배열 타입을 표현.
                li interface WildcardType extends Type Since 1.5
                |         ?, ? extends Number, ? super Integer와 같은 와일드카드 타입을 표현.
                li interface AnnotatedElement Since 1.5
                |         애너테이트된 요소를 표현
                details
                    h2.marker interface AnnotatedType extends AnnotatedElement Since 1.8
                    ol
                        li default AnnotatedType getAnnotatedOwnerType() Since 9
                        |                 이 타입이 멤버로 속해있는, 애너테이트된 타입 반환. 예를 들어 이 타입이 @TA O&lt;T>.I&lt;S>라면, @TA O&lt;T>를 반환.
                        br
                        |                 null : 이 타입이 top-level이거나 local 클래스, 익명 클래스, 기본 자료형, void인 경우. 이 타입이 AnnotatedArrayType, AnnotatedTypeVariable, AnnotatedWildcardType의 인스턴스인 경우.
                        li Type getType() : 이 애너테이트된 타입의 기저 타입
                li interface AnnotatedArrayType extends AnnotatedType Since 1.8
                |         원소가 애너테이트된 배열을 표현.
                li interface AnnotatedParameterizedType extends AnnotatedType Since 1.8
                |         타입 인자들이 애너테이트된 parameterized type을 표현.
                li
                    | interface TypeVariable&lt;D extends GenericDeclaration> extends Type, AnnotatedElement Since 1.5
                |         타입 변수에 관한 공통 superinterface.
                li interface GenericDeclaration extends AnnotatedElement Since 1.5
                |         모든 타입 변수 정의들에 대한 공통 인터페이스.
                li interface AnnotatedTypeVariable extends AnnotatedType Since 1.8
                |         애너테이트된 바운드를 가진 타입 변수를 표현.
                li interface AnnotatedWildcardType extends AnnotatedType Since 1.8
                |         애너테이트된 upper 또는 lower 바운드들에 대한 와일드카드 타입을 표현
        hr
        details
            h2.marker 클래스 멤버 관련
            details
                h2.marker interface Member Since 1.1
                ol
                    li 하나의 멤버(필드나 메서드) 또는 생성자를 가리킨다.
                    li Class&lt;?> getDeclaringClass()
                    li String getName()
                    li int getModifiers()
                    li boolean isSynthetic() Since 1.5 : 컴파일러에 의해 만들어진 멤버인지 여부
            details
                h2.marker class AccessibleObject implements AnnotatedElement Since 1.2
                ol
                    li Field, Method, Constructor의 base 클래스. 리플렉트된 객체를 사용하기 전에 suppressing check 표시한다.
                    li static void setAccessible(AccessibleObject[] array, boolean flag)
                    |             배열의 각 원소들을 setAccessible(boolean)으로 설정할 수 있을 때, 한번에 하기 위한 메서드
                    li void setAccessible(boolean flag)
                    li final boolean trySetAccessible() Since 9
                    |             아마도 변경되었을 accessible flag 값을 반환한다. 실패할 경우 예외를 발생하지 않고 false를 반환.
                    li final boolean canAccess(Object obj) Since 9
            details
                h2.marker final class Field extends AccessibleObject implements Member Since 1.1
                ol
                    li boolean isEnumConstant() Since 1.5
                    li boolean isSynthetic() Since 1.5 : 컴파일러에 의해 만들어진 멤버인지 여부
                    li Class&lt;?> getType()
                    li Type getGenericType() Since 1.5
                    li String toGenericString() Since 1.5
                    li Object get(Object obj)
                    li boolean getBoolean(Object obj) + ...
                    li void set(Object obj, Object value)
                    li void setBoolean(Object obj, boolean z) + ...
                    li AnnotatedType getAnnotatedType() Since 1.8
            details
                h2.marker
                    | abstract class Executable extends AccessibleObject implements Member, GenericDeclaration Since 1.8
                ol
                    li Method, Constructor의 공통 기능
                    li abstract Class&lt;?>[] getParameterTypes()
                    li int getParameterCount()
                    li Type[] getGenericParameterTypes()
                    li Parameter[] getParameters()
                    li abstract Class&lt;?>[] getExceptionTypes()
                    li Type[] getGenericExceptionTypes()
                    li abstract Annotation[][] getParameterAnnotations()
                    li abstract AnnotatedType getAnnotatedReturnType()
                    li AnnotatedType getAnnotatedReceiverType()
                    li AnnotatedType[] getAnnotatedParameterTypes()
                    li AnnotatedType[] getAnnotatedExceptionTypes()
                    li abstract String toGenericString()
                    li boolean isVarArgs()
                    li boolean isSynthetic()
            details
                h2.marker final class Method extends Executable Since 1.1
                ol
                    li Class&lt;&?> getReturnType()
                    li Type getGenericReturnType() Since 1.5
                    li Object getDefaultValue() Since 1.5
                    li Object invoke(Object obj, Object... args)
                    li boolean isBridge()
                    li boolean isDefault() Since 1.8
            details
                h2.marker final class Constructor&lt;T> extends Executable Since 1.1
                |         T newInstance(Object... initargs)
            details
                h2.marker final class Parameter implements AnnotatedElement
                ol
                    li 메서드 인자에 관한 정보.
                    li boolean isNamePresent()
                    li boolean isImplicit()
                    li boolean isSynthetic()
                    li boolean isVarArgs()
                    li Executable getDeclaringExecutable()
                    li int getModifiers()
                    li String getName()
                    li Type getParameterizedType()
                    li Class&lt;?> getType()
                    li AnnotatedType getAnnotatedType()
            details
                h2.marker interface InvocationHandler Since 1.3
                ol
                    li Proxy 인스턴스의 invocation handler에서 구현하는 인터페이스.
                    li Object invoke(Object proxy, Method method, Object[] args)
            details
                h2.marker class Proxy implements Serializable Since 1.3
                ol
                    li Proxy는 인터페이스 익명 객체처럼 행동하면서 사용자 정의 메서드를 호출할 수 있는 객체를 생성하는 static 메서드를 제공한다.
                    |             예. 인터페이스 Foo의 프록시 인스턴스 생성
                    br
                    |             InvocationHandler handler = new MyInvocationHandler(...);
                    br
                    |             Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(), new Class&lt;?>[] { Foo.class }, handler);
                    li 프록시 클래스 속성
                    |             "$Proxy"로 이름이 시작. final and non-abstract. java.lang.reflect.Proxy를 상속. 생성시 주어진 인터페이스들을 차례대로 구현. ProtectionDomain은 bootstrap 클래스 로더가 로드한 시스템 클래스들과 동일.
                details
                    h2.marker Method Detail
                    ol
                        li
                            | static Object newProxyInstance(ClassLoader loader, Class&lt;?>[] interfaces, InvocationHandler h)
                        li static boolean isProxyClass(Class&lt;?> cl)
                        li static InvocationHandler getInvocationHandler(Object proxy)
        hr


    h1.marker java.math Since 1.1
        details
            h2.marker class BigDecimal extends Number implements Comparable&lt;BigDecimal> Since 1.1
            ol
                li 임의 정밀도의 변경할 수 없는 10진 정수와 32비트 정수인 지수로 십진수를 표현한다.
                li public static final BigDecimal ZERO, ONE, TEN Since 1.5
            details
                h2.marker Constructor Detail
                ol
                    li public BigDecimal(char[] in) Since 1.5 + 3 오버로딩
                    li public BigDecimal(String val) + 1 오버로딩
                    |             val ::= (부호)?(진수부)(지수부)?
                    br
                    |             진수부 ::= 정수부.(소수부) or .소수부 or 정수부
                    br
                    |             지수부 ::= (e|E)정수
                    li public BigDecimal(double val) + 8 오버로딩
                    |             double의 오차 때문에 정확하진 않다.
            details
                h2.marker Method Detail
                ol
                    li static BigDecimal valueOf(double val) Since 1.5 + 2 오버로딩
                    li BigDecimal add(BigDecimal augend) + 1 오버로딩 + subtract, multiply, divide
                    li BigDecimal divideToIntegralValue(BigDecimal divisor) Since 1.5 + 1 오버로딩 : 몫
                    li BigDecimal remainder(BigDecimal divisor) SInce 1.5 + 1 오버로딩 : 나머지
                    li BigDecimal[] divideAndRemainder(BigDecimal divisor) Since 1.5
                    li
                        | sqrt, pow, abs, negate, scale, precision, unscaledValue, round, movePointRight, scaleByPowerOfTen, ...
        hr
        details
            h2.marker class BigInteger extends Number implements Comparable&lt;BigInteger> Since 1.1
            ol
                li 변경할 수 없는 임의 길이의 정수. -2^(Integer.MAX_VALUE) ~ 2^(Integer.MAX_VALUE)
                li
                    | public static final BigInteger ZERO Since 1.2, ONE Since 1.2, TWO Since 9, TEN Since 1.5
            details
                h2.marker Constructor Detail
                ol
                    li public BigInteger(byte[] val, int off, int len) Since 9 + 1 오버로딩
                    li
                        | public BigInteger(int signum, byte[] magnitude, int off, int len) Since 9 + 1 오버로딩
                    li public BigInteger(String val, int radix) + 1 오버로딩
                    li public BigInteger(int numBits, Random rnd) : [0 ~ 2^numBits) 사이 난수
                    li public BigInteger(int bitLength, int certainty, Random rnd)
                    |             rnd를 통해 난수를 생성하고, 특정 비트 길이의 양의 정수(아마도 소수) 반환. 소수일 확률은 (1 - 0.5^certainty) 초과.
            details
                h2.marker Method Detail
                ol
                    li static BigInteger probablePrime(int bitLength, Random rnd) Since 1.4
                    |             합성수일 가능성은 2^(-100)을 넘지 않는다.
                    li BigInteger nextProbablePrime() Since 1.5
                    |             이 BigInteger보다 큰 첫 소수(아마도)를 반환한다. 합성수일 가능성은 2^(-100)을 넘지 않는다.
                    li static BigInteger valueOf(long val)
                    li BigDecimal에는 없는 메서드
                    |             sqrtAndRemainder() Since 9, gcd(BigInteger), modPow(BigInteger, BigInteger), shiftLeft(int), and(BigInteger), testBit(int), setBit(n), flipBit(int)
        hr
        details
            h2.marker final class MathContext implements Serializable Since 1.5
            ol
                li 정밀도, 반올림 모드를 캡슐화한 변경 불가능한 객체.
                li public static final MathContext UNLIMITED : precision=0, roundingMode=HALF_UP
                li
                    | public static final MathContext DECIMAL32, DECIMAL64, DECIMAL128 : 7/16/34digits, roundingMode=HALF_EVEN
            details
                h2.marker Constructor Detail
                ol
                    li public MathContext(int setPrecision) : HALF_UP
                    li public MathContext(int setPrecision, RoundingMode setRoundingMode)
                    li public MathContext(String val) : MathContext#toString과 같은 포맷
            details
                h2.marker Method Detail
                ol
                    li int getPrecision()
                    li RoundingMode getRoundingMode()
        hr
        details
            h2.marker enum RoundingMode Since 1.5
            ul
                li CEILING, FLOOR, UP : 0에서 멀어지도록 선택
                li DOWN : 0에 가까워지도록 선택
                li
                    | HALF_UP, HALF_DOWN, HALF_EVEN : 가장 인접한 두 이웃들이 같은 거리에 있는 경우(*5인 경우), 각각 큰/작은/짝수 이웃을 선택.
                li UNNECESSARY : 올림이나 내림이 필요없는 상태. 그 외엔 ArithmeticException 발생.
        hr


    h1.marker java.net Since 1.0
        details
            h2.marker Address
            details
                h2.marker class InetAddress implements Serializable Since 1.0
                ol
                    li IP 주소를 표현하며, IPv4, IPv6 각각에 대응하는 서브 클래스가 있다. 서브 클래스를 직접 이용하는 일은 별로 없을 거라고 한다.
                    li boolean isLoopbackAddress() Since 1.4 + isAnyLocalAddress, ...
                    li boolean isReachable(int timeout) Since 1.5 + 1 오버로딩
                    |             ICMP, ECHO, REQUEST 등으로 연결 시도
                    li String getHostName() + getCanonicalHostName
                    li byte[] getAddress() + getHostAddress
                    li static InetAddress getByAddress(byte[] addr) Since 1.4 + 1 오버로딩
                    li static InetAddress getByName(String host)
                    li
                        | static InetAddress[] getAllByName(String host)
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/net/InetAddressTest.java', lan: 'java'})
                    li static InetAddress getLocalHost()
                    li static InetAddress getLoopbackAddress() Since 1.7 : 127.0.0.1(127.*.*.*) or ::1
            details
                h2.marker abstract class SocketAddress implements Serializable Since 1.4
                |         프로토콜과 무관한 소켓 주소를 의미.
            details
                h2.marker class InetSocketAddress extends SocketAddress Since 1.4
                ol
                    li IP 소켓 주소[(IP 주소 or 호스트 이름) + 포트]를 표현.
                    li public InetSocketAddress(int port)
                    |             port가 0이면 바인드시 자동 할당.
                    li public InetSocketAddress(InetAddress addr, int port)
                    |             addr이 null이면 와일드카드 할당
                    li public InetSocketAddress(String hostname, int port)
                    |             호스트에 해당하는 InetAddress를 찾기 위해 연결을 시도한다. 실패 시 unresolved 플래그 설정
                details
                    h2.marker Method Detail
                    ol
                        li static InetSocketAddress createUnresolved(String host, int port) Since 1.5
                        li final int getPort()
                        li final InetAddress getAddress()
                        li final String getHostName()
                        li final String getHostString() Since 1.7 : 이름이 없으면 주소로 생성
                        li final boolean isUnresolved()
            details
                h2.marker class InterfaceAddress Since 1.6
                ol
                    li IPv4 : IP 주소 + 서브넷 마스크 + 브로드캐스트 주소
                    li IPv6 : IP 주소 + network prefix length
                details
                    h2.marker Method Detail
                    ol
                        li InetAddress getAddress()
                        li InetAddress getBroadcast()
                        li short getNetworkPrefixLength()
        hr
        details
            h2.marker Connection
            details
                h2.marker abstract class URLConnection Since 1.0
                ol
                    | URL이 지정하는 원격지와의 연결을 정의하며, 일반적으로 아래 단계에 따라 사용된다
                    li openConnection 메서드를 통해 연결 객체 획득
                    li 구성 인자 및 요청 속성 설정
                    |             메서드 : setAllowUserInteraction, setDoInput, setDoOutput, setIfModifiedSince, setUseCaches
                    li connect 메서드로 연결 시도
                    li 연결 성공하면 헤더와 컨텐츠에 접근할 수 있다
                    |             메서드 : getContent, getHeaderField, getInputStream, getOutputStream
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/net/HttpURLConnectionTest.java', lan: 'java'})
                    br
                    |             자주 사용되는 헤더 필드 접근 메서드 : getContentEncoding, getContentLength, getContentType, getDate, getExpiration, getLastModified
            details
                h2.marker abstract class HttpURLConnection extends URLConnection Since 1.1
                ol
                    li HttpURLConnection은 요청을 1회만 하지만, 기저 네트워크 연결은 다른 인스턴스가 공유할 수 있다
                    li public static final int HTTP_OK, HTTP_BAD_REQUEST, HTTP_NOT_FOUND, ...
                    li
                        | int getResponseCode()
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/net/HttpURLConnectionTest.java', lan: 'java'})
                    li void setAuthenticator(Authenticator auth) Since 9
                    |             기본 구현은 UnsupportedOperationException를 던지므로, 사용하려면 재정의해야 한다
            details
                h2.marker abstract class JarURLConnection extends URLConnection Since 1.2
                ol
                    li 원격지 jar에 대한 연결을 제공한다
                    li JarEntry 표기 : jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class
                    li JarFile 표기 : jar:http://www.foo.com/bar/baz.jar!/
                    li Jar directory 표기 : jar:http://www.foo.com/bar/baz.jar!/COM/foo/
        hr
        details
            h2.marker Socket
            details
                h2.marker interface SocketOptions Since 1.1
                ol
                    li 생략
                    li @Native static final int SO_REUSEPORT Since 9
                    |             여러 소켓이 같은 주소와 포트를 listen할 수 있는지 여부.
                    li @Native static final int SO_LINGER
                    |             TCP 소켓 linger-on-close timeout 설정. 0이면 즉시 강제 종료. 양수면 최대 65,535까지 종료 대기. 그 외엔 일반적인 종료 절차.
                    li @Native static final int SO_TIMEOUT
                    |             ServerSocket#accept, SocketInputStream#read, DatagramSocket#receive에 대한 timeout 설정. 사용하기 전에 미리 설정돼야 한다.
                    li @Native static final int SO_SNDBUF : 전송 버퍼 크기에 대한 힌트 + SO_RCVBUF
                    li @Native static final int SO_KEEPALIVE
                    |             TCP 연결에서 2시간(실제와 다를 수 있음) 동안 아무 교환이 없으면 keepalive probe를 보낸다. 응답이 ACK면 정상, RST면 상대가 리셋(리부트)되었으므로 연결 종료, 응답 없는 경우에도 연결 종료.
                    li @Native static final int SO_OOBINLINE
                    |             TCP 소켓에 설정되면 input stream을 통해 긴급 데이터(1바이트)를 받을 수 있다. 설정되지 않으면(기본) 버려진다.
                    li void setOption(int optID, Object value) + getOption
            details
                h2.marker class Socket implements Closeable Since 1.0
                ol
                    li
                        | TCP 클라이언트 소켓
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/net/SocketTest.java', lan: 'java'})
                details
                    h2.marker Constructor Detail
                    ol
                        li public Socket() Since 1.1
                        li public Socket(Proxy proxy) Since 1.5
                        li public Socket(String host, int port) + 1 오버로딩
                        li
                            | public Socket(String host, int port, InetAddress localAddr, int localPort) Since 1.1 + 1 오버로딩
                details
                    h2.marker Method Detail
                    ol
                        li void connect(SocketAddress endpoint, int timeout) Since 1.4 + 1 오버로딩
                        li void bind(SocketAddress bindpoint) Since 1.4
                        li void shutdownInput() Since 1.3 + shutdownOutput
                        li InetAddress getInetAddress() + getLocalAddress
                        li int getPort() + getLocalPort
                        li SocketAddress getRemoteSocketAddress() Since 1.4 + getLocalSocketAddress
                        li SocketChannel getChannel() Since 1.4
                        |                 SocketChannel#open 또는 ServerSocketChannel#accept로 생성된 경우에만 존재.
                        li InputStream getInputStream() + getOutputStream
                        li boolean isInputShutdown() Since 1.4 + isOutputShutdown
                        li boolean isConnected() Since 1.4 + isClosed, isBound
                        li &lt;T> Socket setOption(SocketOption&lt;T> name, T value) Since 9
                        li &lt;T> T getOption(SocketOption&lt;T> name) Since 9
                        li Set&lt;SocketOption&lt;?>> supportedOptions() Since 9
            details
                h2.marker class ServerSocket implements Closeable Since 1.0
                ol
                    li
                        | TCP 서버 소켓
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/net/SocketTest.java', lan: 'java'})
                details
                    h2.marker Constructor Detail
                    ol
                        li public ServerSocket()
                        li public ServerSocket(int port)
                        |                 port 0은 자동 할당. 들어오는 연결 큐의 크기는 50.
                        li public ServerSocket(int port, int backlog)
                        |                 port 0은 자동 할당. backlog는 연결 큐의 크기 설정.
                        li public ServerSocket(int port, int backlog, InetAddress bindAddr) Since 1.1
                details
                    h2.marker Method Detail
                    ol
                        li void bind(SocketAddress endpoint) Since 1.4 + 1 오버로딩
                        li InetAddress getInetAddress() + getLocalSocketAddress, getLocalPort
                        li Socket accept()
                        li ServerSocketChannel getChannel() Since 1.4
                        |                 ServerSocketChannel#open으로 생성된 경우에만 존재.
                        li boolean isBound() Since 1.4 + isClosed
                        li static void setSocketFactory(SocketImplFactory fac)
                        li
                            | void setPerformancePreferences(int connectionTime, int latency, int bandwidth) Since 1.5
                        li &lt;T> ServerSocket setOption(SocketOption&lt;T> name, T value) Since 9
                        li &lt;T> T getOption(SocketOption&lt;T> name) Since 9
                        li Set&lt;SocketOption&lt;?>> supportedOptions() Since 9
            details
                h2.marker class DatagramSocket implements Closeable Since 1.0
                ol
                    li UDP 소켓을 정의한다
                    li void send(DatagramPacket p)
                    li void receive(DatagramPacket p)
                    li void bind(SocketAddress addr) Since 1.4 + isBound
                    |             생성자에서 바인드하지 않은 경우, 이를 통해 바인드 가능.
                    li void connect(InetAddress address, int port) + 1 오버로딩 + disconnect, isConnected
                    |             기본적으로 UDP 데이터그램 소켓은 연결이 없다. 이 메서드로 원격지에 연결하는순간, 소켓은 해당 원격지와만 통신할 수 있다.
                    br
                    |             원격지와 연결하면 다음 메서드들이 동작한다. getInetAddress(), getPort(), getRemoteSocketAddress()
                    li boolean isClosed() Since 1.4
                    li SocketAddress getLocalSocketAddress() Since 1.4 + getLocalAddress, getLocalPort
                    li void setTrafficClass(int tc) Since 1.4 + getTrafficClass
                    ul
                        li 0&lt;=tc&lt;=255. IPv4에서, 하위 8개 비트를 IP 패킷의 TOS에 쓴다.
                        li IPv6에서, IP 헤더의 sin6_flowinfo 필드에 들어간다.
                        li RRC 1349의 TOS 값 정의
                        |                 IPTOS_LOWCOST(0x02), IPTOS_RELIABILITY(0x04), IPTOS_THROUGHPUT(0x08), IPTOS_LOWDELAY(0x10)
                    li DatagramChannel getChannel() Since 1.4
                    |             DatagramChannel#open으로 생성된 경우에만 존재.
                    li
                        | static void setDatagramSocketImplFactory(DatagramSocketImplFactory fac) Since 1.3
                    li
                        | &lt;T> DatagramSocket setOption(SocketOption&lt;T> name, T value) Since 9 + getOption, 각종 옵션 setter/getter
                    li Set&lt;SocketOption&lt;?>> supportedOptions() Since 9
            details
                h2.marker class MulticastSocket extends DatagramSocket Since 1.1
                ol
                    li 멀티캐스트 데이터그램 소켓을 제공한다.
                    li 멀티캐스트 그룹 ::= Class D IP 주소 + UDP 포트
                    |             Class D ::= (224.0.0.0, 239.255.255.255]
                    li 멀티캐스트 그룹에 데이터그램을 보내면 모든 구독자들이 받게 된다
                    |             멀티캐스트 그룹의 멤버가 아니라도 멀티캐스트 데이터그램을 보내는 것은 가능하다
                    li JavaDoc 예시
                    pre.
                        \nvar group = InetAddress.getByName("228.5.6.7");
                        var s = new MulticastSocket(6789);
                        s.joinGroup(group);
                        var msg = "hello".getBytes();
                        s.send(new DatagramPacket(msg, msg.length, group, 6789));
                        var buf = new byte[1000];
                        s.receive(new DatagramPacket(buf, buf.length));
                        s.leaveGroup(group);
            details
                h2.marker final class DatagramPacket Since 1.0
                ol
                    li UDP 패킷을 정의한다. 송신용 생성자는 byte[]와 길이 정보가 필요하고, 수신용 생성자는 주소 정보가 추가로 필요하다.
                    li 패킷 데이터, 길이, 주소 각각에 대한 getter/setter 제공
        hr
        details
            h2.marker URI
            details
                h2.marker final class URI implements Comparable&lt;URI>, Serializable Since 1.4
                details
                    h2.marker URI syntax and components
                    ol
                        li syntax : [scheme:]scheme-specific-part[#fragment]
                        li Absolute URI : 스킴을 명시한 URI
                        li Relative URI : Not absolute URI
                        li Opaque URI : scheme-specific-part가 '/'로 시작하지 않는 absolute URI
                        |                 예: "mailto:java-net@java.sun.com", "urn:isbn:096139210x"
                        li Hierarchical URI : scheme-specific-part가 '/'로 시작하는 absolute or relative URI
                        |                 [scheme:][//authority][path][?query][#fragment]
                        br
                        |                 예: "http://example.com/languages/java", "sample/a/index.html#28", "../../demo/b/index.html"
                        br
                        li Server-based authority : [user-info@]host[:port]
                        li Registry-based authority : not server-based authority
                details
                    h2.marker Operations on URI instances
                    ol
                        li Normalization : "."과 ".."을 제거
                        li Resolution : 상대 URI와 base URI를 이용해 단일 URI를 찾는 작업
                        li Relativization : Resolution의 역.
                        |                 임의의 정규화된 두 URI u, v에 대하여, u.relativize(u.resolve(v)).equals(v)와 u.resolve(u.relativize(v)).equals(v)는 항상 성립한다.
                details
                    h2.marker Constructor Detail
                    ol
                        li public URI(String str)
                        li
                            | public URI(String scheme, String userInfo, String host, int port, String path, String query, String fragment)
                        li
                            | public URI(String scheme, String authority, String path, String query, String fragment)
                        li public URI(String scheme, String host, String path, String fragment)
                        li
                            | public URI(String scheme, String ssp, String fragment) // ssp : scheme-specific-part
                details
                    h2.marker Method Detail
                    ol
                        li static URI create(String str)
                        li URI parseServerAuthority()
                        li URI normalize()
                        li URI resolve(URI uri) + 1 오버로딩
                        li URI relativize(URI uri)
                        li URL toURL()
                        li String getScheme() + getRawSchemeSpecificPart, getSchemeSpecificPart, ...
                        li boolean isAbsolute() + isOpaque
                        li String toASCIIString() : URI를 US_ASCII 문자열로 반환.
            details
                h2.marker final class URL implements Serializable Since 1.0
                ol
                    li 인스턴스 생성 시, URI와 다르게 정의된 scheme에 대한 핸들러를 찾기 때문에, 핸들러를 찾지 못하면 예외가 발생한다
                details
                    h2.marker Constructor Detail
                    ol
                        li public URL(String spec)
                        li public URL(String protocol, String host, int port, String file) + 2 오버로딩
                        li public URL(URL context, String spec) + 1 오버로딩
                details
                    h2.marker Method Detail
                    ol
                        li String getQuery() + getPath, getUserInfo, ...
                        li boolean sameFile(URL other) : fragment(#) 제외하고 같은 파일인지 여부
                        li URI toURI() Since 1.5
                        li
                            | URLConnection openConnection() Since 1.5 + 1 오버로딩
                            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/net/HttpURLConnectionTest.java', lan: 'java'})
                        li final InputStream openStream() == openConnection().getInputStream()
                        li final Object getContent() + 1 오버로딩 == openConnection().getContent()
            details
                h2.marker class URLDecoder Since 1.2
                ol
                    li static String decode(String s, String enc) Since 1.4
                    li static String decode(String s, Charset charset) Since 10
            details
                h2.marker class URLEncoder Since 1.0
                ol
                    li static String encode(String s, String enc) Since 1.4
                    li static String encode(String s, Charset charset) Since 10
            details
                h2.marker class URLClassLoader extends SecureClassLoader implements Closeable Since 1.2
                ol
                    li URL을 이용한 클래스 로더를 제공한다
                    li public URLClassLoader(URL[] urls) + 4 오버로딩
        hr
        details
            h2.marker final class NetworkInterface Since 1.4
            ol
                li
                    | 이름과 할당된 IP 주소들로 구성된 Network Interface 표현.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/net/NetworkInterfaceTest.java', lan: 'java'})
                li
                    | static Stream&lt;NetworkInterface> networkInterfaces() Since 9 + getNetworkInterfaces
                li
                    | static NetworkInterface getByIndex(int index) Since 1.7 + getByName, getByInetAddress
                li String getName() + getDisplayName
                li int getIndex() Since 1.7 : -1 for unknown
                li Stream&lt;InetAdress> inetAddresses() Since 9 + getInetAddresses
                li List&lt;InterfaceAddress> getInterfaceAddresses() Since 1.6
                li Stream&lt;NetworkInterface> subInterfaces() Since 9 + getSubInterfaces
                |         subinterface = vertual interface
                li NetworkInterface getParent() Since 1.6
                li byte[] getHardwareAddress() Since 1.6 : 보통 MAC 주소
                li boolean isUp() Since 1.6
                |         Returns whether a network interface is up and running
                li boolean isLoopback() Since 1.6
                li boolean isPointToPoint() Since 1.6
                li boolean supportsMulticast() Since 1.6
                li int getMTU() Since 1.6
                li boolean isVirtual() Since 1.6
        hr


    h1.marker java.nio Since 1.4
        details
            h2.marker 버퍼 관련
            details
                h2.marker abstract class Buffer Since 1.4
                ol
                    li 버퍼는 일련의 유한한 기본 자료형 원소들의 나열.
                    ul
                        li Capacity : 저장하고 있는 원소들의 개수
                        li Limit : 읽거나 쓸 수 없는 최초의 인덱스. 0보다 작거나 capacity보다 클 수 없다.
                        li Position : 다음에 읽거나 쓸 대상의 인덱스. 0보다 작거나 limit보다 클 수 없다.
                        li 0&lt;=mark&lt;=position&lt;=limit&lt;=capacity // 마킹은 지원되지 않을수도 있다.
                    li get/put 연산의 Relative/Absolute 구분
                    ul
                        li Relative : 버퍼의 현재 Position에 대한 연산
                        li Absolute : 버퍼의 특정 위치를 지정한 연산
                    li Additional operations
                    ul
                        li clear() : 새로운 채널-읽기 또는 relative put 연산을 준비; limit을 capacity로, position을 0으로.
                        li flip() : 새로운 채널-쓰기 또는 relative get 연산을 준비; limit을 position으로, position을 0으로.
                        li rewind() : 이미 읽은 것을 다시 읽도록; limit은 그대로, position을 0으로.
                        li slice() : 기존 버퍼의 부분 시퀀스 생성.
                        li duplicate() : 기존 버퍼의 얕은 복사본 생성.
                details
                    h2.marker Method Detail
                    ol
                        li final int capacity() + position, limit
                        li Buffer position(int newPosition)
                        li Buffer limit(int newLimit)
                        li Buffer mark() + reset
                        li Buffer clear() + flip, rewind
                        li final int remaining() + hasRemaining
                        li abstract boolean isReadOnly()
                        li abstract boolean hasArray() Since 1.6
                        |                 기저 배열의 존재 유무. true면 array()와 arrayOffset() 사용가능
                        li abstract Object array() Since 1.6
                        li abstract int arrayOffset() Since 1.6
                        li abstract boolean isDirect() Since 1.6
                        |                 Direct 버퍼인지 여부
                        li abstract Buffer slice() Since 9
                        |                 현재 버퍼의 현재 위치부터 시작하는 부분 버퍼 생성(내용 공유). direct, read-only 속성을 공유.
                        li abstract Buffer duplicate() Since 9
                        |                 복사본(내용 공유) 반환.
            details
                h2.marker
                    | abstract class ByteBuffer extends Buffer implements Comparable&lt;ByteBuffer> Since 1.4
                ol
                    li 다음 연산을 정의.
                    ul
                        li 바이트 하나에 대한 absolute/relative get/put
                        li 바이트 시퀀스에 대한 bulk get/put
                        li 다른 원시 타입에 대한 absolute/relative get/put
                        li 다른 원시 타입으로 읽기 가능한 view 버퍼 생성
                        li compact : 인덱스 [0, position) 사이의 데이터가 버려진다(Optional operation)
                    li Direct 버퍼
                    |             읽기/쓰기 연산이 직접적으로 이루어지며, 별개의 복사본을 이용하는 non-direct 버퍼에 비해 할당/제거 비용이 크다. Direct 버퍼는 allocateDirect 팩토리 메서드로 생성된다.
                    li Access to binary data
                    |             버퍼의 byte order는 해당 버퍼에 대한 연산의 기준이 된다. 기본값은 ByteOrder.BIG_ENDIAN.
                    li 인덱싱
                    |             ByteBuffer인덱스를 지정하는 absolute get/put의 인덱스는 바이트 단위다. 뷰 버퍼의 인덱스는 해당 타입 크기 단위다.
                details
                    h2.marker Method Detail
                    ol
                        li
                            | static ByteBuffer allocateDirect(int capacity)
                            br
                            |                     static ByteBuffer allocate(int capacity)
                            br
                            |                     static ByteBuffer wrap(byte[] array, int offset, int length) + 오버로딩
                        li abstract ByteBuffer asReadOnlyBuffer()
                        li abstract ByteBuffer compact() : 위 설명 참고
                        li
                            | abstract byte get(int index) + 오버로딩 + put
                            br
                            |                     ByteBuffer get(byte[] dst, int offset, int length) + 오버로딩 + put
                            br
                            |                     ByteBuffer put(ByteBuffer src)
                        li
                            | abstract char getChar(int index) + 오버로딩 + putChar
                            br
                            |                     abstract CharBuffer asCharBuffer()
                        |                 + short, int, long, float, double
                        li final ByteBuffer order(ByteOrder bo) + getter 오버로딩
                        li final int alignmentOffset(int index, int unitSize) Since 9
                        |                 index % unitSize를 반환한다. 0이 아니면 unitSize 단위로 자르기 부적합하다는 의미. unitSize는 2의 거듭제곱이어야 한다.
                        li final ByteBuffer alignedSlice(int unitSize) Since 9
                        |                 현재 버퍼를 unitSize 크기씩 잘라 view 버퍼를 생성(BIG_ENDIAN)한다.
                        |                 현재 위치가 unitSize의 배수가 아니라면 바로 다음 배수 위치부터 포함하며, limit도 unitSize 배수에 맞춰 끊는다.
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/nio/ByteBufferExample.java', lan: 'java'})
                        li int mismatch(ByteBuffer that) Since 11
                        |                 두 바이트 버퍼의 현재 읽기 위치들을 시작 위치로 하여, 바이트 값이 다른 최초 index를 반환한다.
            details
                h2.marker abstract class MappedByteBuffer extends ByteBuffer Since 1.4
                ol
                    li
                        | FileChannel#map 메서드로 생성되는 direct 바이트 버퍼. 기저 파일이 (외부에서) 변경되면 버퍼 내용도 변경된다; vice versa
                    li final BappedByteBuffer load() + isLoaded
                    |             파일 내용을 메모리에 적재한다
                    li final MappedByteBuffer force()
                    |             강제로 버퍼 변경 내용을 파일에 쓴다.
            details
                h2.marker
                    | abstract class CharBuffer extends Buffer implements Comparable&lt;CharBuffer>, Appendable, CharSequence, Readable Since 1.4
                ol
                    li + ShortBuffer, DoubleBuffer
                    li 다음 연산을 정의
                    ul
                        li 단일 char에 대한 absolute/relative get/put
                        li char 시퀀스에 대한 bulk get/set
                        li compact : ByteBuffer의 설명과 동일
                details
                    h2.marker Method Detail
                    ol
                        li
                            | static CharBuffer allocate(int capacity)
                            br
                            |                     static CharBuffer wrap(char[] array, int offset, int length) + 오버로딩
                            br
                            |                     static CharBuffer wrap(CharSequence csq, int start, int end) + 오버로딩
                        li abstract CharBuffer asReadOnlyBuffer()
                        li abstract CharBuffer compact()
                        li
                            | abstract char get(int index) + 오버로딩 + put
                            br
                            |                     CharBuffer get(char[] dst, int offset, int length) + 오버로딩 + put
                            br
                            |                     CharBuffer put(CharBuffer src)
                            br
                            |                     CharBuffer put(String src, int start, int end) + 오버로딩
                        li abstract ByteOrder order()
                        li int mismatch(CharBuffer that) Since 11 : ByteBuffer의 설명과 동일
        hr
        details
            h2.marker final class ByteOrder Since 1.4
            ol
                li public static final ByteOrder BIG_ENDIAN, LITTLE_ENDIAN
                li static ByteOrder nativeOrder()
        hr


    h1.marker java.nio.channels Since 1.4
        details
            h2.marker 채널 인터페이스
            details
                h2.marker interface Channel extends Closeable Since 1.4
                |         boolean isOpen(); 채널이란 독립적인 IO를 수행할 수 있는 개체에 대한 연결이다.
            details
                h2.marker interface ReadableByteChannel extends Channel Since 1.4
                |         int read(ByteBuffer dst) : dst.remaining()만큼 읽어 dst에 저장. 읽은 바이트 개수를 반환. 스트림의 끝이면 -1.
            details
                h2.marker interface WritableByteChannel extends Channel Since 1.4
                |         int write(ByteBuffer src) : src.remaining() 부분을 채널에 쓴다.
            details
                h2.marker interface ByteChannel extends ReadableByteChannel, WritableByteChannel Since 1.4
                |         바이트 단위 읽기/쓰기 모두 가능한 채널.
            details
                h2.marker interface AsynchronousChannel extends Channel Since 1.7
                |         비동기 I/O를 지원하는 채널. close()도 비동기적으로 수행되며, 도중/이후 작업은 AsynchronousCloseException 발생시키면 된다
            details
                h2.marker interface InterruptibleChannel extends Channel Since 1.4
                |         "instanceof InterruptibleChannel" IFF "비동기적으로 close() 메서드를 통해 인터럽트되고 닫을 수 있는 채널"
            details
                h2.marker interface AsynchronousByteChannel extends AsynchronousChannel Since 1.7
                ol
                    li 비동기 IO를 지원하는 바이트 채널
                    li
                        | &lt;A> void read(ByteBuffer dst, A attachment, CompletionHandler&lt;Integer, ? super A> handler)
                    |             기본 동작은 ReadableByteChannel#read와 동일. 쓰기가 완료(실패)되면 handler가 호출된다. handler에 전달될 첫 인자는 읽은 바이트 수.
                    li Future&lt;Integer> read(ByteBuffer dst)
                    |             반환된 Future#get 메서드로 읽은 바이트 수를 얻을 수 있다.
                    li
                        | &lt;A> void write(ByteBuffer src, A attachment, CompletionHandler&lt;Integer, ? super A> handler)
                    li Future&lt;Integer> write(ByteBuffer src)
            details
                h2.marker interface ScatteringByteChannel extends ReadableByteChannel Since 1.4
                |         채널의 바이트들을 여러 버퍼에 순서대로 저장. 네트워크 헤더나 파일 메타데이터처럼 고정 길이의 헤더를 읽는 데 유용.
                br
                |         long read(ByteBuffer[] dsts, int offset, int length) : dsts[offset]부터 length개의 버퍼가 각각의 remaining()만큼씩 바이트를 읽어 가져간다.
            details
                h2.marker interface GatheringByteChannel extends WritableByteChannel Since 1.4
                |         long write(ByteBuffer[] srcs, int offset, int length) : srcs[offset]부터 length개의 버퍼의 remaining() 부분을 채널에 쓴다.
            details
                h2.marker interface SeekableByteChannel extends ByteChannel Since 1.7
                ol
                    li 현재 위치를 기억하는 바이트 채널.
                    li SeekableByteChannel position(long newPosition) + getter 오버로딩
                    |             position을 변경하고 그대로 반환.
                    li long size() : 채널에 연결된 개체의 크기 반환
                    li SeekableByteChannel truncate(long size)
                    |             채널에 연결된 개체의 크기를 size로 조정. size가 현재보다 작은 경우 나머지는 버려진다(position이 size보다 큰 경우 size로 조정된다). size가 현재 이상인 경우 아무 변경 없다.
            details
                h2.marker interface NetworkChannel extends Channel Since 1.7
                ol
                    li 네트워크 소켓에 대한 채널
                    li NetworkChannel bind(SocketAddress local)
                    li SocketAddress getLocalAddress()
                    li &lt;T> NetworkChannel setOption(SocketOption&lt;T> name, T value) + getOption
                    li Set&lt;SocketOption&lt;?>> supportedOptions()
            details
                h2.marker interface MulticastChannel extends NetworkChannel Since 1.7
                ol
                    li IP 계층 멀티캐스팅 가능한 채널
                    li MembershipKey join(InetAddress group, NetworkInterface interf)
                    li
                        | MembershipKey join(InetAddress group, NetworkInterface interf, InetAddress source)
                    |             source에서 온 데이터그램만 받고자 하는 경우 사용. OS에서 소스 필터링을 지원하지 않으면 예외 발생.
        hr
        details
            h2.marker 비동기 채널 관련
            details
                h2.marker interface CompletionHandler&lt;V, A> Since 1.7
                ol
                    li 비동기 I/O 작업의 결과를 소비하는 소비자
                    li void completed(V result, A attachment) : 성공시 호출된다
                    li void failed(Throwable exc, A attachment) : 실패시 호출된다
            details
                h2.marker abstract class AsynchronousChannelGroup Since 1.7
                ol
                    li 그룹 지정되지 않은 비동기 채널들은 시스템 기본 그룹에 묶인다
                    |             시스템 속성에 따라 생성된 ThreadFactory가 비동기 작업을 실행할 데몬 스레드들을 만든다.
                    li
                        | static AsynchronousChannelGroup withFixedThreadPool(int nThreads, ThreadFactory threadFactory)
                    |             최대 nThreads의 스레드만 동시에 실행된다. 시스템 기본 AsynchronousChannelProvider 객체의 openAsynchronousChannelGroup(int, ThreadFactory) 메서드를 통해 만들어진다
                    li
                        | static AsynchronousChannelGroup withCachedThreadPool(ExecutorService executor, int initialSize) + 오버로딩
                    |             시스템 기본 AsynchronousChannelProvider 객체의 openAsynchronousChannelGroup(ExecutorService, int) 메서드를 통해 만들어진다.
                    br
                    |             채널 그룹의 종료(shutdown)는 ExecutorService의 shutdown()으로 이어진다. 따라서 ExecutorService가 외부에서 닫히는 경우엔 무슨 일이 일어날 지 모른다
                    li abstract boolean isShutdown() + isTerminated
                    li abstract void shutdown()
                    |             순차적 종료 절차에 진입한다.
                    li abstract void shutdownNow()
                    |             shutdown() + 모든 열린 채널들을 닫는다. 실행 중인 CompletionHandler들은 끝날 때까지 기다린다. 도중에 다른 스레드에서 이 메서드를 호출하는 경우, 현재 작업이 완료될 때까지 블록된다; 더 불러도 추가 작업은 없다.
                    li abstract boolean awaitTermination(long timeout, TimeUnit unit)
            details
                h2.marker abstract class AsynchronousFileChannel implements AsynchronousChannel Since 1.7
                ol
                    li 파일에 대한 비동기 채널. I/O의 기준이 되는 현재 위치를 갖고 있지 않으며, 메서드에서 지정한다
                    li 생성된 채널들은 스레드-안전하며, 완료 핸들러들은 별개의 스레드에서 실행됨이 보장된다.
                    |             연산에 사용되는 ByteBuffer 자체는 스레드-안전하지 않음에 유의
                    li
                        | static AsynchronousFileChannel open(Path file, Set&lt;? extends OpenOption> options, ExecutorService executor, FileAttribute&lt;?>... attrs)
                    |             파일을 열거나 생성한 뒤 비동기 채널을 하나 반환한다. options에는 java.nio.file.StandardOpenOption을 이용하면 된다.
                    li static AsynchronousFileChannel open(Path file, OpenOptions... options)
                    |             open(file, opts, null, new FileAttribute&lt;?>[0])
                    li abstract long size() : 기저 파일의 크기
                    li abstract AsynchronousFileChannel truncate(long size)
                    |             size() > size인 경우 파일을 자른다. return this;
                    li abstract void force(boolean metaData)
                    |             메서드 호출 시점부터 true면 StandardOpenOption.SYNC를, false면 StandardOpenOption.DSYNC를 적용하는 것과 같다. 기저 파일이 로컬에 존재하는 경우에만 유효하다.
                    li
                        | abstract &lt;A> void lock(long position, long size, boolean shared, A attachment, CompletionHandler&lt;FileLock, ? super A> handler)
                    |             기저 파일 일부에 대한 잠금을 얻는다. handler는 잠금을 얻는 데 성공/실패하면 호출된다. 잠금 size는 고정이므로, 파일 크기가 커질 것도 고려하여 필요한 만큼 신청해놔야 한다.
                    li
                        | final &lt;A> void lock(A attachment, CompletionHandler&lt;FileLock, ? super A> handler)
                    |             lock(0L, Long.MAX_VALUE, false, attachment, handler)
                    li abstract Future&lt;FileLock> lock(long position, long size, boolean shared) + 오버로딩
                    li abstract FileLock tryLock(long position, long size, boolean shared) + 오버로딩
                    |             스레드를 블록하지 않는다. OverlappingFileLockException에 해당하는 상황에는 null이 반환된다
                    li
                        | abstract &lt;A> void read(ByteBuffer dst, long position, A attachment, CompletionHandler&lt;Integer, ? super A> handler) + 오버로딩
                    |             handler에 전달되는 Integer는 읽은 바이트 길이, 또는 -1(position > size())
                    li
                        | abstract &lt;A> void write(ByteBuffer src, long position, A attachment, CompletionHandler&lt;Integer, ? super A> handler) + 오버로딩
                    |             position > size()인 경우, 그 사이 바이트 값은 쓰레기 값이다.
            details
                h2.marker
                    | abstract class AsynchronousServerSocketChannel implements AsynchronousChannel, NetworkChannel Since 1.7
                ol
                    li
                        | 스트림 지향 읽기 소켓 채널
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/nio/AsynchronousSocketChannelTest.java', lan: 'java'})
                    li 스레드-안전하지만 최대 accept 가능한 스레드는 하나 뿐이며, accept 도중 중복되는 요청은 AcceptPendingException
                    li 지원하는 소켓 옵션 : SO_RCVBUF(수신 버퍼 크기), SO_REUSEADDR(주소 재사용); 구현에 따라 추가될 수도 있다
                    li
                        | static AsynchronousServerSocketChannel open(AsynchronousChannelGroup group) + 오버로딩
                    |             group을 지정하지 않거나 null로 설정하는 경우 시스템 기본 그룹이 이용된다
                    li
                        | final AsynchronousServerSocketChannel bind(SocketAddress local, int backlog) + 오버로딩 + getLocalAddress
                    |             backlog는 소켓에 대한 최대 pending connection 수. 0이나 음수로 설정하면 구현체의 기본값을 이용한다. return this;
                    li
                        | abstract &lt;A> void accept(A attachment, CompletionHandler&lt;AsynchronousSocketChannel, ? super A> handler) + 오버로딩
                    |             신규 연결된 AsynchronousSocketChannel은 현재 채널과 동일한 채널 그룹에 묶인다. 그룹이 닫힌 경우, 신규 연결도 닫히고 ShutdownChannelGroupException
            details
                h2.marker
                    | abstract class AsynchronousSocketChannel implements AsynchronousByteChannel, NetworkChannel Since 1.7
                ol
                    li
                        | 스트림 지향 소켓 채널. open 팩터리 메서드로 직접 열거나(Unbound), AsynchronousServerSocketChannel#accept로 열 수(Bound) 있다.
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/nio/AsynchronousSocketChannelTest.java', lan: 'java'})
                    li 스레드-안전하지만 최대 하나의 읽기/쓰기만 각각 동시에 존재할 수 있다.
                    |             도중에 중복되는 요청은 각각 ReadPendingException, WritePendinException 발생
                    li
                        | 지원하는 소켓 옵션 : SO_SNDBUF(전송 버퍼 크기), SO_RCVBUF(수신 버퍼 크기), SO_KEEPALIVE(기본 false, keep-alive 작동은 구현체에 의존적이다), TCP_NODELAY(Nagle 알고리즘 비활성)
                    li
                        | 읽기/쓰기 시 양수의 타임아웃을 지정한 경우, 시간 내에 완료되지 못하면 InterruptedByTimeoutException으로 종료되고, 이후 상태는 비결정적이며, 따라서 사용된 채널, 버퍼들은 버리는 게 낫다
                    li static AsynchronousSocketChannel open(AsynchronousChannelGroup group) + 오버로딩
                    |             group이 지정되지 않거나 null인 경우, 시스템 기본 그룹이 이용된다
                    li abstract AsynchronousSocketChannel shutdownInput()
                    |             채널을 더 이상 읽을 수 없게 한다. 이후의 읽기는 모두 -1을 반환한다. return this;
                    li abstract AsynchronousSocketChannel shutdownOutput()
                    |             채널을 더 이상 쓸 수 없게 한다. 이후의 쓰기는 모두 ClosedChannelException ─ 읽기는 가능할 수 있다 ─ 으로 종료된다.
                    li
                        | abstract &lt;A> void connect(SocketAddress remote, A attachment, CompletionHandler&lt;Void, ? super A> handler) + 오버로딩
                    li
                        | abstract &lt;A> void read(ByteBuffer dst, long timeout, TimeUnit unit, A attachment, CompletionHandler&lt;Integer, ? super A> handler) + 오버로딩
                    |             ScatteringByteChannel#read와 유사한 메서드도 지원한다
                    li
                        | abstract &lt;A> void write(ByteBuffer src, long timeout, TimeUnit unit, A attachment, CompletionHandler&lt;Integer, ? super A> handler) + 오버로딩
                    |             GatheringByteChannel#write와 유사한 메서드도 지원한다
                    li abstract SocketAddress getRemoteAddress() + getLocalAddress
        hr
        details
            h2.marker 채널 클래스
            details
                h2.marker final class Channels Since 1.4
                ol
                    li 채널과 스트림에 관한 유틸리티 클래스.
                    li static InputStream newInputStream(ReadableByteChannel ch)
                    |             채널이 논-블로킹 모드면 읽기 시 예외 발생. 버퍼링, mark/reset 미지원. 스레드-안전. 닫으면 채널도 닫힌다
                    li static OutputStream newOutputStream(WritableByteChannel ch)
                    |             채널이 논-블로킹 모드면 쓰기 시 예외 발생. 버퍼링 미지원. 스레드-안전. 닫으면 채널도 닫힌다
                    li static InputStream newInputStream(AsynchronousByteChannel ch) Since 1.7
                    |             버퍼링, mark/reset 미지원. 스레드-안전. 닫으면 채널도 닫힌다
                    li static OutputStream newOutputStream(AsynchronousByteChannel ch) Since 1.7
                    |             버퍼링 미지원. 스레드-안전. 닫으면 채널도 닫힌다
                    li static ReadableByteChannel newChannel(InputStream in)
                    |             버퍼링 미지원. 닫으면 스트림도 닫힌다
                    li static WritableByteChannel newChannel(OutputStream out)
                    |             버퍼링 미지원. 닫으면 스트림도 닫힌다
                    li static Reader newReader(ReadableByteChannel ch, Charset charset) + 오버로딩
                    |             채널이 논-블로킹 모드면 읽기 시 예외 발생. 버퍼링 지원. mark/reset 미지원. 닫으면 채널도 닫힌다
                    li static Writer newWriter(WritableByteChannel ch, Charset charset) + 오버로딩
                    |             채널이 논-블로킹 모드면 쓰기 시 예외 발생. 버퍼링 지원. 닫으면 채널도 닫힌다
            details
                h2.marker
                    | abstract class FileChannel extends AbstractInterruptibleChannel implements SeekableByteChannel, GatheringByteChannel, ScatteringByteChannel Since 1.4
                ol
                    li
                        | static FileChannel open(Path path, Set&lt;? extends OpenOption> options, FileAttribute&lt;?>... attrs) Since 1.7 + 오버로딩
                    li abstract void force(boolean metaData)
                    |             메서드 호출 시점부터 true면 StandardOpenOption.SYNC를, false면 StandardOpenOption.DSYNC를 적용하는 것과 같다. 기저 파일이 로컬에 존재하는 경우에만 유효하다.
                    li
                        | abstract long transferTo(long position, long count, WritableByteChannel target) + transferFrom
                    li abstract int read(ByteBuffer dst, long position) + write
                    li
                        | abstract MappedByteBuffer map(FileChannel.MapMode mode, long position, long size)
                    |             매핑 : 파일의 일부분을 메모리에 올려놓고 작업. 큰 파일은 이쪽이 효율이 좋다
                    br
                    |             READ_ONLY : 변경 불가, READ_WHITE : 변경이 기저 파일에 전파, PRIVATE : 변경이 전파되지 않음
                    li
                        | abstract FileLock lock(long position, long size, boolean shared) + 오버로딩 + tryLock
            details
                h2.marker
                    | abstract class ServerSocketChannel extends AbstractSelectableChannel implements NetworkChannel Since 1.4
                ol
                    li 스트림-지향 읽기 소켓 채널. AsynchronousServerSocketChannel 참고.
                    li static ServerSocketChannel open()
                    li
                        | final ServerSocketChannel bind(SocketAddress local) Since 1.7 + 오버로딩 + getLocalAddress
                    li abstract ServerSocket socket()
                    li abstract SocketChannel accept()
            details
                h2.marker
                    | abstract class SocketChannel extends AbstractSelectableChannel implements ByteChannel, ScatteringByteChannel, GatheringByteChannel, NetworkChannel Since 1.4
                ol
                    li 스트림-지향 소켓 채널. AsynchronousSocketChannel 참고.
                    li static SocketChannel open() + 오버로딩
                    li
                        | abstract boolean connect(SocketAddress remote) + isConnected, isConnectionPending, getRemoteAddress
                    li.abstract(boolean='', finishconnect()='', &lt;li='')
                        | abstract SocketChannel shutdownInput() Since 1.7 + shutdownOutput
                        li abstract Socket socket()
            details
                h2.marker
                    | abstract class DatagramChannel extends AbstractSelectableChannel implements ByteChannel, ScatteringByteChannel, GatheringByteChannel, MulticastChannel Since 1.4
                ol
                    li 데이터그램-지향 소켓 채널
                    li 기존 데이터그램 소켓에서 채널을 얻는 방법은 없으며, open 팩터리 메서드로 획득해야 한다
                    li send/receive 메서드는 연결없이 사용할 수 있지만, read/write 메서드는 connect 메서드를 통해 연결해야 이용할 수 있다
                    |             연결된 경우, 송/수신에 불필요한 보안 체크를 하지 않는다
                    li
                        | 지원하는 소켓 옵션 : SO_SNDBUF, SO_RCVBUF, SO_REUSEADDR, SO_BROADCAST, IP_TOS, IP_MULTICAST_IF, IP_MULTICAST_TTL, IP_MULTICAST_LOOP
                    li static DatagramChannel open() + 오버로딩
                    |             IP 멀티캐스팅에 이용하려는 경우, 멀티캐스트 그룹 타입을 ProtocolFamily에 지정해줘야 한다
                    li abstract DatagramSocket socket()
                    li
                        | abstract DatagramChannel connect(SocketAddress remote) + isConnected, disconnect, getRemoteAddress
                    li abstract SocketAddress receive(ByteBuffer dst)
                    li abstract int send(ByteBuffer src, SocketAddress target)
            details
                h2.marker
                    | abstract class SelectableChannel extends AbstractInterruptibleChannel implements Channel Since 1.4
                ol
                    li 스레드-안전. Selector를 통해 멀티플렉싱될 수 있는 채널을 정의한다
                    li Selector에 등록함으로써 SelectionKey가 발행된다. 나가는 건 마음대로 할 수 없다.
                    |             채널이 닫히면 채널에 대한 모든 SelectionKey들은 cancel된다
                    li 각 Selector에는 최대 한 번씩만 등록할 수 있다. Selector가 닫히면 등록된 모든 채널이 내려가고, 각 키들은 즉시 무효하게 된다
                    li Non-blocking mode
                    |             새로 생성된 SelectableChannel은 블로킹 모드지만, configureBlocking(boolean) 메서드로 모드를 변경할 수 있다. 이 경우, Selector에 등록하기 전에 논-블로킹으로 설정해야 하며, 한 번 등록되면 등록 취소되기 전까지 논-블로킹 모드로 작동한다
                    br
                    |             논-블로킹 모드에서는 I/O 연산이 절대 블로킹되지 않지만, 요청보다 적은 데이터가 보내지거나 아예 전송되지 않을 수 있다.
                details
                    h2.marker Method Detail
                    ol
                        li abstract SelectorProvider provider()
                        |                 이 채널을 생성한 provider를 반환한다
                        li abstract int validOps()
                        li abstract SelectionKey register(Selector sel, int ops) + 오버로딩 + isRegistered
                        li abstract SelectionKey keyFor(Selector sel)
                        li abstract SelectableChannel configureBlocking(boolean block) + isBlocking
                        |                 이미 어느 Selector에 등록된 채널이라면 논-블로킹 설정 시 IllegalBlockingModeException 발생
                        li abstract Object blockingLock()
                        |                 configureBlocking, register 메서드에서 동기화에 이용되는 객체를 반환한다
        hr
        details
            h2.marker abstract class Pipe Since 1.4
            ol
                li 2개 채널로 이루어진 단방향 파이프를 정의한다
                |         SinkChannel : 쓰기 전용, SourceChannel : 읽기 전용
                li static Pipe open()
                li abstract Pipe.SourceChannel source() + sink
        hr
        details
            h2.marker abstract class FileLock implements AutoCloseable Since 1.4
            ol
                li Adivisory Lock : 응용 프로그램이 잠금을 직접 확인하고, 알아서 읽기/쓰기를 수행할 지 결정한다.
                li Mandatory Lock : 커널이 잠금을 관리하기 때문에, 관련되지 않은 프로세스는 접근 불가
                |         모든 잠금을 Adivisory Lock으로 간주하여 관리함이 바람직하다
                li On some systems, 잠금의 존재로 인해 매핑(FileChannel#map)이 불가능할 수 있음에 유의
                li On some systems, 채널을 닫으면 해당 파일에 대한 모든 잠금이 해제될 수 있음에 유의
                li Some network filesystems, 잠금 영역 크기가 하드웨어 페이지 크기의 배수인 경우에만 매핑을 지원함에 유의
                li Some network filesystems, 2^30 또는 2^31 이상 크기에 대한 잠금을 지원하지 않음에 유의
                li final FileChannel channel()
                li final Channel acquiredBy() Since 1.7
                li final long position() + size, isShared, isValid
                li final boolean overlaps(long position, long size)
                li abstract void release() + close
        hr
        details
            h2.marker abstract class MembershipKey Since 1.7
            ol
                li IP 멀티캐스트 그룹에 대한 멤버십을 표현한다
                li abstract boolean isValid()
                li abstract void drop()
                li abstract InetAddress group()
                li abstract MulticastChannel channel()
                |         이 멤버십 키를 생성한 채널을 반환한다.
                li abstract InetAddress sourceAddress()
                |         특정 소스의 데이터그램만 수신하는 멤버십(Source-specific membership key)인 경우, 유효한 주소를 반환한다
                li abstract MembershipKey block(InetAddress source) + unblock
                |         OS가 소스 필터링을 적용하지만, 적용되지 않은 멤버십에 대하여 이를 호출하면 특정 소스를 차단할 수 있다
                li abstract NetworkInterface networkInterface()
        hr
        details
            h2.marker abstract class Selector implements Closeable
            ol
                li SelectableChannel에 대한 멀티플렉서. 스레드-안전
                li SelectableChannel을 등록하면 SelectionKey가 발행되며, 3가지 집합으로 관리된다
                ul
                    li
                        | Key set : 현재 등록된 채널들에 관한 키. SelectableChannel#register 메서드로 등록. Selector#keys 메서드로 획득.
                    li
                        | Selected-key set : 선택 연산에 의해, 최소 하나의 연산에 대해 ready 상태로 파악된 키. 자동 등록(수동 삭제만 가능). selectedKeys 메서드로 획득
                    li Cancelled-key set : 취소되었지만 채널은 아직 등록되어 있는 키
                li 선택 연산에는 2가지 종류가 있다
                ul
                    li
                        | select(), select(long), selectNow() : 지정된 연산에 대해 준비된 상태인지 확인하여 selected-key set 업데이트
                    ol
                        li
                            | Cancelled-key set의 멤버들에 대해, 키 집합에서 제거하고 채널을 등록 취소한다. 결과적으로 cancelled-key set은 비게 된다.
                        |                 아래 작업 중 Cacelled-key set에 추가된 키들에 대해서도 추가로 작업한다
                        li
                            | Selected-key set에 없는 키에 대해, 키의 interest set의 연산 중 하나라도 준비되었다면 selected-key set으로 추가되고, 키의 ready set이 설정된다
                        li Selected-key set에 있는 키에 대해, 키의 ready set 외의 연산 중 준비된 것들은 ready set으로 추가된다
                    li
                        | select(Consumer), select(Consumer, long), selectNow(Consumer) : 준비된 채널들에 대해 작업 실행. selected-key set을 업데이트하지 않음
                    ol
                        li Cancelled-key set의 멤버들에 대한 작업은 전과 같다
                        |                 마찬가지로 아래 작업 중 Cacelled-key set에 추가된 키들에 대해서도 추가로 작업한다
                        li
                            | 키의 ready set이 최소 하나의 연산에 대해 준비되었다면, ready set은 준비된 연산들로만 설정되고, 주어진 Consumer가 키를 소비한다.
                        |                 키의 ready set이 2개 이상의 연산에 대해 준비되었다면, Consumer는 여러 번 호출될 수 있다. Consumer를 호출하기 전에 ready set에서 해당 연산을 빼기 때문에, 한 번의 선택 연산에서 같은 연산에 대해 2번 호출되지 않는다.
                li 선택 연산에서 사용되는 키의 interest set은 연산의 시작 시점의 것으로, 중간에 변경됐다면 다음 선택 연산에 적용된다
                li 키와 채널은 언제든 닫힐 수 있으므로, 사용 시 다른 스레드에서 키나 채널을 닫는지 유의해야 한다
            details
                h2.marker Method Detail
                ol
                    li static Selector open() + isOpen
                    li abstract SelectorProvider provider()
                    li abstract Set&lt;SelectionKey> keys() + selectedKeys
                    li abstract int selectNow()
                    |             논-블로킹으로 선택한다. 선택 연산으로 ready set이 업데이트된 키의 수를 반환한다. 이전 wakeup()의 영향을 제거한다
                    li abstract int select(long timeout) + 오버로딩
                    |             블로킹으로 선택한다. timeout이 지정되지 않은 경우엔 무기한. 적어도 하나의 채널이 선택되면 반환한다.
                    li int selectNow(Consumer&lt;SelectionKey> action) Since 11
                    |             논-블로킹으로 키를 소비한다. 소비된 유니크한 키의 개수를 반환한다. 이전 wakeup()의 영향을 제거한다
                    li int select(Consumer&lt;SelectionKey> action, long timeout) Since 11 + 오버로딩
                    |             블로킹으로 키를 소비한다. 소비된 유니크한 키의 개수를 반환한다. 시간 초과 되거나, 적어도 하나의 채널이 선택되면 wakeup()으로 깨어난다
                    li abstract Selector wakeup()
                    |             아직 반환하지 않은 선택 연산이 즉시 반환하도록 한다. 현재 실행 중인 선택 연산이 없다면 다음 선택 연산(selectNow 제외)에 대해 적용된다.
        hr
        details
            h2.marker abstract class SelectionKey Since 1.4
            ol
                li
                    | SelectableChannel이 Selector에 등록됨을 나타내는 토큰. 채널이나 Selector가 닫히면서 cancel 메서드로 닫히기 전까지 유효
                li 각 SelectionKey는 2가지 연산 집합을 갖는다. 각 집합은 int로 표현되고, 설정된 비트는 채널이 해당 연산을 지원함을 의미한다
                ul
                    li
                        | Interest set : Selector의 선택 연산에서 ready 상태인지 검사될 연산 집합. 최초 채널 등록 시 제공된 int값이며, interestOps(int)로 변경할 수 있다.
                    li
                        | Ready set : 키의 채널이 ready 상태인 연산들의 집합. 최초 생성 시 0이며, Selector의 선택 연산으로 변경된다. 직접 변경할 수는 없다.
                li
                    | 이 클래스에서 공통적인 지원 연산에 대해 정의하지만, 각 SelectableChannel의 서브 클래스에서 제공하는 validOps()가 정확하다
            details
                h2.marker Field Detail
                ol
                    li static final int OP_READ
                    |             Selector의 선택 연산 시 interest set에 포함되어 있을 때. 채널이 읽기 가능하거나, end-of-stream에 도달했거나, 원격지에서 닫았거나, 에러 대기 상태면 ready set에 추가
                    li static final int OP_WRITE
                    |             Selector의 선택 연산 시 interest set에 포함되어 있을 때. 채널이 쓰기 가능하거나, 원격지에서 닫았거나, 에러 대기 상태만 ready set에 추가
                    li static final int OP_CONNECT
                    |             Selector의 선택 연산 시 interest set에 포함되어 있을 때, 채널이 연결 완료될 수 있거나, 에러 대기 상태면 ready set에 추가
                    li static final int OP_ACCEPT
                    |             Selector의 선택 연산 시 interest set에 포함되어 있을 때. 서버 채널이 연결을 허용할 수 있거나, 에러 대기 상태면 ready set에 추가
            details
                h2.marker Method Detail
                ol
                    li abstract SelectableChannel channel() : 연관 채널 반환
                    li abstract Selector selector() : 연관 Selector 반환
                    li abstract boolean isValid()
                    li abstract void cancel()
                    li abstract int interestOps() + setter 메서드
                    li public int interestOpsOr(int ops) Since 11 + interestOpsAnd
                    li abstract int readyOps()
                    li final boolean isReadable() + isWritable, isConnectable, isAcceptable
                    li final Object attach(Object ob) + getter 메서드
        hr


    h1.marker java.nio.charset Since 1.4
        details
            h2.marker abstract class Charset implements Comparable&lt;Charset> Since 1.4
            ol
                li static boolean isSupported(String charsetName)
                li static Charset forName(String charsetName)
                li static SortedMap&lt;String, Charset> availableCharsets()
                li static Charset defaultCharset() Since 1.5
                li final String name() + aliases, displayName
                li final boolean isRegistered() : IANA 문자집합에 등록됐는지
                li abstract boolean contains(Charset cs)
                li boolean canEncode()
                li abstract CharsetDecoder newDecoder() + newEncoder
                li final CharBuffer decode(ByteBuffer bb) + encodie
        hr
        details
            h2.marker abstract class CharsetDecoder Since 1.4
            ol
                li 바이트열을 문자열로 변환.
                li final Charset charset()
                li final CoderResult decode(ByteBuffer in, CharBuffer out, boolean endOfInput)
                li final CoderResult flush(CharBuffer out)
                |         일부 디코더들은 내부적으로 flush가 필요할 수 있다
                li final CharsetDecoder reset()
                li final CharBuffer decode(ByteBuffer in)
                li final float averageCharsPerByte() + maxCharsPerByte
                li
                    | final CharsetDecoder onMalformedInput(CodingErrorAction newAction) + getter 메서드 + onUnmappableCharacter
                li boolean isAutoDetecting() + isCharsetDetected, detectedCharset
        hr
        details
            h2.marker abstract class CharsetEncoder Since 1.4
            ol
                li 문자열을 바이트열로 변환.
                li final Charset charset()
                li final CoderResult encode(CharBuffer in, ByteBuffer out, boolean endOfInput)
                li final CoderResult flush(ByteBuffer out)
                |         일부 인코더들은 내부적으로 flush가 필요할 수 있다
                li final CharsetEncoder reset()
                li final ByteBuffer encode(CharBuffer in)
                li boolean canEncode(CharSequence cs) + 오버로딩
                li final float averageBytesPerChar() + maxBytesPerChar
                li
                    | final CharsetDecoder onMalformedInput(CodingErrorAction newAction) + getter 메서드 + onUnmappableCharacter
        hr
        details
            h2.marker final class StandardCharsets Since 1.7
            |     표준 문자집합 : US-ASCII(= ISO646-US), ISO-8859-1(= ISO-LATIN-1), UTF-8, UTF-16BE, UTF-16LE, UTF-16
        hr


    h1.marker java.nio.file Since 1.7
        details
            h2.marker 파일 감시 관련
            details
                h2.marker interface Watchable Since 1.7
                ol
                    li
                        | WatchService에 등록되어 그 변화나 이벤트가 감시될 수 있는 객체. 정의된 register 메서드는 등록되었음을 WatchKey 객체로 반환한다.
                    li WatchKey register(WatchService watcher, WatchEvent.Kind&lt;?>... events) + 오버로딩
            details
                h2.marker interface WatchEvent&lt;T> Since 1.7
                details
                    h2.marker static interface WatchEvent.Kind&lt;T> Since 1.7
                    ol
                        li 식별을 위한 이벤트 종류
                        li String name()
                        li Class&lt;T> type()
                details
                    h2.marker static interface WatchEvent.Modifier Since 1.7
                    ol
                        li Watchable 객체가 어떻게 등록되었는지
                        li String name()
                ol
                    li WatchEvent.Kind&lt;T> kind()
                    li int count() : 1보다 크면 반복 이벤트
                    li T context()
            details
                h2.marker final class StandardWatchEventKinds Since 1.7
                ol
                    li public static final WatchEvent.Kind&lt;Object> OVERFLOW : 자리가 없어 이벤트가 버려짐.
                    li
                        | public static final WatchEvent.Kind&lt;Path> ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY : 디렉터리 생성/삭제/변경
            details
                h2.marker interface WatchKey Since 1.7
                ol
                    li WatchService에 Watchable 객체가 등록되었음을 표현하는 토큰.
                    li
                        | 처음 생성되면 ready 상태. 이벤트를 감지하면 reset()되기 전까지 signalled 상태가 되고, WatchService 큐에 진입하여 처리된다. reset()되면 다시 ready.
                    li boolean isValid() : 취소되거나 서비스가 닫힐 때까지 유효
                    li List&lt;WatchEvent&lt;?>> pollEvents() : 대기 중인 이벤트들을 제거하고 반환
                    li boolean reset()
                    li void cancel()
                    li Watchable watchable()
            details
                h2.marker interface WatchService extends Closeable Since 1.7
                ol
                    li 스레드-안전. FileSystem#newWatchService 메서드로 획득한다
                    li WatchKey poll() : 다음 WatchKey를 제거. 없으면 null.
                    li
                        | WatchKey poll(long timeout, TimeUnit unit) : 다음 WatchKey를 제거. 없으면 대기. timeout 후에도 없으면 null.
                    li WatchKey take() : 다음 WatchKey를 제거. 없으면 대기.
        hr
        details
            h2.marker 파일 순회 관련
            details
                h2.marker interface DirectoryStream&lt;T> extends Closeable, Iterable&lt;T> Since 1.7
                ol
                    li Files#newDirectoryStream 메서드로 획득
                    li 일회용 이터러블이다. 2번째 호출부터는 IllegalStateException 발생
                details(open='')
                    h2.marker @FunctionalInterface static interface DirectoryStream.Filter&lt;T> Since 1.7
                    |             boolean accept(T entry)
            details
                h2.marker interface SecureDirectoryStream&lt;T> extends DirectoryStream&lt;T> Since 1.7
                ol
                    li 열린 디렉터리에 대한 상대 경로를 이용한 연산들을 추가로 지원한다
                    li
                        | OS에서 이를 지원한다면, Files#newDirectoryStream 메서드로 획득한 DirectoryStream은 SecureDirectoryStream이다
                    li SecureDirectoryStream&lt;T> newDirectoryStream(T path, LinkOption... options)
                    |             path가 절대 경로면 Files#newDirectoryStream과 동일.
                    li
                        | SeekableByteChannel newByteChannel(T path, Set&lt;? extends OpenOption> options, FileAttribute&lt;?>... attrs)
                    |             path가 절대 경로면 Files#newByteChannel과 동일. path에 해당하는 파일을 열거나 만든 뒤, 파일에 대한 채널을 반환한다
                    li void deleteFile(T path)
                    |             Files#delete와 다르게 path가 디렉터리인지 확인하지 않는다. 이로써 디렉터리가 실제로 지워지는 지는 시스템에 의존적이다. 심볼릭 링크의 경우 링크 자체만 지운다.
                    li void deleteDirectory(T path)
                    |             Files#delete와 다르게 path가 디렉터리인지 확인하지 않는다. 이로써 일반 파일이 지워지는 지는 시스템에 의존적이다.
                    li void move(T srcpath, SecureDirectoryStream&lt;T> targetdir, T targetpath)
                    |             ATOMIC_MOVE 옵션이 적용된 Files#move와 비슷하게 작업한다. 현재 디렉터리를 기준으로, 파일 하나를 다른 디렉터리에 대한 상대경로가 지정하는 위치에 원자적으로 옮긴다
                    li &lt;V extends FileAttributeView> V getFileAttributeView(Class&lt;V> type)
                    |             현재 디렉터리에 대한 FileAttributeView를 반환한다. BasicFileAttributeView를 요청하면 항상 BasicFileAttributeView 인스턴스를 반환한다.
                    li
                        | &lt;V extends FileAttributeView> V getFileAttributeView(T path, Class&lt;V> type, LinkOption... options)
                    |             현재 디렉터리 내부 파일 하나에 대한 FileAttributeView를 반환한다. BasicFileAttributeView를 요청하면 항상 BasicFileAttributeView 인스턴스를 반환한다.
            details
                h2.marker interface FileVisitor&lt;T> Since 1.7
                ol
                    li Files#walkFileTree 메서드에 사용
                    li FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs)
                    |             디렉터리 방문 시, 내부 요소들을 처리하기 전에 해당 디렉터리에 대한 처리를 담당
                    li FileVisitResult visitFile(T file, BasicFileAttributes attrs)
                    li FileVisitResult visitFileFailed(T file, IOException exc)
                    li FileVisitResult postVisitDirectory(T dir, IOException exc)
                    |             디렉터리 방문 시, 내부 요소들을 모두 처리한 뒤 해당 디렉터리에 대한 처리를 담당
            details
                h2.marker class SimpleFileVisitor&lt;T> implements FileVisitor&lt;T> SInce 1.7
                ol
                    li preVisitDirectory  : CONTINUE 반환
                    li visitFile : CONTINUE 반환
                    li visitFileFailed : rethrow
                    li postVisitDirectory : 예외없으면 CONTINUE, 있으면 rethrows
            details
                h2.marker enum FileVisitResult Since 1.7
                ol
                    li CONTINUE : 순회 계속.
                    li TERMINATE : 순회 종료
                    li SKIP_SUBTREE : FileVIsitor#preVisitDirectory에서 반환된 경우, 하위 레벨 트리는 순회하지 않는다
                    li SKIP_SIBLINGS : 현재 요소가 포함된 디렉터리 내부에서, 현재 요소와 동일한 레벨의 요소들은 더 이상 순회하지 않는다.
                    |             FileVIsitor#preVisitDirectory에서 반환된 경우, 현재 디렉터리의 내부 요소들과 postVisitDirectory 모두 건너뛴다
        hr
        details
            h2.marker 옵션 관련
            details
                h2.marker interface CopyCption Since 1.7
            details
                h2.marker enum StandardCopyOption implements CopyOption Since 1.7
                |         REPLACE_EXISTING, COPY_ATTRIBUTES, ATOMIC_MOVE
            details
                h2.marker interface OpenOption Since 1.7
            details
                h2.marker enum StandardOpenOption implements OpenOption Since 1.7
                ol
                    li READ : 읽기
                    li WRITE : 쓰기
                    li APPEND : TRUNCATE_EXISTING 옵션이 있거나 읽기 전용일 때는 적용되지 않는다
                    li TRUNCATE_EXISTING : 파일을 열 때 크기를 0바이트로 줄인다. 읽기 전용으로 열 때는 적용되지 않는다.
                    li CREATE : 기존 파일이 존재하면 열고, 없으면 새로 생성한다.
                    li CREATE_NEW : 신규 파일을 생성한다. 기존 파일이 존재하면 실패한다.
                    li DELETE_ON_CLOSE : close() 호출 시 파일을 지운다(best effort)
                    li SPARSE : 파일이 sparse임을 OS에 알려준다. 신규 파일을 생성하는 경우에만 유효하다.
                    li SYNC : 파일 내용 및 메타데이터의 변경을 동기적으로 물리 장치에 기록한다
                    li DSYNC : 파일 내용 변경을 동기적으로 물리 장치에 기록한다
            details
                h2.marker enum FileVisitOption Since 1.7
                |         FOLLOW_LINKS : 심볼릭 링크를 따라 들어가는 경우
            details
                h2.marker enum LinkOption implements OpenOption, CopyOption Since 1.7
                |         NOFOLLOW_LINKS : 심볼릭 링크를 따라 들어가지 않는 경우
        hr
        details
            h2.marker 파일 시스템 관련
            details
                h2.marker interface Path extends Comparable&lt;Path>, Iterable&lt;Path>, Watchable Since 1.7
                ol
                    li
                        | 파일 경로를 가리킨다. 사용자 정의 파일 시스템을 개발하기 위해 만들어짐.
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/nio/PathTest.java', lan: 'java'})
                    li static Path of(String first, String... more) Since 11
                    |             예. of("/foo", "bar", "gus") → "/foo/bar/gus" // FileSystem#getSeparator == "/"
                    li static Path of(URI uri) Since 11 ↔ toUri
                    li FileSystem getFileSystem() : 이 Path를 만든 FileSystem 반환
                    li Path getRoot()
                    |             getFileName, getParent, getNameCount, getName, subpath, toAbsolutePath, toRealPath
                    li Path normalize() : 불필요한 ".", ".." 제거
                    li Path resolve(Path other) + 오버로딩
                    |             호출한 path를 기준 디렉터리로 하여, other가 가리키는 지점을 단일 Path로 반환한다.
                    li default Path resolveSibling(Path other) + 오버로딩
                    |             (getParent() == null) ? other : getParent().resolve(other);
                    li Path relativize(Path other)
                    |             호출한 path를 기준으로, other에 도달하는 상대경로를 반환한다
                    li boolean isAbsolute() + startsWith, endsWith
                    li default File toFile()
            details
                h2.marker @FunctionalInterface interface PathMatcher Since 1.7
                |         boolean matches(Path path)
            details
                h2.marker final class Files Since 1.7
                ol
                    li static InputStream newInputStream(Path path, OpenOption... options)
                    |             + newOutputStream, newByteChannel, newBufferedReader, newBufferedWriter
                    li static DirectoryStream&lt;Path> newDirectoryStream(Path dir, String glob) + 오버로딩
                    |             예. Files.newDirectoryStream(dir, "*.java")); Files.newDirectoryStream(dir, "*.{c,h,cpp,hpp,java}"));
                    li static Path createFile(Path path, FileAttribute&lt;?>... attrs)
                    |             + createDirectory, createDirectories(경로 상의 모든 디렉터리 생성), createTempFile, createTempDirectory, createSymbolicLink, createLink(하드 링크)
                    li static void delete(Path path)
                    |             + deleteIfExists, copy, move
                    li static Path readSymbolicLink(Path link)
                    li static FileStore getFileStore(Path path)
                    li static bolean isSameFile(Path path, Path path2)
                    li static long mismatch(Path path, Path path2) Since 12
                    |             두 파일이 불일치하는 최초의 바이트 위치를 반환한다. 같으면 -1L.
                    li
                        | static byte[] readAllBytes(Path path) + readString Since 11, lines, readAllLines Since 1.8
                    li
                        | static Path write(Path path, Iterable&lt;? extends CharSequence> lines, OpenOption... options) Since 1.8 + 오버로딩
                    li
                        | static Path writeString(Path path, CharSequence csq, Charset cs, OpenOption... options) Since 11 + 오버로딩
                    li static boolean isHidden(Path path)
                    |             + isDirectory, isSymbolicLink, isRegularFile, exists, notExists, isReadable, isWritable, isExecutable
                    li static String probeContentType(Path path)
                    |             + getFileAttributeView, readAttributes, getAttribute, setAttribute, getLastModifiedTime, setLastModifiedTime, size
                    li
                        | static Set&lt;PosixFilePermission> getPosixFilePermissions(Path path, LinkOption... options)
                    |             + setPosixFilePermissions, getOwner, setOwner
                    li static Stream&lt;Path> list(Path dir) Since 1.8
                    li
                        | static Stream&lt;Path> walk(Path start, int maxDepth, FIleVisitOption... options) Since 1.8 + 오버로딩 + walkFileTree
                    li
                        | static Stream&lt;Path> find(Path start, int maxDepth, BiPredicate&lt;Path, BasicFileAttributes> matcher, FIleVisitOption... options) Since 1.8
            details
                h2.marker abstract class FileStore Since 1.7
                ol
                    li abstract String name()
                    |             + type, isReadonly, getTotalSpace, getUsableSpace, getBlockSize, getUnallocatedSpace, supportsFileAttributeView, getFileStoreAttributeView, getAttribute
            details
                h2.marker abstract class FileSystem implements Closeable Since 1.7
                ol
                    li abstract FileSystemProvider provider()
                    li abstract boolean isOpen()
                    li abstract boolean isReadOnly()
                    li abstract String getSeparator()
                    li abstract Iterable&lt;Path> getRootDirectories()
                    li abstract Iterable&lt;FileStore> getFileStores()
                    li abstract Set&lt;String> supportedFIleAttributeViews()
                    li abstract Path getPath(String first, String... more)
                    li abstract PathMatcher getPathMatcher(String syntaxAndPattern)
                    li abstract UserprincipalLookupService getUserPrincipalLookupService()
                    li abstract WatchService newWatchService()
            details
                h2.marker final class FileSystems Since 1.7
                ol
                    li FileSystem 팩터리
                    li static FileSystem getDefault()
                    li static FileSystem getFileSystem(URI uri) + 오버로딩
                    li static FileSystem newFileSystem(Path path, ClassLoader loader)
        hr


    h1.marker java.security Since 1.1
        details
            h2.marker 암호적으로 안전한 난수 생성기
            details
                h2.marker interface SecureRandomParameters Since 9
                |         SecureRandom 메서드 인자임을 나타내는 마커 인터페이스
            details
                h2.marker class SecureRandom extends Random Since 1.1
                ol
                    li 비결정적인 출력을 위해, 전달되는 시드 역시 예측할 수 없어야 한다
                    |             시드를 제공하지 않은 경우, 최초 nextBytes 호출 시 구현체에서 정의하는 엔트로피 소스로부터 시드를 선택한다
                    li SecureRandom 인스턴스는 스레드-안전하다
                    li public SecureRandom() + 오버로딩
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/security/SecureRandomTest.java', lan: 'java'})
                details
                    h2.marker Method Detail
                    ol
                        li static SecureRandom getInstance(String algorithm) + 오버로딩
                        |                 https://docs.oracle.com/en/java/javase/12/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms
                        li
                            | static SecureRandom getInstance(String algorithm, SecureRandomParameters params) Since 9 + 오버로딩
                        |                 SecureRandom.getInstance("DRBG", DrbgParameters.instantiation(128, RESEED_ONLY, null));
                        li static SecureRandomParameters getInstanceStrong() Since 1.8
                        li final Provider getProvider() + getAlgorithm Since 1.5, getParameters Since 9
                        li void setSeed(byte[] seed) + 오버로딩 + getSeed
                        li void reseed() Since 9 + 오버로딩
                        |                 엔트로피 소스로부터 시드 재선택
                        li void nextBytes(byte[] bytes) + 오버로딩 + generateSeed
            details
                h2.marker class DrbgParameters Since 9
                ol
                    li DRBG; Deterministic Random Bit Generator 이용을 위한 파라미터
                    |             기본 파라미터 외에 직접 지정하고 싶은 경우, 메서드의 SecureRandomParameters 파라미터로 넘기면 된다
                    br
                    |             var drbg = SecureRandom.getInstance("DRBG", DrbgParameters.instantiation(112, NONE, null)); // Weak DRBG 인스턴스. 112비트 보안 강도
                    br
                    |             drbg.nextBytes(buffer, DrbgParameters.nextBytes(256, false, "more".getBytes())); // 보안 강도 112비트를 초과하여 실패
                    br
                    |             drbg.nextBytes(buffer, DrbgParameters.nextBytes(112, true, "more".getBytes())); // 예측 저항(PR_AND_RESEED) 없으므로 실패
                    li 시스템 속성
                    |             securerandom.drbg.config → 기본값 : Hash_DRBG with SHA-256
                details
                    h2.marker Nested Classes
                    ol
                        li
                            | static final class DrbgParameters.Instantiation implements SecureRandomParameters Since 9
                        |                 DRBG 인스턴스 생성 시 사용.
                        li static enum DrbgParameters.Capability Since 9
                        |                 NONE(예측 저항 x, reseed x), PR_AND_RESEED(예측 저항 o, reseed o), RESEED_ONLY(예측 저항 x, reseed o)
                        li
                            | static final class DrbgParameters.Reseed implements SecureRandomParameters Since 9
                        |                 DRBG 인스턴스 reseed에 이용
                        li
                            | static final class DrbgParameters.NextBytes implements SecureRandomParameters Since 9
                        |                 DRBG 인스턴스의 랜덤 비트열 생성에 이용
                details
                    h2.marker Method Detail
                    ol
                        li
                            | static DrbgParameters.Instantiation instantiation(int strength, DrbgParameters.Capability capability, byte[] personalizationString)
                        li
                            | static DrbgParameters.NextBytes nextBytes(int strength, boolean predictionResistance, byte[] additionalInput)
                        li
                            | static DrbgParameters.Reseed reseed(boolean predictionResistance, byte[] additionalInput)
        hr


    h1.marker java.text Since 1.1
        details
            h2.marker abstract class Format implements Serializable, Cloneable Since 1.1
            ol
                li 자바에서 제공하는 주요 Format 서브 클래스는 DateFormat, MessageFormat, NumberFormat
                li 콘크리트 서브 클래스는 아래 3개 메서드를 반드시 구현해야 한다
                |         format(Object, StringBuffer, FieldPosition), formatToCharacterIterator(Object), parseObject(String, ParsePosition)
        hr
        details
            h2.marker final class Normalizer Since 1.6
            ol
                li
                    | 유니코드
                    a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://ko.wikipedia.org/wiki/유니코드_정규화') 정규화/역정규화
                    |  관련 기능을 제공한다.
                li static enum Normalizer.Form Since 1.6
                |         NFC, NFD, NFKC, NFKD
                li static String normalize(CharSequence src, Normalizer.Form form) + isNormalized
        hr
        details
            h2.marker abstract class NumberFormat extends Format Since 1.1
            ol
                li static enum NumberFormat.Style Since 12
                |         SHORT, LONG
                li static class NumberFormat.Field extends Format.Field Since 1.4
                |         INTEGER(정수부), FRACTION(분수), EXPONENT(지수부), DECIMAL_SEPARATOR(소수 구분 기호), SIGN(부호), GROUPING_SEPARATOR(단위 구분 문자), EXPONENT_SYMBOL, PERCENT, PERMILLE, CURRENCY, EXPONENT_SIGN, PREFIX Since 12, SUFFIX Since 12
                li static final NumberFormat getInstance(Locale inLocale) + 오버로딩
                |         + getNumberInstance : 범용
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/NumberFormatTest.java', lan: 'java'})
                |         , getIntegerInstance Since 1.4 : 포맷에 HALF_EVEN을 이용하고, 파싱은 정수부만, getCurrencyInstance, getPercentInstance, getCompactNumberInstance Since 12 : 기본값은 NumberFormat.Style.SHORT 스타일
                li static Locale[] getAvailableLocales()
                li void setParseIntegerOnly(boolean value)
                |         + groupingUsed, maximumIntegerDigits, minimumIntegerDigits, maximumFractionDigits, minimumFractionDigits, currency Since 1.4, roundingMode Since 1.6
        hr
        details
            h2.marker class SimpleDateFormat extends DateFormat Since 1.1
            ol
                li 패턴
                table
                    thead
                        tr
                            th 문자
                            th 표현요소
                            th 예
                    tbody
                        tr
                            th G
                            td 기원 전/후
                            td
                                | AD
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[18,23]', lan: 'java'}) 예
                        tr
                            th y
                            td 년
                            td
                                | 1996; 96
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[26,31]', lan: 'java'}) 예
                        tr
                            th Y
                            td Week year
                            td
                                | 2009; 09
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[34,43]', lan: 'java'}) 예
                        tr
                            th M
                            td 월(context sensitive)
                            td
                                | July; Jul; 07
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[26,31]', lan: 'java'}) 예
                        tr
                            th L
                            td 월 (standalone form)
                            td July; Jul; 07
                        tr
                            th w
                            td Week in year
                            td
                                | 27
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[34,43]', lan: 'java'}) 예
                        tr
                            th W
                            td Week in month
                            td 2
                        tr
                            th D
                            td Day in year
                            td 189
                        tr
                            th d
                            td Day in month
                            td
                                | 10
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[26,31]', lan: 'java'}) 예
                        tr
                            th F
                            td Day of week in month
                            td 2
                        tr
                            th E
                            td Day name in week
                            td
                                | Tuesday; Tue
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[34,43]', lan: 'java'}) 예
                        tr
                            th u
                            td Day number of week
                            td
                                | 1 = Monday, ..., 7 = Sunday
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[34,43]', lan: 'java'}) 예
                        tr
                            th a
                            td Am/pm
                            td
                                | PM
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[46,51]', lan: 'java'}) 예
                        tr
                            th H
                            td Hour in day (0-23)
                            td
                                | 0
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[26,31]', lan: 'java'}) 예
                        tr
                            th k
                            td Hour in day (1-24)
                            td 24
                        tr
                            th K
                            td Hour in am/pm (0-11)
                            td 0
                        tr
                            th h
                            td Hour in am/pm (1-12)
                            td
                                | 12
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[46,51]', lan: 'java'}) 예
                        tr
                            th m
                            td Minute in hour
                            td
                                | 30
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[26,31]', lan: 'java'}) 예
                        tr
                            th s
                            td Second in minute
                            td
                                | 55
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[26,31]', lan: 'java'}) 예
                        tr
                            th S
                            td Millisecond
                            td
                                | 978
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[46,51]', lan: 'java'}) 예
                        tr
                            th z
                            td General time zone
                            td Pacific Standard Time; PST; GMT-08:00
                        tr
                            th Z
                            td RFC 822 time zone
                            td
                                | -0800
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/SimpleDateFormatTest.java', displayrange='[46,51]', lan: 'java'}) 예
                        tr
                            th X
                            td ISO 8601 time zone
                            td -08; -0800; -08:00
        hr
        details
            h2.marker class MessageFormat extends Format Since 1.1
            ol
                li MessageFormatPattern ::= String | MessageFormatPattern FormatElement String
                li FormatElement ::= { ArgumentIndex[, FormatType[, FormatStyle]] }
                li FormatType ::= number | date | time | choice
                li
                    | FormatStyle ::= short | medium | long | full | integer | currency | percent | SubformatPattern
                li '' 안의 포맷 문자열은 이스케이프된다
                li
                    | 동일 요소에 대한 반복적인 파싱은 마지막 파싱 결과만 유효하다
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/text/MessageFormatTest.java', lan: 'java'})
                table
                    thead
                        tr
                            th FormatType
                            th FormatStyle
                            th Subformat Created
                    tbody
                        tr
                            th (none)
                            th (none)
                            td null
                        tr
                            th(rowspan='5') number
                            th (none)
                            td NumberFormat.getInstance(getLocale())
                        tr
                            th integer
                            td NumberFormat.getIntegerInstance(getLocale())
                        tr
                            th currency
                            td NumberFormat.getCurrencyInstance(getLocale())
                        tr
                            th percent
                            td NumberFormat.getPercentInstance(getLocale())
                        tr
                            th SubformatPattern
                            td
                                | new DecimalFormat(subformatPattern, DecimalFormatSymbols.getInstance(getLocale()))
                        tr
                            th(rowspan='6') date
                            th (none)
                            td DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())
                        tr
                            th short
                            td DateFormat.getDateInstance(DateFormat.SHORT, getLocale())
                        tr
                            th medium
                            td DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())
                        tr
                            th long
                            td DateFormat.getDateInstance(DateFormat.LONG, getLocale())
                        tr
                            th full
                            td DateFormat.getDateInstance(DateFormat.FULL, getLocale())
                        tr
                            th SubformatPattern
                            td new SimpleDateFormat(subformatPattern, getLocale())
                        tr
                            th(rowspan='6') time
                            th (none)
                            td DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())
                        tr
                            th short
                            td DateFormat.getTimeInstance(DateFormat.SHORT, getLocale())
                        tr
                            th medium
                            td DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())
                        tr
                            th long
                            td DateFormat.getTimeInstance(DateFormat.LONG, getLocale())
                        tr
                            th full
                            td DateFormat.getTimeInstance(DateFormat.FULL, getLocale())
                        tr
                            th SubformatPattern
                            td new SimpleDateFormat(subformatPattern, getLocale())
                        tr
                            th choice
                            th SubformatPattern
                            td new ChoiceFormat(subformatPattern)
        hr


    h1.marker java.time Since 1.8
        details
            h2.marker abstract class Clock Since 1.8
            ol
                li
                    | 시간대(time-zone)을 이용한 현재의 date와 time 제공. 지정하지 않는 이상, 시계 내부의 시각은 계속 변한다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/time/ClockTest.java', lan: 'java'})
                li static Clock system(ZoneId zone) : 특정 시간대의 시계 반환
                |         + systemUTC() == system(ZoneOffset.UTC), systemDefaultZone() == system(ZoneId.systemDefault())
                li static Clock tick(Clock baseClock, Duration tickDuration)
                |         지정된 시계의 tick 단위를 조정. 예를 들어 1분이 지정된 경우, 1분 미만의 값은 버려진다.
                |         + tickMillis(ZoneId zone) Since 9 == tick(system(zone), Duration.ofMillis(1)), tickSeconds, tickMinutes
                li static Clock fixed(Instant fixedInstant, ZoneId zone) : 현재 시각으로 멈춘 시계 반환
                li
                    | static Clock offset(Clock baseClock, Duration offsetDuration) : 시각을 조정한 새로운 시계 반환
                li abstract ZoneId getZone()
                li abstract Clock withZone(ZoneId zone)
                |         지정된 시간대에 현재 시계의 복사본을 생성하여 반환한다. 따라서 시각 자체는 조정하지 않는다.
                li long millis()
                li abstract Instant instant()
        hr
        details
            h2.marker
                | final class Duration implements TemporalAmount, Comparable&lt;Duration>, Serializable Since 1.8
            ol
                li
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/time/DurationTest.java', lan: 'java'})
                li public static final Duration ZERO
                li static Duration of(long amount, TemporalUnit unit)
                |         + ofDays, ofHours, ofMinutes, ofSeconds, ofMillis, ofNanos
                li static Duration from(TemporalAmount amount)
                |         amount 그대로 Duration으로 변환
                li static Duration parse(CharSequence text)
                |         ISO-8601 duration format PnDTnHnMn.nS // 추가로 접두 부호 가능
                li static Duration between(Temporal startInclusive, Temporal endExclusive)
                li long get(TemporalUnit unit)
                |         + getUnits, getSeconds, getNano
                li boolean isZero() + isNegative()
                li Duration withSeconds(long seconds)
                |         나노초 단위만 남기고 seconds로 변경
                li Duration withNanos(int nanoOfSecond)
                |         나노초 단위만 nanoOfSecond로 변경
                li Duration plus(Duration duration) + 오버로딩 + minus
                li Duration multipliedBy(long multiplicand) + divideBy
                li Duration negated() + abs
                li Temporal addTo(Temporal temporal) + subtractFrom
                li long toDays()
                |         + toHours, toMinutes, toSeconds Since 9, toMillis, toNanos, toDaysPart Since 9, toHoursPart Since 9, toMinutesPart Since 9, toSecondsPart Since 9, toMillisPart Since 9, toNanosPart Since 9
                li Duration truncatedTo(TemporalUnit unit) Since 9
        hr
        details
            h2.marker
                | final class Instant implements Temporal, TemporalAdjuster, Comparable&lt;Instant>, Serializable Since 1.8
            ol
                li Epoch(1970-01-01 00:00:00)를 기준으로 한 초(long)와 나노초(int)로 시각을 표현한다. 음수면 epoch 이전
                li public static final Instant EPOCH, MIN(아주 먼 옛날), MAX(아주 먼 미래)
                li static Instant now() + 오버로딩
                |         + ofEpochSecond, ofEpochMilli, from, parse(DateTimeFormatter.ISO_INSTANT; 예. 2007-12-03T10:15:30.00Z)
                li ValudRange range(TemporalField field)
                li boolean isAfter(Instant otherInstant) + isBefore
                li 이하 생략
        hr
        details
            h2.marker abstract class ZoneId implements Serializable Since 1.8
            ol
                li public static final Map&lt;String, String> SHORT_IDS
                li static ZoneId systemDefault()
                li static Set&lt;String> getAvailaleZoneIds()
                li static ZoneId of(String zoneId)
                li static ZoneId ofOffset(String prefix, ZoneOffset offset)
                |         prefix : "GMT", "UTC", "UT", ""
        hr
        details
            h2.marker
                | final class ZoneOffset extends ZoneId implements TemporalAccessor, TemporalAdjuster, Comparable&lt;ZoneOffset>, Serializable Since 1.8
            ol
                li public static final ZoneOffset UTC, MIN, MAX
                li static ZoneOffset of(String offsetId)
                |         -18:00 ~ +18:00
                li static ZoneOffset ofHours(int hours)
                |         + ofHoursMinutes, ofHoursMinutesSeconds, ofTotalSeconds
        hr
        details
            h2.marker enum DayOfWeek implements TemporalAccessor, TemporalAdjuster Since 1.8
            ol
                li public static final DayOfWeek MONDAY ~ SUNDAY
                li int getValue()
                |         ISO-8601. 1(MONDAY) ~ 7(SUNDAY)
                li static DayOfWeek of(int dayOfWeek)
                li DayOfWeek plus(long days) + minus
        hr
        details
            h2.marker enum Month implements TemporalAccessor, TemporalAdjuster Since 1.8
            ol
                li public static final Month JANUARY ~ DECEMBER
                li int getValue()
                |         ISO-8601. 1(JANUARY) ~ 12(DECEMBER)
                li static Month of(int month)
                li Month plus(long months) + minus
                li int length(boolean leapYear)
                li int firstDayOfYear(boolean leapYear)
        hr


    h1.marker java.time.format Since 1.8
        details(open='')
            h2.marker final class DateTimeFormatter Since 1.8
            a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/time/format/DateTimeFormatter.html#predefined') DateTimeFormatter.html#predefined
            table
                thead
                    tr
                        th Formatter
                        th Description
                        th Example
                tbody
                    tr
                        th ofLocalizedDate(dateStyle)
                        td Formatter with date style from the locale
                        td '2011-12-03'
                    tr
                        th ofLocalizedTime(timeStyle)
                        td Formatter with time style from the locale
                        td '10:15:30'
                    tr
                        th ofLocalizedDateTime(dateTimeStyle)
                        td Formatter with a style for date and time from the locale
                        td '3 Jun 2008 11:05:30'
                    tr
                        th ofLocalizedDateTime(dateStyle,timeStyle)
                        td Formatter with date and time styles from the locale
                        td '3 Jun 2008 11:05'
                    tr
                        th BASIC_ISO_DATE
                        td Basic ISO date
                        td '20111203'
                    tr
                        th ISO_LOCAL_DATE
                        td ISO Local Date
                        td '2011-12-03'
                    tr
                        th ISO_OFFSET_DATE
                        td ISO Date with offset
                        td '2011-12-03+01:00'
                    tr
                        th ISO_DATE
                        td ISO Date with or without offset
                        td '2011-12-03+01:00'; '2011-12-03'
                    tr
                        th ISO_LOCAL_TIME
                        td Time without offset
                        td '10:15:30'
                    tr
                        th ISO_OFFSET_TIME
                        td Time with offset
                        td '10:15:30+01:00'
                    tr
                        th ISO_TIME
                        td Time with or without offset
                        td '10:15:30+01:00'; '10:15:30'
                    tr
                        th ISO_LOCAL_DATE_TIME
                        td ISO Local Date and Time
                        td '2011-12-03T10:15:30'
                    tr
                        th ISO_OFFSET_DATE_TIME
                        td
                            | Date Time with Offset
                        td '2011-12-03T10:15:30+01:00'
                    tr
                        th ISO_ZONED_DATE_TIME
                        td Zoned Date Time
                        td '2011-12-03T10:15:30+01:00[Europe/Paris]'
                    tr
                        th ISO_DATE_TIME
                        td Date and time with ZoneId
                        td '2011-12-03T10:15:30+01:00[Europe/Paris]'
                    tr
                        th ISO_ORDINAL_DATE
                        td Year and day of year
                        td '2012-337'
                    tr
                        th ISO_WEEK_DATE
                        td Year and Week
                        td '2012-W48-6'
                    tr
                        th ISO_INSTANT
                        td Date and Time of an Instant
                        td '2011-12-03T10:15:30Z'
                    tr
                        th RFC_1123_DATE_TIME
                        td RFC 1123 / RFC 822
                        td 'Tue, 3 Jun 2008 11:05:30 GMT'
        hr


    h1.marker java.util Since 1.0
        details
            h2.marker Collection API
            details
                h2.marker 컬렉션 자료형 인터페이스
                details
                    h2.marker interface Collection&lt;E> extends Iterable&lt;E> Since 1.2
                    ol
                        li 컬렉션 최소 연산을 정의.
                        li 서브 컬렉션을 작성할 때, 인자없는 생성자와 Collection 인자 하나만 받는 생성자를 각각 작성하도록 권장한다
                        li 정의하지 않아도 되는 선택적 메서드들에 대하여, 구현하지 않는 경우 UnsupportedOperationException을 던져야 한다
                        li 컬렉션이 자기 자신을 요소로 갖는 경우 일부 메서드 실행 중 예외가 발생할 수 있다.
                    details
                        h2.marker Method Detail
                        ol
                            li int size()
                            li boolean isEmpty()
                            li boolean add(E e)
                            li boolean addAll(Collection&lt;? extends E> c)
                            li boolean contains(Object o)
                            li boolean containsAll(Collection&lt;?> c)
                            li boolean retainAll(Collection&lt;?> c)
                            |                     c에 속한 원소만 남기고 모두 제거한다. 이 연산으로 컬렉션이 변경됐다면 true 반환.
                            +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/util/CollectionExample.java', lan: 'java'})
                            li boolean remove(Object o)
                            li boolean removeAll(Collection&lt;?> c)
                            li default boolean removeIf(Predicate&lt;? super E> filter) Since 1.8
                            li void clear()
                            li Object[] toArray()
                            li &lt;T> T[] toArray(T[] a)
                            |                     사용 : toArray(new Clazz[0])
                            li default &lt;T> T[] toArray(IntFunction&lt;T[]> generator) Since 11
                            |                     사용 : toArray(Clazz[]::new)
                            li default Stream&lt;E> stream() Since 1.8
                            li default Stream&lt;E> parallelStream() Since 1.8
                details
                    h2.marker interface Queue&lt;E> extends Collection&lt;E> Since 1.5
                    ol
                        li boolean add(E e) : 추가할 수 없으면 예외 발생. 따라서 반환이 있다면 그 값은 항상 true
                        li boolean offer(E e) : 예외 발생하지 않는 add
                        li E remove() : 앞쪽 원소 하나 제거. 없으면 예외.
                        li E poll() : 앞쪽 원소 하나 제거. 없으면 null.
                        li E element() : 앞쪽 원소 하나 제거하지 않고 가져오기. 없으면 예외.
                        li E peek() : 앞쪽 원소 하나 제거하지 않고 가져오기. 없으면 null.
                details
                    h2.marker interface Deque&lt;E> extends Queue&lt;E> Since 1.6
                    ol
                        li 추가 못하면 예외 발생 : void addFirst(E) == push(E), addLast(E)
                        li 추가 못하면 false : boolean offerFirst(E), offerLast(E)
                        li 없으면 예외 발생 : E removeFirst() == pop(), removeLast(), getFirst(), getLast()
                        li 없으면 null : E pollFirst(), pollLast(), peekFirst(), peekLast()
                        li boolean removeFirstOccurrence(Object o) + removeLastOccurrence
                        li Iterator&lt;E> descendingIterator() : iterator()의 역순
                details
                    h2.marker interface List&lt;E> extends Collection&lt;E> Since 1.2
                    ol
                        li boolean addAll(int index, Collection&lt;? extends E> c)
                        li default void replaceAll(UnaryOperator&lt;E> operator) Since 1.8
                        |                 모든 원소를 연산 결과로 대체
                        li default void sort(Comparator&lt;? super E> c) Since 1.8
                        li int hashCode()
                        |                 hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());
                        li E get(int index)
                        li E set(int index, E element) : 이전 값은 반환.
                        li void add(int index, E element)
                        li E remove(int index)
                        li int indexOf(Object o) + lastIndexOf
                        li ListIterator&lt;E> listIterator() + 1 오버로딩
                        li List&lt;E> subList(int fromIndex, int toIndex)
                        li
                            | static &lt;E> List&lt;E> of() Since 9 + 11 오버로딩
                            br
                            |                     static &lt;E> List&lt;E> copyOf(Collection&lt;? extends E> coll) Since 10
                        |                 null 허용하지 않는 변경 불가능한 리스트. 모든 원소가 serializable하면 리스트도 그러하다.
                details
                    h2.marker interface Set&lt;E> extends Collection&lt;E> Since 1.2
                    ol
                        li
                            | static &lt;E> Set&lt;E> of() Since 9 + 11 오버로딩
                            br
                            |                     static &lt;E> Set&lt;E> copyOf(Collection&lt;? extends E> coll) Since 10
                        |                 변경 불가능한 집합을 반환한다. null 원소를 허용하지 않으며, 모든 원소가 serializable하면 집합도 그러하다.
                details
                    h2.marker interface SortedSet&lt;E> extends Set&lt;E> Since 1.2
                    ol
                        li
                            | 원소가 정렬된 Set. 다음 4가지 생성자를 구현할 것을 권장. (void), (Comparator), (Collection), (SortedSet)
                        li Comparator&lt;? super E> comparator()
                        li SortedSet&lt;E> subSet(E fromElement, E toElement) + headSet, tailSet
                        |                 부분집합 반환. toElement는 미포함
                        li E first() + last
                details
                    h2.marker interface NavigableSet&lt;E> extends SortedSet&lt;E> Since 1.6
                    ol
                        li E lower(E e) + floor: &lt;=e, ceiling: >=e, higher: >e
                        |                 e보다 작은 원소들 중 최댓값을 반환. 없으면 null
                        li E pollFirst() + pollLast
                        |                 제거하고 반환
                        li NavigableSet&lt;E> descendingSet()
                        li Iterator&lt;E> descendingIterator()
                        li
                            | NavigableSet&lt;E> subSet(E fromElement, boolean fromInclusive, E toElement, bolean toInclusive) + headSet, tailSet
                details
                    h2.marker interface Map&lt;K, V> Since 1.2
                    details
                        h2.marker static interface Map.Entry&lt;K, V> Since 1.2
                        ol
                            li K getKey() + getValue
                            li V setValue(V value)
                            li
                                | static &lt;K extends Comparable&lt;? super K>, V> Comparator&lt;Map.Entry&lt;K, V>> comparingByKey() Since 1.8 + 1 오버로딩 + comparingByValue
                            |                     키를 자연스러운 순서로 비교하는 비교자 반환. 인자 있는 함수의 경우 해당 비교자를 이용.
                    details
                        h2.marker Method Detail
                        ol
                            li Collection과 유사한 메서드는 생략
                            li boolean containsKey(Object key)
                            li boolean containsValue(Object value)
                            li V get(Object key)
                            li
                                | default V getOrDefault(Object key, V defaultValue) Since 1.8
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/util/MapExample.java', displayrange='[12,16]', lan: 'java'})
                            li V put(K key, V value) : 이전 값은 반환된다.
                            li
                                | default V putIfAbsent(K key, V value) Since 1.8
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/util/MapExample.java', displayrange='[18,24]', lan: 'java'})
                            li void putAll(Map&lt;? extends K, ? extends V> m)
                            li
                                | default V compute(K key, BiFunction&lt;? super K, ? super V, ? extends V> remappingFunction) Since 1.8
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/util/MapExample.java', displayrange='[26,32]', lan: 'java'})
                            |                     값을 다시 계산하여 덮어쓴다.
                            li
                                | default V computeIfAbsent(K key, Function&lt;? super K, ? extends V> mappingFunction) Since 1.8 + computeIfPresent
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/util/MapExample.java', displayrange='[34,56]', lan: 'java'})
                            |                     computeIfAbsent : key가 맵에 없거나, 대응하는 값이 null인 경우 새로운 값을 계산하여 넣는다. 계산된 값이 null이면 null 반환. 그 외의 경우 현재값 반환
                            br
                            |                     computeIfPresent : key가 존재하고, 대응하는 값이 null이 아닌 경우 새로운 값을 계산하여 넣는다. 키가 존재하면 현재값 반환. 그 외의 경우 null 반환
                            li
                                | default V replace(K key, V value) Since 1.8 + 1 오버로딩 + replaceAll
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/util/MapExample.java', displayrange='[58,70]', lan: 'java'})
                            |                     key가 있을 때만 대체. 없으면 null 반환
                            li
                                | default V merge(K key, V value, BiFunction&lt;? super V, ? super V, ? extends V> remappingFunction) Since 1.8
                                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/util/MapExample.java', displayrange='[72,89]', lan: 'java'})
                            ul
                                li key가 맵에 없거나, 대응하는 값이 null인 경우 : null이 아닌 value로 연결.
                                li 주어진 함수를 통해 새로운 값에 연결
                                li 결과가 null인 경우 맵에서 제거.
                            li default boolean remove(Object key, Object value) Since 1.8
                            li Set&lt;K> keySet()
                            li Collection&lt;V> values()
                            li Set&lt;Map.Entry&lt;K, V>> entrySet()
                            li default void forEach(BiConsumer&lt;? super K, ? super V> action) Since 1.8
                            li
                                | static &lt;K, V> Map&lt;K, V> of() Since 9 + 11 오버로딩
                                br
                                |                         @SafeVarargs static &lt;K, V> Map&lt;K, V> ofEntries(Map.Entry&lt;? extends K, ? extends V>... entries) Since 9
                                br
                                |                         static &lt;K, V> Map.Entry&lt;K, V> entry(K k, V v) Since 9
                                br
                                |                         static &lt;K, V> Map&lt;K, V> copyOf(Map&lt;? extends K, ? extends V> map) Since 10
                            |                     변경 불가능한 객체를 반환한다. 변경 불가능한 맵은 키와 값 모두 null을 허용하지 않으며, 모든 키와 값이 serializable하면 맵도 그러하다.
                details
                    h2.marker interface SortedMap&lt;K, V> extends Map&lt;K, V> Since 1.2
                    ol
                        li 키가 정렬된 Map. 다음 4가지 생성자를 구현할 것을 권장. (void), (Comparator), (Map), (SortedMap)
                        li Comparator&lt;? super K> comparator()
                        li SortedMap&lt;K, V> subMap(K fromKey, K toKey) + headMap, tailMap
                        |                 지정된 범위의 키만으로 구성된 서브 맵 반환. toKey는 미포함
                        li K firstKey() + lastKey
                details
                    h2.marker interface NavigableMap&lt;K, V> extends SortedMap&lt;K, V> Since 1.6
                    ol
                        li
                            | Map.Entry&lt;K, V> lowerEntry(K key) + floorEntry: &lt;=key, ceilingEntry: >=key, higherEntry: >key
                        |                 key보다 작은 키들 중 최댓값에 대한 entry 반환. 없으면 null
                        li K lowerKey(K key) + floorKey: &lt;=key, ceilingKey: >=key, higherKey: >key
                        |                 key보다 작은 키들 중 최댓값 반환. 없으면 null
                        li Map.Entry&lt;K, V> firstEntry() + lastEntry, pollFirstEntry, pollLastEntry
                        |                 poll~ : 제거하고 반환
                        li NavigableSet&lt;K> navigableKeySet() + descendingKeySet
                        li NavigableMap&lt;K, V> descendingMap()
                        li
                            | NavigableMap&lt;K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) + headMap, tailMap
            details
                h2.marker 컬렉션 연산 인터페이스
                details
                    h2.marker interface Enumeration&lt;E> Since 1.0
                    ol
                        li boolean hasMoreElements()
                        li E nextElement()
                        li default Iterator&lt;E> asIterator() Since 9
                details
                    h2.marker interface Iterator&lt;E> Since 1.2
                    ol
                        li boolean hasNext()
                        li E next()
                        li default void remove() : 마지막으로 반환된 원소를 제거. next() 호출 뒤 한 번만 호출 가능.
                        li default void forEachRemaining(Consumer&lt;? super E> action) Since 1.8
                details
                    h2.marker interface ListIterator&lt;E> extends Iterator&lt;E> Since 1.2
                    ol
                        li 양방향으로 이동 가능한 iterator.
                        li boolean hasPrevious()
                        li E previous()
                        li int nextIndex() + previousIndex
                        li void set(E e) : 마지막으로 반환된 요소를 변경
                        li void add(E e) : next()로 반환될 요소 바로전에 삽입.
                details
                    h2.marker interface PrimitiveIterator&lt;T, T_CONS> extends Iterator&lt;T> Since 1.8
                    ol
                        li 기본 타입의 박싱을 회피하기 위한 이터레이터를 제공한다
                        li OfInt, OfLong, OfDouble이 제공된다
                    details
                        h2.marker
                            | static interface PrimitiveIterator.OfInt extends PrimitiveIterator&lt;Integer, IntConsumer> Since 1.8
                        ol
                            li int nextInt()
                            li default void forEachRemaining(IntConsumer action)
                details
                    h2.marker interface Spliterator&lt;T> Since 1.8
                    ol
                        li
                            | Iterator와 마찬가지로 순회를 위한 기능을 제공한다. Iterator와 달리 병렬 순회가 가능하며, 순회 메서드가 hasNext(), next()로 이분화되지 않는다.
                        li 병렬 순회하려는 경우, 동일 Spliterator 객체를 이용하지 말고, 다른 스레드는 trySplit()을 통해 얻은 객체로 순회해야 한다.
                        li 박싱을 피하기 위한 Spliterator를 제공한다. OfInt, OfLong, OfDouble.
                    details
                        h2.marker Field h2.marker
                        |                 static int CONCURRENT, DISTINCT, IMMUTABLE, NONNULL, ORDERED, SIZED, SORTED, SUBSIZED
                    details
                        h2.marker Method Detail
                        ol
                            li boolean tryAdvance(Consumer&lt;? super T> action)
                            |                     남은 원소가 존재하면 하나를 소비하고 true 반환. 그 외엔 false
                            li default void forEachRemaining(Consumer&lt;? super T> action)
                            li Spliterator&lt;T> trySplit()
                            |                     이 spliterator를 분리할 수 있다면, 일부분을 분리하여 반환하고, 이 spliterator는 나머지 원소들을 순회한다. 그 외엔 null
                            li long estimateSize()
                            |                     forEachRemaining() 메서드에서 순회할 원소의 수를 예측하여 반환한다. 무한하거나, 알 수 없거나, 계산하는 연산이 비싼 경우 Long.MAX_VALUE를 반환하면 된다.
                            li default long getExactSizeIfKnown()
                            |                     이 spliterator가 SIZED인 경우 estimateSize()를 반환한다. 그 외엔 -1
                            li int characteristics() + hasCharacteristics
                            |                     이 spliterator의 특징 상수들을 OR로 반환하면 된다.
                            li default Comparator&lt;? super T> getComparator()
                            |                     이 spliterator의 소스가 Comparator를 이용해 정렬된(SORTED) 경우, 해당 Comparator를 반환한다. 그 외엔 null, 또는 IllegalStateException
                    details
                        h2.marker
                            | static interface Spliterator.OfInt extends Spliterator.OfPrimitive&lt;Integer, IntConsumer, Spliterator.OfInt> Since 1.8
                        ol
                            li default boolean tryAdvance(Consumer&lt;? super Integer> action) + forEachRemaining
                            |                     action이 IntConsumer 인스턴스면 형변환되어 사용된다.
                details
                    h2.marker interface RandomAccess Since 1.4
                    |             빠른(보통 상수 시간) 임의 접근이 가능한 List를 나타내는 마커 인터페이스
            details
                h2.marker 컬렉션 자료형 콘크리트 클래스
                details
                    h2.marker
                        | static class AbstractMap.SimpleEntry&lt;K, V> implements Map.Entry&lt;K, V>, Serializable Since 1.6
                    |             public SimpleEntry(K key, V value) + 오버로딩
                details
                    h2.marker
                        | static class AbstractMap.SimpleImmutableEntry&lt;K, V> implements Map.Entry&lt;K, V>, Serializable Since 1.6
                    |             public SimpleImmutableEntry(K key, V value) + 오버로딩
                details
                    h2.marker
                        | class ArrayDeque&lt;E> extends AbstractCollection&lt;E> implements Deque&lt;E>, Cloneable, Serializable Since 1.6
                    ol
                        li 가변 길이 배열로 구현한 Deque. 스레드-안전하지 않음.
                        li public ArrayDeque() + (int numElements), (Collection&lt;? extends E> c)
                details
                    h2.marker
                        | class ArrayList&lt;E> extends AbstractList&lt;E> implements List&lt;E>, RandomAccess, Cloneable, Serializable Since 1.2
                    ol
                        li 가변 길이 배열로 구현한 List. 스레드-안전하지 않음.
                        li public ArrayList() + (int initialCapacity), (Collection&lt;? extends E> c)
                        li void trimToSize() + ensureCapacity
                        |                 이 ArrayList의 capacity를 size에 맞춘다
                details
                    h2.marker
                        | class Vector&lt;E> extends AbstractList&lt;E> implements List&lt;E>, RandomAccess, Cloneable, Serializable Since 1.0
                    ol
                        li
                            | public Vector() + (int initialCapacity), (int initialCapacity, int capacityIncrement), (Collection&lt;? extends E> c) Since 1.2
                        |                 ArrayList와 달리 스레드-안전하다.
                        li void copyInto(Object[] anArray)
                        li void trimToSize()
                        li void setSize(int newSize)
                        li int capacity()
                        li void ensureCapacity(int minCapacity)
                        li Enumeration&lt;E> elements()
                        li int indexOf(Object o, int index) + lastIndexOf
                        li E firstElement() + lastElement
                details
                    h2.marker class BitSet implements Cloneable, Serializable Since 1.0
                    ol
                        li public BitSet() + (int nbits)
                        |                 각 비트의 기본값은 false. 스레드-안전하지 않음.
                        li static BitSet valueOf(long[] longs) Since 1.7 + LongBuffer, byte[], ByteBuffer
                        li byte[] toByteArray() Since 1.7 + toLongArray
                        li boolean get(int bitIndex)
                        li BitSet get(int fromIndex, int toIndex) Since 1.4
                        li void set(int fromIndex, int toIndex, boolean value) Since 1.4 + 3 오버로딩
                        li void clear(int fromIndex, int toIndex) Since 1.4 + 2 오버로딩 == set(~, false)
                        li void flip(int fromIndex, int toIndex) Since 1.4 + 1 오버로딩
                        li
                            | int nextSetBit(int fromIndex) Since 1.4 + nextClearBit, previousSetBit, previousClearBit
                        li void and(BitSet set) + or, xor
                        li void andNot(BitSet set) Since 1.2 : set에 true로 설정된 모든 index에 대해 false 설정
                        li boolean intersects(BitSet set) Since 1.4 : 하나라도 true로 일치하는 경우
                        li boolean imEmpty() Since 1.4
                        li int size() : 총 비트 수
                        li int cardinality() Since 1.4 : true 비트 수
                        li int length() Since 1.7 : the index of the highest set bit
                        li IntStream stream() Since 1.8
                details
                    h2.marker
                        | class EnumMap&lt;K extends Enum&lt;K>, V> extends AbstractMap&lt;K, V> implements Serializable, Cloneable Since 1.5
                    ol
                        li
                            | public EnumMap(Class&lt;K> keyType) + (EnumMap&lt;K, ? extends V> m), (Map&lt;K, ? extends V> m)
                        |                 Enum을 키로 이용.
                details
                    h2.marker
                        | abstract class EnumSet&lt;E extends Enum&lt;E>> extends AbstractSet&lt;E> implements Cloneable, Serializable Since 1.5
                    ol
                        li static &lt;E extends Enum&lt;E>> EnumSet&lt;E> noneOf(Class&lt;E> elementType) : 공집합 반환
                        li static &lt;E extends Enum&lt;E>> EnumSet&lt;E> allOf(Class&lt;E> elementType) : 전체 집합 반환
                        li static &lt;E extends Enum&lt;E>> EnumSet&lt;E> copyOf(Collection&lt;E> c) + 1 오버로딩
                        li static &lt;E extends Enum&lt;E>> EnumSet&lt;E> complementOf(EnumSet&lt;E> s) : 여집합 반환
                        li static &lt;E extends Enum&lt;E>> EnumSet&lt;E> of(E e) + 5 오버로딩
                        li static &lt;E extends Enum&lt;E>> EnumSet&lt;E> range(E from, E to)
                details
                    h2.marker
                        | class HashMap&lt;K, V> extends AbstractMap&lt;K, V> implements Map&lt;K, V>, Cloneable, Serializable Since 1.2
                    ol
                        li
                            | public HashMap() + (int initialCapacity), (int initialCapacity, float loadFactor), (Map&lt;? extends K, ? extends V> m)
                        |                 스레드-안전하지 않음.
                details
                    h2.marker
                        | class HashSet&lt;E> extends AbstractSet&lt;E> implements Set&lt;E>, Cloneable, Serializable Since 1.2
                    ol
                        li
                            | public HashSet() + (int initialCapacity), (int initialCapacity, float loadFactor), (Collection&lt;? extends E> c)
                        |                 스레드-안전하지 않음.
                details
                    h2.marker
                        | class IdentityHashMap&lt;K, V> extends AbstractMap&lt;K, V> implements Map&lt;K, V>, Serializable, Cloneable Since 1.4
                    ol
                        li
                            | public IdentityHashMap() + (int expectedMaxSize), (Map&lt;? extends K, ? extends V> m)
                        |                 스레드-안전하지 않다. 일반적으로 (k1==null ? k2==null : k1.equals(k2))로 키를 비교하는 것과 달리 (k1==k2)로 비교한다.
                        br
                        |                 keySet()으로 반환되는 Set&lt;K>, values()로 반환되는 Collection&lt;V>, entrySet()으로 반환되는 Set&lt;Map.Entry&lt;K, V>> 모두 원소의 비교를 == 연산으로 한다.
                details
                    h2.marker
                        | class LinkedList&lt;E> entends AbstractSequentialList&lt;E> implements List&lt;E>, Deque&lt;E>, Cloneable, Serializable Since 1.2
                    ol
                        li public LinkedList() + (Collection&lt;? extends E> c)
                        |                 List와 Deque을 모두 구현. 스레드-안전하지 않음.
                details
                    h2.marker class LinkedHashMap&lt;K, V> extends HashMap&lt;K, V> implements Map&lt;K, V> Since 1.4
                    ol
                        li
                            | public LinkedHashMap() + (int initialCapacity), (int initialCapacity, float loadFactor), (Map&lt;? extends K, ? extends V> m)
                        |                 키가 삽입된 순서대로 원소를 유지하는 이중 연결 리스트를 가진다. 키가 존재하는 상황에서 put() 호출로 순서가 변경되지 않는다. 스레드-안전하지 않다.
                        li public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)
                        |                 accessOrder == true ? 접근 빈도로 정렬 : 삽입 순서로 정렬
                details
                    h2.marker
                        | class LinkedHashSet extends HashSet&lt;E> implements Set&lt;E>, Cloneable, Serializable Since 1.4
                    ol
                        li
                            | pulbic LinkedHashSet() + (int initialCapacity), (int initialCapacity, float loadFactor), (Collection&lt;? extends E> c)
                        |                 삽입된 순서대로 원소를 유지하는 이중 연결 리스트를 가진다. 원소가 존재하는 상황에서 add() 호출로 순서가 변경되지 않는다. 스레드-안전하지 않다.
                details
                    h2.marker
                        | class PriorityQueue&lt;E> extends AbstractQueue&lt;E> implements Serializable Since 1.5
                    ol
                        li
                            | public PriorityQueue() + (int initialCapacity), (Comparator&lt;? super E> comparator) Since 1.8, (int initialCapacity, Comparator&lt;? super E> comparator), (Collection&lt;? extends E> c), (PriorityQueue&lt;? extends E> c) : c와 정렬 방향 같음, (SortedSet&lt;? extends E> c) : c와 정렬 방향 같음
                        |                 우선순위 힙에 기반한 unbounded 우선순위 큐. head가 가장 우선순위가 작은 원소.
                        li Comparator&lt;? super E> comparator()
                details
                    h2.marker class Stack&lt;E> extends Vector&lt;E> Since 1.0
                    ol
                        li public Stack()
                        |                 LIFO 스택.
                        li E push(E item) + pop, peek
                        li boolean empty() : 비었는지 여부
                        li int search(Object o) : top으로부터 거리 반환
                details
                    h2.marker
                        | class TreeMap&lt;K, V> extends AbstractMap&lt;K, V> implements NavigableMap&lt;K, V>, Cloneable, Serializable Since 1.2
                    ol
                        li
                            | public TreeMap() + (Comparator&lt;? super K> comparator), (Map&lt;? extends K, ? extends V> m), (SortedMap&lt;K, ? extends V> m)
                        |                 Red-Black tree(이진 탐색 트리의 일종) 기반의 NavigableMap 구현. log(n) 시간의 작업을 보장한다. 스레드-안전하지 않다.
                details
                    h2.marker
                        | class TreeSet&lt;E> extends AbstractSet&lt;E> implements NavigableSet&lt;E>, Cloneable, Serializable Since 1.2
                    ol
                        li
                            | public TreeSet() + (Comparator&lt;? super E> comparator), (Collection&lt;? extends E> c), (SortedSet&lt;E> s)
                        |                 TreeMap 기반의 NavigableSet 구현. 스레드-안전하지 않다.
                details
                    h2.marker class WeakHashMap&lt;K, V> extends AbstractMap&lt;K, V> implements Map&lt;K, V> Since 1.2
                    ol
                        li
                            | public WeakHashMap() + (int initialCapacity), (int initialCapacity, float loadFactor), (Map&lt;? extends K, ? extends V> m) Since 1.3
                        |                 key의 존재 여부는 key가 GC 대상이 되는 것에 영향이 없다. key 객체가 유효하지 않게 되면 자동으로 맵에서 삭제한다. key, value 모두에 null을 허용한다. 단, value가 key의 참조를 가지지 않도록 유의해야 한다. 스레드-안전하지 않다.
            details
                h2.marker 유틸리티 클래스
                details
                    h2.marker class Collections Since 1.2
                    details
                        h2.marker 필드
                        ul
                            li public static final Set EMPTY_SET : 변경 불가
                            li public static final List EMPTY_LIST : 변경 불가
                            li public static final Map EMPTY_MAP Since 1.3 : 변경 불가
                    details
                        h2.marker 리스트 연산
                        ul
                            li static &lt;T extends Comparable&lt;? super T>> void sort(List&lt;T> list) + 1 오버로딩
                            |                     T 자체가 Comparable하거나, T에 대한 Comparator를 넘기거나
                            li
                                | static &lt;T> int binarySearch(List&lt;? extends Comparable&lt;? super T>> list, T key) + 1 오버로딩
                            li
                                | static void reverse(List&lt;?> list) + shuffle, swap Since 1.4, fill, rotate Since 1.4
                            li static &lt;T> void copy(List&lt;? super T> dest, List&lt;? extends T> src)
                            li static &lt;T> boolean replaceAll(List&lt;T> list, T oldVal, T newVal) Since 1.4
                            li
                                | static int indexOfSubList(List&lt;?> source, List&lt;?> target) Since 1.4 + lastIndexOfSubList
                            li static &lt;T> ArrayList&lt;T> list(Enumeration&lt;T> e) Since 1.4
                    details
                        h2.marker Collection 연산
                        ul
                            li
                                | static &lt;T extends Object & Comparable&lt;? super T>> T min(Collection&lt;? extends T> coll) + 1 오버로딩, max
                            li static int frequency(Collection&lt;?> c, Object o) Since 1.5
                            li
                                | static boolean disjoint(Collection&lt;?> c1, Collection&lt;?> c2) Since 1.5 : 공통 원소가 없는지 여부.
                            li static &lt;T> boolean addAll(Collection&lt;? super T> c, T... elements) Since 1.5
                    details
                        h2.marker 변경 불가능한 Collection Factory
                        ul
                            li static &lt;T> Collection&lt;T> unmodifiableCollection(Collection&lt;? extends T> c)
                            li static &lt;T> Set&lt;T> unmodifiableSet(Set&lt;? extends T> s)
                            li static &lt;T> SortedSet&lt;T> unmodifiableSortedSet(SortedSet&lt;T> s)
                            li static &lt;T> NavigableSet&lt;T> unmodifiableNavigableSet(NavigableSet&lt;T> s) Since 1.8
                            li static &lt;T> List&lt;T> unmodifiableList(List&lt;? extends T> list)
                            li static &lt;K, V> Map&lt;K, V> unmodifiableMap(Map&lt;? extends K, ? extends V> m)
                            li static &lt;K, V> SortedMap&lt;K, V> unmodifiableSortedMap(SortedMap&lt;K, ? extends V> m)
                            li
                                | static &lt;K, V> NavigableMap&lt;K, V> unmodifiableNavigableMap(NavigableMap&lt;K, ? extends V> m) Since 1.8
                    details
                        h2.marker Synchronization
                        ul
                            li 비결정 상태에 빠지는 것을 방지하기 위해, 반환된 컬렉션에 대해 synchronized 제약을 걸고 이용하는 것이 좋다.
                            li static &lt;T> Collection&lt;T> synchronizedCollection(Collection&lt;T> c)
                            li static &lt;T> Set&lt;T> synchronizedSet(Set&lt;T> s)
                            li static &lt;T> SortedSet&lt;T> sychronizedSortedSet(SortedSet&lt;T> s)
                            li
                                | static &lt;T> NavigableSet&lt;T> synchronizedNavigableSet(NavigableSet&lt;T&bt; s) Since 1.8
                            li static &lt;T> List&lt;T> synchronizedList(List&lt;T> list)
                            li static &lt;K, V> Map&lt;K, V> synchronizedMap(Map&lt;K, V> m)
                            li static &lt;K, V> SortedMap&lt;K, V> synchronizedSortedMap(SortedMap&lt;K, V> m)
                            li
                                | static &lt;K, V> NavigableMap&lt;K, V> synchronizedNavigableMap(NavigableMap&lt;K, V> m) Since 1.8
                    details
                        h2.marker 타입 체킹 추가
                        ul
                            li
                                | static &lt;E> Collection&lt;E> checkedCollection(Collection&lt;E> c, Class&lt;E> type) Since 1.5
                            li static &lt;E> Queue&lt;E> checkedQueue(Queue&lt;E>, Class&lt;E> type) Since 1.8
                            li static &lt;E> Set&lt;E> checkedSet(Set&lt;E> s, Class&lt;E> type) Since 1.5
                            li
                                | static &lt;E> SortedSet&lt;E> checkedSortedSet(SortedSet&lt;E> s, Class&lt;E> type) Since 1.5
                            li
                                | static &lt;E> NavigableSet&lt;E> checkedNavigableSet(NavigableSet&lt;E> s, Class&lt;E> type) Since 1.8
                            li static &lt;E&lt; List&lt;E> checkedList(List&lt;E> list, Class&lt;E> type) Since 1.5
                            li
                                | static &lt;K, V> Map&lt;K, V> checkedMap(Map&lt;K, V> m, Class&lt;K> keyType, Class&lt;V> valueType) Since 1.5
                            li
                                | static &lt;K, V> sortedMap&lt;K, V> checkedSortedMap(SortedMap&lt;K, V> m, Class&lt;K> keyType, Class&lt;V> valueType) Since 1.5
                            li
                                | static &lt;K, V> NavigableMap&lt;K, V> checkedNavigableMap(NavigableMap&lt;K, V> m, Class&lt;K> keyType, Class&lt;V> valueType) Since 1.8
                    details
                        h2.marker Empty Collection(변경 불가)
                        ul
                            li static &lt;T> Iterator&lt;T> emptyIterator() Since 1.7
                            li static &lt;T> ListIterator&lt;T> emptyListIterator() Since 1.7
                            li static &lt;T> Enumeration&lt;T> emptyEnumeration() Since 1.7
                            li static final &lt;T> Set&lt;T> emptySet() Since 1.5
                            li static &lt;E> SortedSet&lt;E> emptySortedSet() Since 1.8
                            li static &lt;E> NavigableSet&lt;E> emptyNavigableSet() Since 1.8
                            li static final &lt;T> List&lt;T> emptyList() Since 1.5
                            li static final &lt;K, V> Map&lt;K, V> emptyMap() Since 1.5
                            li static final &lt;K, V> SortedMap&lt;K, V> emptySortedMap() Since 1.8
                            li static final &lt;K, V> NavigableMap&lt;K, V> emptyNavigableMap() Since 1.8
                    details
                        h2.marker Singleton Collection(변경 불가)
                        ul
                            li static &lt;T> Set&lt;T> singleton(T o)
                            li static &lt;T> List&lt;T> singletonList(T o) Since 1.3
                            li static &lt;K, V> Map&lt;K, V> singletonMap(K key, V value) Since 1.3
                            li static &lt;T> List&lt;T> nCopies(int n, T o)
                    details
                        h2.marker 기타
                        ul
                            li static &lt;T> Comparator&lt;T> reverseOrder()
                            |                     자연스러운 비교자의 역 반환.
                            li static &lt;T> Comparator&lt;T> reverseOrder(Comparator&lt;T> cmp) Since 1.5
                            li static &lt;T> Enumeration&lt;T> enumeration(Collection&lt;T> c)
                            li static &lt;E> Set&lt;E> newSetFromMap(Map&lt;E, Boolean&lt; map) Since 1.6
                            |                     map은 반드시 비어있어야 하며, 호출 뒤 map을 직접 접근하지 말아야 한다.
                            li static &lt;T> Queue&lt;T> asLifoQueue(Deque&lt;T> deque) Since 1.6
                            |                     deque에 대한 LIFO view를 Queue로 반환한다.
                details
                    h2.marker final class Spliterators Since 1.8
                    details
                        h2.marker
                            | abstract static class Spliterators.AbstractSpliterator&lt;T> implements Spliterator&lt;T> Since 1.8
                        ol
                            li estimateSize(), characteristics(), trySplit()을 구현한 추상 클래스
                            li + AbstractIntSpliterator, AbstractDoubleSpliterator, AbstractLongSpliterator
                    details
                        h2.marker Method Detail
                        ol
                            li static &lt;T> Spliterator&lt;T> emptySpliterator()
                            |                     + emptyIntSpliterator, emptyLongSpliterator, emptyDoubleSpliterator
                            li
                                | static &lt;T> Spliterator&lt;T> spliterator(Object[] array, int additionalCharacteristics) + 12 오버로딩
                            |                     Arrays.spliterator()가 제공하는 것에 특성을 추가하고 싶을 때 사용. 전형적으로 IMMUTABLE, ORDERED
                            li
                                | static &lt;T> Spliterator&lt;T> spliteratorUnknownSize(Iterator&lt;? extends T> iterator, int characteristics) + 3 오버로딩
                            |                     Spliterator로 래핑한 후에 iterator를 사용하면 안 된다.
                            li static &lt;T> Iterator&lt;T> iterator(Spliterator&lt;? extends T> spliterator) + 3 오버로딩
                            |                     Iterator로 래핑한 후에 spliterator를 사용하면 안 된다.
        hr
        details
            h2.marker 객체, 배열 관련
            details
                h2.marker @FunctionalInterface interface Comparator&lt;T> Since 1.2
                ol
                    li int compare(T o1, T o2)
                    li default Comparator&lt;T> reversed() Since 1.8
                    li
                        | default Comparator&lt;T> thenComparing(Comparator&lt;? super T> other) Since 1.8 + 2 오버로딩 + thenComparingInt, Long, Double
                    |             이 비교자가 두 객체를 같다고 판단하면, other가 새로 판단한다.
                    li
                        | static &lt;T extends Comparable&lt;? super T>> Comparator&lt;T> naturalOrder() Since 1.8 + reverseOrder
                    |             자연스러운 비교자를 반환한다.
                    li
                        | static &lt;T> Comparator&lt;T> nullsFirst(Comparator&lt;? super T> comparator) Since 1.8 + nullsLast
                    |             null은 모든 non-null 값보다 작다고 간주한다. null끼리는 서로 같다고 간주한다.
                    li
                        | static &lt;T, U> Comparator&lt;T> comparing(Function&lt;? super T, ? extends U> keyExtractor, Comparator&lt;? super U> keyComparator) Since 1.8 + 1 오버로딩 + comparingInt, Long, Double
                    |             정렬에 이용할 키를 생성하는 함수와, 키를 이용해 비교하는 비교자를 넘기면 둘을 포함하는 T타입 비교자를 반환.
            details
                h2.marker class Arrays Since 1.2
                details
                    h2.marker 정렬, 검색
                    ol
                        li static void sort(int[] a) + 17 오버로딩
                        li static void parallelSort(byte[] a) Since 1.8 + 17 오버로딩
                        |                 병합 정렬을 병렬로 수행한다. 모든 병렬 작업은 ForkJoin common pool을 이용해 이루어진다.
                        li static int binarySearch(long[] a, long key) + 17 오버로딩
                details
                    h2.marker 변경, 변환
                    ol
                        li static void fill(long[] a, long val) + 17 오버로딩
                        li
                            | static &lt;T> void setAll(T[] array, IntFunction&lt;? extends T> generator) Since 1.8 + 3 오버로딩
                        li
                            | static &lt;T> void parallelSetAll(T[] array, IntFunction&lt;? extends T> generator) SInce 1.8 + 3 오버로딩
                        li
                            | static &lt;T> void parallelPrefix(T[] array, BinaryOperator&lt;T> op) Since 1.8 + 7 오버로딩
                        |                 전체 원소에 순차적으로 연산 적용하여 값 변경. 큰 배열은 루프보다 이게 더 빠르다.
                        li static String toString(long[] a) Since 1.5 + 8 오버로딩
                        li static String deepToString(Object[] a) Since 1.5
                        |                 toString(Object[])이 o.toString()을 이용하는 반면, 여기서는 String.valueOf(Object)가 이용되고, 원소가 배열인 경우 "[]"를 추가하고 해당 배열의 원소들에 대해 같은 작업을 한다.
                        li static &lt;T> List&lt;T> asList(T... a)
                        li static &lt;T> Spliterator&lt;T> spliterator(T[] array) Since 1.8 + 7 오버로딩
                        |                 characteristics()에서 SIZED | SUBSIZED | ORDERED | IMMUTABLE를 반환하는 Spliterator 인스턴스를 반환한다.
                        li static &lt;T> Stream&lt;T> stream(T[] array) Since 1.8 + 7 오버로딩
                details
                    h2.marker 복사
                    ol
                        li
                            | static &lt;T, U> T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]> newType) Since 1.6
                        li static &lt;T> T[] copyOf(T[] original, int newLength) Since 1.6 + 8 오버로딩
                        li
                            | static &lt;T, U> T[] copyOfRange(U[] original, int from, int to, Class&lt;? extends T[]> newType) Since 1.6
                        li static &lt;T> T[] copyOfRange(T[] original, int from, int to) Since 1.6 + 8 오버로딩
                details
                    h2.marker 비교
                    ol
                        li static int compare(boolean[] a, boolean[] b) Since 9 + 19 오버로딩
                        li static int compareUnsigned(byte[] a, byte[] b) Since 9 + 7 오버로딩
                        li static int mismatch(boolean[] a, boolean[] b) Since 9 + 19 오버로딩
                        |                 처음으로 일치하지 않는 인덱스 반환.
                        li static boolean equals(long[] a, long[] a2) + 9 오버로딩
                        li
                            | static boolean equals(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex) Since 9 + 9 오버로딩
                        |                 Object의 경우, Objects.equals(e1, e2)일 때 같다고 간주한다.
                        li static boolean deepEquals(Object[] a1, Object[] a2) Since 1.5
                        |                 null일 수 있는 각 배열의 두 원소 e1, e2에 대하여, 다음 4가지 경우에 대해 둘이 같다고 판단한다.
                        ol
                            li e1 == e2
                            li 둘 모두 참조변수에 대한 배열이고, Arrays.deepEquals(e1, e2)가 true
                            li 둘 모두 원시타입에 대한 배열이고, Arrays.equals(e1, e2)가 true
                            li e1.equals(e2)가 true
                details
                    h2.marker 해싱
                    ol
                        li static int hashCode(long[] a) Since 1.5 + 8 오버로딩
                        |                 동일 원소를 가진 List의 해시코드와 동일. null이면 0 반환
                        li static int deepHashCode(Object[] a) Since 1.5
                        |                 원소가 배열인 경우, 해당 원소의 해시를 deepHashCode로 구한다. 자기 자신을 포함하는 배열 등은 적합하지 않다.
            details
                h2.marker final class Objects Since 1.7
                details
                    h2.marker 비교
                    ul
                        li static boolean equals(Object a, Object b)
                        li static boolean deepEquals(Object a, Object b)
                        |                 둘 다 null이면 true. 둘 다 배열이면 Arrays.deepEquals(), 나머진 a.equals(b)
                        li static &lt;T> int compare(T a, T b, Comparator&lt;? super T> c)
                details
                    h2.marker hashCode
                    ul
                        li static int hashCode(Object o)
                        li static int hash(Object... values)
                        |                 values가 하나의 배열에 든 것처럼 Arrays.hashCode(Object[])를 이용한다. Object.hashCode()의 간편한 구현으로 이용할 수 있다.
                        br
                        strong 주의. hashCode(o) != hash(o)
                details
                    h2.marker toString
                    ul
                        li static String toString(Object o)
                        li static String toString(Object o, String nullDefault)
                details
                    h2.marker null
                    ul
                        li static boolean isNull(Object obj) Since 1.8 + nonNull
                        |                 Predicate, filter(Objects::isNull)에 이용
                        li static &lt;T> T requireNonNull(T obj) + 2 오버로딩
                        |                 메서드나 생성자에서 null검사를 하도록 설계되었다.
                        li static &lt;T> T requireNonNullElse(T obj, T defaultObj) Since 9
                        li
                            | static &lt;T> T requireNonNullElseGet(T obj, Supplier&lt;? extends T> supplier) Since 9
                details
                    h2.marker index
                    ul
                        li static int checkIndex(int index, int length) Since 9
                        |                 index가 [0, length)에 존재하면 그대로 반환. 아니면 예외 발생.
                        li static int checkFromToIndex(int fromIndex, int toIndex, int length) Since 9
                        |                 subrange [fromIndex, toIndex)가 [0, length)에 포함되면 fromIndex 반환. 아니면 예외 발생.
                        li static int checkFromIndexSize(int fromIndex, int size, int length) Since 9
                        |                 subrange [fromIndex, fromIndex + size)가 [0, length)에 포함되면 fromIndex 반환. 아니면 예외 발생.
            details
                h2.marker final class Optional&lt;T> Since 1.8 + OptionalInt, OptionalDouble, OptionalLong
                ol
                    li
                        | static &lt;T> Optional&lt;T> empty()
                        br
                        |                 static &lt;T> Optional&lt;T> of(T value)
                        br
                        |                 static &lt;T> Optional&lt;T> ofNullable(T value) : null이면 empty(), 아니면 of(value)
                    |                 null을 허용하지 않는 객체에 대한 컨테이너. value-based므로 identity-sensitive한 연산은 피해야 한다.
                    li T get()
                    li boolean isPresent() + isEmpty Since 11
                    li void ifPresent(Consumer&lt;? super T> action)
                    li void ifPresentOrElse(Consumer&lt;? super T> action, Runnable emptyAction) Since 9
                    li
                        | Optional&lt;T> filter(Predicate&lt;? super T> predicate) : 값이 존재하고 필터를 통과하면 그대로 반환. 아니면 빈 컨테이너 반환
                    li &lt;U> Optional&lt;U> map(Function&lt;? super T, ? extends U> mapper)
                    li
                        | &lt;U> Optional&lt;U> flatMap(Function&lt;? super T, ? extends Optional&lt;? extends U>> mapper)
                    |             mapper가 반환하는 값 자체가 Optional이므로 map()과 달리 추가적인 Optional로 감싸지 않는다.
                    li Optional&lt;T> or(Supplier&lt;? extends Optional&lt;? extends T>> supplier) Since 9
                    |             값이 존재하면 그대로 반환. 없으면 제공되는 값 반환.
                    li T orElse(T other)
                    li T orElseGet(Supplier&lt;? extends T> supplier)
                    li T orELseThrow() Since 10 : 값이 없으면 NoSuchElementException + 1 오버로딩
                    li Stream&lt;T> stream() Since 9
                    |             값이 존재하면 해당 값 하나만 포함하는 스트림 반환. 없으면 빈 스트림 반환.
        hr
        details
            h2.marker 시간 관련
            details
                h2.marker class Date implements Serializable, Cloneable, Comparable&lt;Date> Since 1.0
                ol
                    li public Date() + (long date)
                    li long getTime() + setTime
                    li boolean before(Date when) + after
                    li static Date from(Instant instant) Since 1.8 + toInstant
            details
                h2.marker
                    | abstract class Calendar implements Serializable, Cloneable, Comparable&lt;Calendar> Since 1.1
                ol
                    li 관대함 Leniency : 범위를 벗어나는 값도 받아들이며, 나중에 정규화한다. 예를 들어 1월 32일은 2월 1일이 된다.
                    li add와 roll : add는 오버플로되면 다음 단위가 변하지만, roll은 modulo연산처럼 해당 단위만 변한다.
                details
                    h2.marker static class Calendar.Builder Since 1.8
                    ul
                        li public Builder()
                    ol
                        li Calendar.Builder setInstant(long instant) : 밀리초 + 1 오버로딩
                        li Calendar.Builder set(int field, int value)
                        li Calendar.Builder setFields(int... fieldValuePairs)
                        |                 예: setFields(Calendar.YEAR, 2013, Calendar.MONTH, Calendar.DECEMBER, Calendar.DAY_OF_MONTH, 23)
                        li Calendar.Builder setDate(int year, int month, int dayOfMonth)
                        li Calendar.Builder setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)
                        li Calendar.Builder setTimeOfDay(int hourOfDay, int minute, int second) + 1 오버로딩
                        li Calendar.Builder setTimeZone(TimeZone zone)
                        li
                            | Calendar.Builder setCalendarType(String type) : Calendar.getAvailableCalendarTypes()
                        li Calendar.Builder setLocale(Locale locale)
                        li
                            | Calendar.Builder setWeekDefinition(int fistDayOfWeek, int minimalDaysInFirstWeek)
                        li Calendar.Builder setLenient(boolean lenient) : build()에서 사용된다
                    ul
                        li Calendar build()
                details
                    h2.marker Field Detail
                    ol
                        li 시간 단위
                        |                 public static final int ERA, YEAR, MONTH, WEEK_OF_YEAR, WEEK_OF_MONTH_, DATE, ...
                        li 단위 개수
                        |                 public static final int FIELD_COUNT
                        li 단위 상수
                        |                 public static final int SUNDAY, ..., JANUARY, ...AM, PM
                        li 스타일
                        |                 public static final int ALL_STYLES, SHORT, LONG, NARROW_FORMAT, ...
                details
                    h2.marker Method Detail
                    ol
                        li static Calendar getInstance() + 3 오버로딩
                        li static Locale[] getAvailableLocales()
                        li static Set&lt;String> getAvailableCalendarTypes() Since 1.8
                        li boolean equals(Object obj) + after, before
                        li final Date getTime() + setTime
                        li long getTimeInMillis() + setTimeInMillis
                        li int get(int field) + set
                        li abstract void add(int field, int amount)
                        li abstract void roll(int field, boolean up) : 1 기본단위만큼 up/down
                        li void roll(int field, int amount) Since 1.2
                        li final void clear() + 1 오버로딩 : 설정 취소. isSet()이 false를 반환
                        li final boolean isSet(int field)
                        li String getDisplayName(int field, int style, Locale locale) Since 1.6 + 1 오버로딩
                        li String getCalendarType() Since 1.8
                        li TimeZone getTimeZone() + setTimeZone
                        li boolean isLenient() + setLenient
                        li int getFirstDayOfWeek() + setFirstDayOfWeek
                        li int getMinimalDaysInFirstWeek() + setMinimalDaysInFirstWeek
                        |                 첫 주의 시작이 1월 1일인 경우 1, 그 외의 경우 7
                        li boolean isWeekDateSupported() Since 1.7 : default false
                        |                 getWeekYear(), setWeekDate(int,int,int), getWeeksInWeekYear() 등을 지원하는지 여부.
            details
                h2.marker class GregorianCalendar extends Calendar Since 1.1
                ol
                    li GregorianCalendar는 아래 메서드를 지원한다.
                    li int getWeekYear() Since 1.7
                    li void setWeekDate(int weekYear, int weekOfYear, int dayOfWeek) Since 1.7
                    li int getWeeksInWeekYear()
                    li final Instant toInstant() Since 1.8
                    li int getActualMaximum(int field)
                    li int getActualMinimum(int field)
            details
                h2.marker class Timer Since 1.3
                ol
                    li
                        | 백그라운드 스레드에서 미래에 실행될 작업들을 스케쥴링하는 기능을 제공한다. 작업은 일회용일수도, 일정한 주기를 가지고 반복될 수도 있다. 한 타이머의 모든 작업들은 하나의 백그라운드 스레드를 공유하기 때문에, 작업의 실행은 직렬적이며, 따라서 각 작업들은 가능한 한 빠르게 종료되어야 한다. 그렇지 않은 경우, 뒤에 대기하는 모든 작업이 밀려 제대로 실행되지 않을 수 있다.
                    |             스레드-안전하다. 정시성을 보장하지 않는다. 스케쥴은 Object.wait(long) 메서드를 통해 이루어진다. java.util.concurrent 패키지의 ScheduledThreadPoolExecutor가 더 나은 대안으로 이용될 수 있다.
                    li
                        | 기본적으로 타이머의 백그라운드 스레드는 데몬 스레드가 아니다. 따라서 타이머의 작업이 전체 프로그램의 종료를 지연시킬 수 있다. 백그라운드 스레드는 타이머 임의의 생성자에 의해 시작된다.
                details
                    h2.marker Constructor Detail
                    ol
                        li public Timer()
                        li public Timer(boolean isDaemon)
                        li public Timer(String name) Since 1.5
                        li public Timer(String name, boolean isDaemon) Since 1.5
                details
                    h2.marker Method Detail
                    ol
                        li void schedule(TimerTask task, long delay)
                        |                 delay밀리초 이후 task가 실행되도록 스케쥴.
                        li void schedule(TimerTask task, Date time)
                        |                 time에 task가 실행되도록 스케쥴. time이 과거라면 즉시 실행
                        li void schedule(TimerTask task, long delay, long period)
                        |                 delay밀리초 이후 period 주기를 갖고 task가 실행되도록 스케쥴.
                        li void schedule(TimerTask task, Date firstTime, long period)
                        |                 firstTime 이후 period 주기를 갖고 task가 실행되도록 스케쥴.
                        li void scheduleAtFixedRate(TimerTask task, long delay, long period) + 1 오버로딩
                        |                 period가 이전 task 종료가 아닌 최초 실행 시점을 기준으로 작동한다. 따라서 어떤 이유로 이전 작업이 지연된 경우, 시간당 작업률을 맞추기 위해 이후 작업이 연속적으로 실행될 수 있다.
                        li void cancel()
                        |                 타이머를 종료한다. 스케쥴된 모든 작업을 버리고, 현재 실행중인 작업에는 간섭하지 않는다. 타이머 종료 후 백그라운드 스레드도 우아하게 종료되어 GC 대상이 된다. 이후 더 이상의 스케쥴은 불가능하다.
                        li int purge() Since 1.5
                        |                 호출할 일이 거의 없는 메서드. 많은 작업을 한번에 취소한 경우, 취소한 작업들을 제거하여 참조가 없는 경우 GC 대상이 되도록 한다.
            details
                h2.marker abstract class TimerTask implements Runnable Since 1.3
                ol
                    li Timer 작업으로 사용하기 위한 Runnable
                details
                    h2.marker Method Detail
                    ol
                        li boolean cancel()
                        ul
                            li 작업을 취소한다.
                            li 작업이 1회용으로 스케쥴되었지만 아직 실행되지 않은 경우, 또는 아직 스케쥴되지 않은 경우 작업은 결코 실행되지 않는다.
                            li 반복 작업으로 스케쥴된 경우, 작업은 결코 반복되지 않는다.
                            li 작업 도중에 호출된 경우, 작업은 마무리까지 실행된다.
                            li 반복 호출 가능하며 2회째 호출부터는 아무런 영향이 없다.
                            li true 반환 : 1회용으로 스케쥴되었지만 아직 실행되지 않은 경우, 반복 작업으로 스케쥴된 경우
                            li false 반환 : 1회용으로 스케쥴되어 이미 실행된 경우, 아직 스케쥴되지 않은 경우, 이미 취소된 경우
                        li long scheduledExecutionTime()
                        |                 가장 최근에 스케쥴된 ─ 또한 실제로 실행된 ─ 시점을 반환한다. 전형적으로 run 메서드에서, 작업이 너무 길어지는 것을 방지하기 위해 사용된다.
        hr
        details
            h2.marker 숫자 관련
            details
                h2.marker
                    | class Doubleh2.markerStatistics implements DoubleConsumer Since 1.8 + Inth2.markerStatistics, Longh2.markerStatistics
                ol
                    li double에 관한 통계를 모은 상태 객체. 스트림과 함께 사용되도록 설계되었다.
                    |             예. var stats = doubleStream.collect(Doubleh2.markerStatistics::new, Doubleh2.markerStatistics::accept, Doubleh2.markerStatistics::combine);
                    br
                    |             예. var stats = people.stream().collect(Collectors.summarizingDouble(Person::getWeight));
                    li
                        | Doubleh2.markerStatistics() + (long count, double min, double max, double sum) Since 10
                    |             갯수 0, 합계 0, 최솟값 Double.POSITIVE_INFINITY, 최댓값 Double.NEGATIVE_INFINITY, 평균 0인 객체 생성.
                    li void accept(double value) : 요약 정보에 value를 추가
                    li void combine(Doubleh2.markerStatistics other) : other를 호출자에 추가
                    li final long getCount() + getSum, getMin, getMax, getAverage
            details
                h2.marker class Random implements Serializable Since 1.0
                ol
                    li public Random() + (long seed)
                    |             의사난수 생성기. 스레드-안전하지만 성능 저하 가능성이 있으므로 ThreadLocalRandom을 고려할 것.
                    li void setSeed(long seed)
                    li void nextBytes(byte[] bytes) Since 1.1
                    li int nextInt() + 1 오버로딩, nextLong, nextBoolean Since 1.2, nextFloat, nextDouble
                    li double nextGaussian()
                    |             평균 0, 표준분산 1인 정규분포 난수 반환
                    details
                        h2.marker 난수 스트림
                        ol
                            li Long, Double 버전 존재
                            li IntStream ints(long streamSize) Since 1.8
                            li IntStream ints() Sine 1.8 : ints(Long.MAX_VALUE)
                            li
                                | IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) Since 1.8 : [origin, bound)
                            li IntStream ints(int randomNumberOrigin, int randomNumberBound) Since 1.8
            details
                h2.marker final class SplittableRandom Since 1.8
                ol
                    li public SplittableRandom() + (long seed)
                    |             분열하는 의사난수 생성기. 스레드-안전하지 않으며, 분열하여 스레드들이 각자 하나씩 갖도록 설계되었다.
                    li SplittableRandom split() : 분열. 상태를 공유하진 않지만, 발생한 난수들은 통계적으로 유사한 속성을 갖는다.
        hr
        details
            h2.marker 문자열 및 국제화 관련
            details
                h2.marker class Base64 Since 1.8
                ol
                    li Base64 인코더와 디코더를 반환하는 유틸리티. RFC 2045, 4648
                details
                    h2.marker static class Base64.Encoder Since 1.8
                    ol
                        li byte[] encode(byte[] src)
                        li int encode(byte[] src, byte[] dst) : 쓴 바이트 수 반환
                        li
                            | String encodeToString(byte[] src) : new String(encode(src), StandardCharsets.ISO_8859_1)
                        li ByteBuffer encode(ByteBuffer buffer)
                        li OutputStream wrap(OutputStream os)
                        li Base64.Encoder withoutPadding()
                details
                    h2.marker static class Base64.Decoder Since 1.8
                    ol
                        li byte[] decode(byte[] src)
                        li byte[] decode(String src)
                        li int decode(byte[] src, byte[] dst)
                        li ByteBuffer decode(ByteBuffer buffer)
                        li InputStream wrap(InputStream is)
                details
                    h2.marker Method Detail
                    ol
                        li static Base64.Encoder getEncoder()
                        li static Base64.Encoder getUrlEncoder()
                        li static Base64.Encoder getMimeEncoder()
                        li static Base64.Encoder getMimeEncoder(int lineLength, byte[] lineSeparator)
                        li static Base64.Decoder getDecoder()
                        li static Base64.Decoder getUrlDecoder()
                        li static Base64.Decoder getMimeDecoder()
            details
                h2.marker final class Formatter implements Closeable, Flushable Since 1.5
                ol
                    li formatter.format("%4$2s %3$2s %2$2s %1$2s", "a", "b", "c", "d")
                    li
                        a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Formatter.html')
                            | https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Formatter.html
            details
                h2.marker final class Locale implements Cloneable, Serializable Since 1.1
                ol
                    li public static final Locale US, ENGLISH, KOREA, KOREAN, ...
                    li
                        a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Locale.html')
                            | https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Locale.html
            details
                h2.marker final class Scanner implements Iterator&lt;String>, Closeable Since 1.5
                ol
                    li 정규 표현식을 통해 원시 타입과 String을 분리해내는 간단한 text scanner.
                    li 지정되지 않은 경우, 기본 구분자 패턴은 공백 문자(Character::isWhitespace)
                    li 기저 스트림으로부터 입력을 대기하는 동안 스레드가 블록될 수 있다.
                    li
                        | 기저 Readable의 read()에서 IOException이 발생한 경우 소스의 끝에 도달했다고 판단하며, 가장 최근의 예외는 ioException()을 통해 얻을 수 있다
                    li 기저 스트림이 Closeable인 경우, Scanner에 대해 close()가 호출되면 기저 스트림도 닫힌다
                details
                    h2.marker Constructor Detail
                    ol
                        li public Scanner(Readable source)
                        li public Scanner(InputStream source) + 2 오버로딩
                        li public Scanner(File source) + 2 오버로딩
                        li public Scanner(Path source) Since 1.7 + 2 오버로딩
                        li public Scanner(String source)
                        li public Scanner(ReadableByteChannel source) + 2 오버로딩
                details
                    h2.marker Method Detail
                    ol
                        li Pattern delimiter() + useDelimiter
                        li Locale locale() + useLocale
                        li int radix() + useRadix
                        li boolean hasNext() + 2 오버로딩, next
                        |                 + boolean, byte, short, int, long, float, double, BigInteger, BigDecimal
                        li boolean hasNextLine() + nextLine
                        li String findInLine(Pattern pattern) + 1 오버로딩
                        |                 구분자를 무시하고 pattern을 검색한다. 줄 바꿈 문자 전에 문자열을 찾으면 해당 문자열을 반환하고 다음 라인으로 넘어간다. 줄 바꿈 문자를 만날 때까지 매칭이 없으면 읽기 위치는 변경없이 null을 반환한다.
                        li String findWithinHorizon(Pattern pattern, int horizon) + 1 오버로딩
                        |                 구분자를 무시하고 pattern을 검색한다. 현재 위치로부터 최대 horizon개의 code point만을 검색에 이용한다. horizon == 0인 경우, 제한없이 검색을 수행한다. 매칭된 문자열이 없으면 읽기 위치 변경없이 null을 반환한다.
                        li Scanner skip(Pattern pattern) + 1 오버로딩
                        |                 구분자를 무시하고 pattern을 검색한다. 매칭된 문자열이 있으면 건너뛰고, 없으면 읽기 위치 변경 없이 NoSuchElementException 발생.
                        li MatchResult match()
                        |                 가장 최근의 매칭 결과를 반환한다. MatchResult는 각종 next, findInLine, findWithinHorizon, skip 메서드의 성공적인 실행으로 설정된다.
                        li Stream&lt;MatchResult> findAll(Pattern pattern) Since 9 + 1 오버로딩
                        |                 스트림의 MatchResult 순서는 findWithinHorizon(pattern, 0), match()를 반복적으로 호출한 것과 동일하다.
                        li Stream&lt;String> tokens() Since 9
                        |                 구분자로 자른 문자열들의 스트림을 반환한다
                        li IOException ioException()
                        li Scanner reset() Since 1.6
                        |                 scanner.useDelimiter("\\p{javaWhitespace}+").useLocale(Locale.getDefault(Locale.Category.FORMAT)).useRadix(10);
            details
                h2.marker class StringTokenizer implements Enumberation&lt;Object> Since 1.0
                ol
                    li public StringTokenizer(String str, String delim, boolean returnDelims) + 2 오버로딩
                    li boolean hasMoreTokens()
                    li String nextToken() + 1 오버로딩
                    li int countTokens()
            details
                h2.marker final class StringJoiner Since 1.8
                ol
                    li public StringJoiner(CharSequence delimiter) + 1 오버로딩
                    li StringJoiner setEmptyValue(CharSequence emptyValue)
                    |             StringJoiner가 비어있을 때 toString()에서 반환할 대체문자열 설정.
                    li StringJoiner add(CharSequence newElement)
                    li StringJoiner merge(StringJoiner other)
                    li int length()
        hr
        details
            h2.marker class Properties extends Hashtable&lt;Object, Object> Since 1.0
            ol
                li
                    | stream을 통해 로드/저장되는 영구적인 속성값들을 표현. 기본값으로 이용하기 위해 다른 Properties를 포함할 수 있다. 스레드-안전하다.
            details
                h2.marker Constructor Detail
                ol
                    li public Properties()
                    li public Properties(int initialCapacity)
                    li public Properties(Properties defaults)
            details
                h2.marker Method Detail
                ol
                    li Object setProperty(String key, String value) Since 1.2
                    li String getProperty(String key)
                    li String getProperty(String key, String defaultValue)
                    li Enumeration&lt;?> propertyNames()
                    li Set&lt;String> stringPropertyNames() Since 1.6
                    li void load(Reader reader) Since 1.6
                    li void load(InputStream inStream) Since 1.2
                    li void store(Writer writer, String comments) Since 1.6
                    li void store(OutputStream out, String comments) Since 1.2
                    li void loadFromXML(InputStream in) Since 1.5
                    li void storeToXML(OutputStream os, String comment) Since 1.5 + 2 오버로딩
                    li void list(PrintStream out) + 1 오버로딩 : 디버깅에 유용
        hr
        details
            h2.marker final class UUID implements Serializable, Comparable&lt;UUID> Since 1.5
            ol
                li public UUID(long mostSigBits, long leastSigBits) : 2개 long을 이용해 128비트 UUID 생성
                li static UUID randomUUID() : type 4 UUID 생성
                li static UUID nameUUIDFromBytes(byte[] name) : type 3 UUID 생성
                li static UUID fromString(String name) : toString() 결과로부터 UUID 생성
                li + com.fasterxml.uuid, com.datastax.cassandra
                li int version()
                |         1 Time-based UUID, 2 DCE security UUID, 3 Name-based UUID, 4 Randomly generated UUID
                li int variant()
                |         0 Reserved for NCS, 2 RFC 4122(이 클래스에서 사용), 6 Reserved for Microsoft, 7 Reserved for future
                li long timestamp()
                |         60비트로 구성된 Time-based UUID의 시각을 반환한다. 1582-10-15 00:00:00 UTC로부터 몇 100ns가 흘렀는지를 의미한다
                li long node()
                |         Time-based UUID의 48비트 Mac address를 반환한다.
        hr


    h1.marker java.util.concurrent Since 1.5
        details
            h2.marker @FunctionalInterface interface Callable&lt;V> Since 1.5
            |     V call() : 매개변수 없는, 결과를 반환하는 작업을 정의. Runnable과 달리 checked 예외를 던져도 된다.
        hr
        details
            h2.marker interface ThreadFactory Since 1.5
            |     Thread newThread(Runnable r)
        hr
        details
            h2.marker 비동기 자료형 관련
            details
                h2.marker interface Future&lt;V> Since 1.5
                ol
                    li 비동기적 계산의 결과를 표현. 결과는 오직 get 메서드로만 얻을 수 있으며, 필요하다면 결과가 준비될 때까지 블록시킨다.
                    li boolean cancel(boolean mayInterruptIfRunning) + isCancelled
                    |             작업이 완료됐거나 이미 취소된 경우 false를 반환한다. 이 메서드가 종료된 후의 isDone()은 항상 true.
                    li boolean isDone()
                    li V get()
                    |             결과가 준비될 때까지 대기
                    li V get(long timeout, TimeUnit unit)
                    |             결과가 준비될 때까지 최대 timeout만큼 대기
            details
                h2.marker interface RunnableFuture&lt;V> extends Runnable, Future&lt;V> Since 1.6
                ol
                    li Runnable한 Future. 즉 비동기 연산과 그 결과를 표현한다.
                    li void run() : Future로 하여금 결과를 설정하도록 한다.
            details
                h2.marker class FutureTask&lt;V> implements RunnableFuture&lt;V> Since 1.5
                ol
                    li public FutureTask(Callable&lt;V> callable)
                    li public FutureTask(Runnable runnable, V result)
                    li protected void done() : 완료 상태로 천이되면 호출된다
                    li protected void set(V v) : 결과 설정
                    li protected boolean runAndReset() : 반복 실행 목적
            details
                h2.marker interface Delayed extends Comparable&lt;Delayed> Since 1.5
                ol
                    li 객체가 일정 지연 뒤 작동함을 마킹하는 인터페이스. 이를 구현할 땐 compareTo를 반드시 같이 구현해야 한다.
                    li long getDelay(TimeUnit unit)
            details
                h2.marker interface ScheduledFuture&lt;V> extends Delayed, Future&lt;V> Since 1.5
                |         ScheduledExecutorService의 스케쥴링 결과.
            details
                h2.marker
                    | interface RunnableScheduledFuture&lt;V> extends RunnableFuture&lt;V>, ScheduledFuture&lt;V> Since 1.6
                ol
                    li Runnable한 ScheduledFuture.
                    li boolean isPeriodic()
            details
                h2.marker interface CompletionStage&lt;T> Since 1.8
                ol
                    li 비동기적일 수 있는 계산 단계. 다른 CompletionStage가 완료된 뒤 어떠한 동작을 수행하거나 값을 계산한다.
                    |             Stage에서 수행되는 연산은 Function, Consumer, Runnable로 표현되어야 한다. 각각은 apply, accept, run 메서드로 stage에 제공된다.
                    |             연산에 넘겨지는 인자는 트리거 stage의 결과이며, 이를 통해 연산의 pipeline을 만들 수 있다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/CompletionStageTest.java', lan: 'java'})
                    li
                        | &lt;U> CompletionStage&lt;U> thenApply(Function&lt;? super T, ? extends U> fn) + thenApplyAsync
                        br
                        |                 CompletionStage&lt;Void> thenAccept(Consumer&lt;? super T> action) + thenAcceptAsync
                        br
                        |                 CompletionStage&lt;Void> thenRun(Runnable action) + thenRunAsync
                    |             이전 연산이 완료되면 그 결과로 fn, action 호출
                    li
                        | &lt;U, V> CompletionStage&lt;V> thenCombine(CompletionStage&lt;? extends U> other, BiFunction&lt;? super T, ? super U, ? extends V> fn) + thenCombineAsync
                        br
                        |                 &lt;U> CompletionStage&lt;Void> thenAcceptBoth(CompletionStage&lt;? extends U> other, BiConsumer&lt;? super T, ? super U> action) + thenAcceptBothAsync
                        br
                        |                 CompletionStage&lt;Void> runAfterBoth(CompletionStage&lt;?> other, Runnable action) + runAfterBothAsync
                    |             this와 other 모두가 종료되면 그 결과로 fn, action 호출
                    li
                        | &lt;U> CompletionStage&lt;U> applyToEither(CompletionStage&lt;? extends T> other, Function&lt;? super T, U> fn) + applyToEitherAsync
                        br
                        |                 CompletionStage&lt;Void> acceptEither(CompletionStage&lt;? extends T> other, Consumer&lt;? super T> action) + acceptEitherAsync
                        br
                        |                 CompletionStage&lt;Void> runAfterEither(CompletionStage&lt;?> other, Runnable action) + runAfterEitherAsync
                    |             this나 other 둘 중 하나라도 종료되면 그 결과로 fn, action 호출
                    li
                        | &lt;U> CompletionStage&lt;U> thenCompose(Function&lt;? super T, ? extends CompletionStage&lt;U>> fn) + thenComposeAsync
                    |             this의 결과를 인자로 fn이 반환하는 CompletionStage가 실행되고, 실행된 결과와 같은 값으로 종료되는 CompletionStage를 반환한다
                    li
                        | &lt;U> CompletionStage&lt;U> handle(BiFunction&lt;? super T, Throwable, ? extends U> fn) + handleAsync
                    |             this가 종료되면 결과와 예외를 인자로 fn을 실행하고, fn의 결과로 반환된 stage를 종료한다.
                    li
                        | CompletionStage&lt;T> whenComplete(BiConsumer&lt;? super T, ? super Throwable> action) + whenCompleteAsync
                    |             this가 종료되면 결과와 예외를 인자로 action을 실행하고, action이 종료되면 반환된 stage도 종료된다.
                    li
                        | CompletionStage&lt;T> exceptionally(Function&lt;Throwable, ? extends T> fn) + exceptionallyAsync Since 12
                    |             this가 예외를 발생하면 그것을 인자로 fn 실행하는 CompletionStage 반환. 예외 발생이 없는 경우, this의 결과와 같은 값으로 반환된 stage가 종료된다.
                    li
                        | default CompletionStage&lt;T> exceptionallyCompose(Function&lt;Throwable, ? extends CompletionStage&lt;T>> fn) Since 12 + exceptionallyComposeAsync
                    |             this가 예외를 발생하면 fn이 반환하는 CompletionStage로 구성된다.
                    li CompletableFuture&lt;T> toCompletableFuture()
            details
                h2.marker class CompletableFuture&lt;T> impliments Future&lt;T>, CompletionStage&lt;T> Since 1.8
                ol
                    li CompletionStage로 이용될 수 있는, 명시적으로 종료(값과 상태를 설정)되는 Future.
                    li 둘 이상의 스레드가 complete, completeExceptionally, cancel을 호출할 경우, 하나만 성공한다.
                    li non-async 메서드로 등록된 작업은 현재 CompletableFuture가 완료된 스레드 또는 호출자에서 실행된다.
                    li 명시적인 Executor 없이 async 메서드로 등록된 작업은 ForkJoinPool#commonPool에서 수행.
                    li CompletionStage 메서드들을 독립적으로 구현했기 때문에, 하나를 재정의해도 다른 메서드에 영향이 없다.
                    li
                        | CompletionStage 메서드들만 이용하도록 하려면 minimalCompletionStage()를, future를 변경하지 못하도록 하려면 copy()를 이용.
                    li
                        | 전반적인 계산에 대한 직접적인 제어를 할 수 없어서 cancel()의 호출은 completeExceptionally(new CancellationException()) 호출과 동일하다
                    li 서브클래스들은 각자의 클래스 인스턴스를 반환하도록 newIncompletableFuture 메서드를 재정의해야 한다
                details
                    h2.marker static interface CompletableFuture.AsynchronousCompletionTask Since 1.8
                    |             비동기 메서드에서 생성된 비동기 작업을 나타내는 마커 인터페이스
                details
                    h2.marker Method Detail
                    ol
                        li static &lt;U> CompletableFuture&lt;U> supplyAsync(Supplier&lt;U> supplier) + 1 오버로드
                        |                 supplier의 결과를 가지고 비동기 종료되는 CompletableFuture 반환
                        li static CompletableFuture&lt;Void> runAsync(Runnable runnable) + 1 오버로드
                        |                 runnable을 실행하고 비동기 종료되는 CompletableFuture 반환
                        li static &lt;U> CompletableFuture&lt;U> completedFuture(U value)
                        |                 이미 특정 값으로 종료된 CompletableFuture 반환
                        li static CompletableFuture&lt;Void> allOf(CompletableFuture&lt;?>... cfs)
                        |                 모든 cfs가 종료되면 완료되는 새로운 CompletableFuture 객체 반환. 하나라도 예외 종료되면 반환된 CompletableFuture도 그러하다. cfs가 빈 경우, null로 종료된다
                        li static CompletableFuture&lt;Object> anyOf(CompletableFuture&lt;?>... cfs)
                        |                 하나라도 종료되면, 그 결과와 같은 값으로 종료되는 CompletableFuture 객체 반환. cfs가 빈 경우, 완료되지 않는다
                        li T join()
                        |                 종료되면 결과 값 반환, 또는 발생한 예외 던지기. 예외는 CompletionException이고, 기저 예외를 cause로 설정한다
                        li T getNow(T valueIfAbsent)
                        |                 종료되었다면 결과 값 반환, 또는 발생한 예외 던지기. 아니면 valueIfAbsent 반환.
                        li boolean complete(T value)
                        |                 종료되지 않았다면 get()과 연관 메서드들의 반환값을 value로 설정. 이 호출로 CompletableFuture가 완료 상태로 천이되었다면 true 반환.
                        li boolean completeExceptionally(Throwable ex)
                        |                 종료되지 않았다면 get()과 연관 메서드들이 주어진 예외를 던지도록 한다. 이 호출로 CompletableFuture가 완료 상태로 천이되었다면 true 반환.
                        li boolean isCompletedExeptionally()
                        li void obtrudeValue(T value) + obtrudeException
                        |                 강제로 get()과 연관 메서드들의 반환값 설정. 에러 복구를 위해 설계됨.
                        li int getNumberOfDependents()
                        |                 종료 대기중인 CompletableFuture의 개수 추정. 동기화가 아닌 시스템 모니터링을 위해 설계됨.
                details
                    h2.marker Method Detail Since 9
                    ol
                        li static Executor delayedExecutor(long delay, TimeUnit unit) + 1 오버로딩
                        |                 주어진 딜레이 이후에 executor로 작업을 제출하는 새로운 Executor 반환.
                        li static &lt;U> CompletionStage&lt;U> completedStage(U value)
                        |                 주어진 value로 이미 종료된 새로운 CompletionStage 반환.
                        li static &lt;U> CompletableFuture&lt;U> failedFuture(Throwable ex)
                        |                 주어진 예외로 이미 종료된 새로운 CompletableFuture 객체 반환.
                        li static &lt;U> CompletionStage&lt;U> failedStage(Throwable ex)
                        |                 주어진 예외로 이미 종료된 새로운 CompletionStage 반환.
                        li &lt;U> CompletableFuture&lt;U> newIncompletableFuture()
                        |                 완료되지 않은 새로운 CompletableFuture 객체를 반환한다. 서브클래스들은 각자의 클래스 인스턴스를 반환하도록 newIncompletableFuture 메서드를 재정의해야 한다
                        li Executor defaultExecutor()
                        li CompletableFuture&lt;T> copy()
                        |                 정상적으로 종료되었다면, 같은 값을 갖는 종료된 CompletableFuture 반환. 예외 종료되었다면, 해당 예외를 원인으로 한 CompletionException으로 예외 종료된 CompletableFuture 반환. 동작은 thenApply(x -> x)와 같다.
                        li CompletionStage&lt;T> minimalCompletionStage()
                        |                 CompletionStage에 정의된 메서드만 이용 가능. 재정의되지 않았다면 toCompletableFuture() 메서드를 통해 그 외의 메서드에 접근 가능하다.
                        li CompletableFuture&lt;T> completeAsync(Supplier&lt;? extends T> supplier) + 1 오버로딩
                        |                 이 CompletableFuture를 supplier의 결과값으로 종료한다.
                        li CompletableFuture&lt;T> orTimeout(long timeout, TimeUnit unit)
                        |                 이 CompletableFuture가 주어진 시간 내에 종료되지 않은 경우, TimeoutException으로 예외 종료한다.
                        li CompletableFuture&lt;T> completeOnTimeout(T value, long timeout, TimeUnit unit)
                        |                 이 CompletableFuture가 주어진 시간 내에 종료되지 않은 경우, value로 종료한다.
            details
                h2.marker abstract class ForkJoinTask&lt;V> implements Future&lt;V>, Serializable Since 1.7
                ol
                    li ForkJoinPool의 실행 단위. 일반적인 스레드보다는 훨씬 가벼운 유사-스레드
                    li 메인 ForkJoinTask가 존재하여 다른 subtask들을 실행한다
                    li
                        | 전형적으로는 fork, join 메서드 쌍만 이용하며, a.fork(); b.fork(); b.join(); a.join();처럼 join 순서에 유의
                    li
                        | RecursiveAction : 반환이 필요없는 경우
                        br
                        |                 RecursiveTask : 반환이 필요한 경우
                        br
                        |                 CountedCompleter : 작업의 완료가 다른 작업의 트리거가 되는 경우
                details
                    h2.marker 일반 Method Detail
                    ol
                        li final ForkJoinTask&lt;V> fork() : 작업 시작
                        li final V join() : 종료 대기 후 결과 반환. 비정상 종료 시 RuntimeException 또는 Error 발생
                        li final V invoke() : fork + join
                        li static void invokeAll(ForkJoinTask&lt;?>... tasks) + 오버로딩
                        |                 모든 작업을 시작. 모두 완료되면 반환. 하나라도 예외가 발생하면 rethrow. 예외 종료된 경우 각 작업의 상태는 직접 획득해야 한다.
                        li final boolean isCompleteNormally() + isCompletedAbnormally
                        li final Throwable getException()
                        li static ForkJoinTask&lt;?> adapt(Runnable runnable) + 오버로딩
                details
                    h2.marker 잘 안 쓸 것 같은 Method
                    ol
                        li void complete(V value) + completeExceptionally
                        li final void quietlyComplete() Since 1.8
                        |                 값은 설정하지 말고 정상 종료. 가장 최근의 setRawResult(V) 값이 join 및 연관 메서드의 결과로 반환된다
                        li final void quietlyJoin()
                        |                 작업의 종료를 기다린다. 결과를 반환하지도, 예외를 던지지도 않는다
                        li final void quietlyInvoke()
                        |                 작업을 시작하고 종료를 기다린다. 결과를 반환하지도, 예외를 던지지도 않는다
                        li void reinitialize()
                        |                 초기화하여 다시 fork할 수 있게 한다
                        li static ForkJoinPool getPool() + inForkJoinPool
                        |                 현재 스레드를 호스팅하는 풀 반환. 없으면(inForkJoinPool() == false) null 반환
                        li boolean tryUnfork()
                        |                 성공하면 true 반환. 작업을 시작하도록 지시(fork)했지만 아직 다른 스레드에 넘겨져 실행되기 전에는 취소가 잘 된다
                        li static int getQueuedTaskCount()
                        |                 현재 워커 스레드로 fork됐지만 아직 실행되지는 않은 작업들의 개수 추정치
            details
                h2.marker abstract class RecursiveAction extends ForkJoinTask&lt;Void> Since 1.7
                |         재귀적이며 결과없는 ForkJoinTask
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/RecursiveActionTest.java', lan: 'java'})
                br
                |         코드 출처 : https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/concurrent/RecursiveAction.html
            details
                h2.marker abstract class RecursiveTask&lt;V> extends ForkJoinTask&lt;V> Since 1.7
                |         재귀적이며 결과가 있는 ForkJoinTask
                +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/RecursiveTaskTest.java', lan: 'java'})
                br
                |         코드 출처 : https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/concurrent/RecursiveTask.html
            details
                h2.marker abstract class CountedCompleter&lt;T> extends ForkJoinTask&lt;T> Since 1.8
                ol
                    li 다른 작업들을 기다린 뒤 트리거로 작업을 시작하는 ForkJoinTask
                    li
                        | Concrete 서브클래스들은 compute() 메서드를 반드시 재정의해야 하며, 되도록이면 반환하기 전에 tryComplete()을 호출해야 한다
                    li 일반적으로 CountedCompleter는 결과를 갖지 않겠지만, 결과가 필요한 경우 getRawResult() 메서드를 재정의하면 된다
                    li
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/CountedCompleterTest.java', displayrange='[14,34,75,85]', lan: 'java'}) 예시 : setPendingCount + tryComplete
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/CountedCompleterTest.java', displayrange='[36,54,75,85]', lan: 'java'}) 예시 : addToPendingCount + propagateCompletion
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/CountedCompleterTest.java', displayrange='[56,73,75,85]', lan: 'java'}) 예시 : 생성자에서 pendingCount 설정
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/CountedCompleterTest.java', displayrange='[87,130]', lan: 'java'}) 예시 : quietlyCompleteRoot
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/CountedCompleterTest.java', displayrange='[132,168]', lan: 'java'}) 예시 : compute 사용없이 트리거로만 이용
                        br
                        |                 출처 ; https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/concurrent/CountedCompleter.html
                details
                    h2.marker Constructor Detail
                    ol
                        li
                            | protected CountedCompleter(CountedCompleter&lt;?> completer, int initialPendingCount)
                        li
                            | protected CountedCompleter(CountedCompleter&lt;?> completer) : initialPendingCount = 0
                        li protected CountedCompleter() : parent completer = null, initialPendingCount = 0
                details
                    h2.marker Method Detail
                    ol
                        li abstract void compute() : 메인 작업 정의
                        li void onCompletion(CountedCompleter&lt;?> caller)
                        |                 tryComplete()이 호출되고, 남은 pendingCount가 0이면 호출된다. 또는 complete(T)가 호출된 경우에도 실행된다
                        li boolean onExceptionalCompletion(Throwable ex, CountedCompleter&lt;?> caller)
                        |                 compute()에서 예외가 발생했거나, ForkJoinTask#completeExceptionally가 호출된 경우 실행된다. 기본 구현은 return true;
                        br
                        |                 true를 반환하였고, caller가 아직 완료되지 않은 경우, caller도 같은 예외로 종료된다
                        li final CountedCompleter&lt;?> getCompleter() : 생성자에서 지정한 부모 completer 반환 + getRoot
                        li final int getPendingCount()
                        |                 + setPendingCount, addToPendingCount, compareAndSetPendingCount, decrementPendingCountUnlessZero
                        li final void tryComplete()
                        |                 pendingCount가 0이 아니면 1 감소시킨다. 0인 경우 onCompletion 메서드를 호출하고, parent completer에 대해서도 tryComplete()을 호출한다
                        li final void propagateCompletion()
                        |                 tryComplete()와 같지만, onCompletion 메서드는 호출하지 않는다
                        li
                            | final CountedCompleter&lt;?> firstComplete()
                            br
                            |                     final CountedCompleter&lt;?> nextComplete()
                        |                 firstComplete() : pendingCount가 0이면 return this; 그 외엔 pendingCount를 감소시키고 return null;
                        br
                        |                 nextComplete() : parent completer가 없는 경우, ForkJoinTask#quietlyComplete 호출하고 return null; pendingCount가 0이 아니면 감소시키고 return null; 그 외엔 parent completer 반환
                        br
                        |                 for(var c = firstComplete(); c != null; c = c.nextComplete()) { ... }
                        li final void quietlyCompleteRoot() == getRoot().quietlyComplete()
                        li final void helpComplete(int maxTasks)
                        |                 이 작업이 완료되지 않았다면, completion path 상의 최대 maxTasks개 만큼의 시작되지 않은 작업을 진행시킨다
        hr
        details
            h2.marker Executor 관련
            details
                h2.marker interface Executor Since 1.5
                ol
                    li
                        | 전달받은 Runnable을 실행하는 객체. Executor 자체가 스레드의 병행성을 부여하진 않으며, 구현에서 호출자와 다른 스레드 공간을 마련해주어야 한다.
                    li void execute(Runnable command)
            details
                h2.marker interface ExecutorService extends Executor Since 1.5
                ol
                    li
                        | java.util.concurrent 패키지의 기본적인 Executor 구현.
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/concurrent/ExecutorServiceTest.java', lan: 'java'})
                    li void shutdown()
                    |             추가적인 Runnable을 받지 않는다. 이전에 추가된 것은 마저 실행한다.
                    li List&lt;&Runnable> shutdownNow()
                    |             실행중인 모든 작업을 중지. 실행 대기중이었던 작업들은 반환.
                    li boolean isShutdown()
                    li boolean isTerminated()
                    |             shutdown, shutdownNow 호출 이후 모든 작업이 끝났는지 여부
                    li boolean awaitTermination(long timeout, TimeUnit unit)
                    |             shutdown 요청 후 모든 작업이 종료되기를 기다리며 블록한다. timeout 발생한 경우 false 반환.
                    li &lt;T> Future&lt;T> submit(Callable&lt;T> task)
                    |             결과를 반환하는 작업을 등록한다. 작업이 성공적으로 종료되면 Future#get으로 결과를 확인할 수 있다.
                    li &lt;T> Future&lt;T> submit(Runnable atask, T result)
                    |             작업을 등록한다. 작업이 성공적으로 종료되면 Future#get으로 result를 얻을 수 있다.
                    li Futur&lt;?> submit(Runnable task)
                    |             작업을 등록한다. 작업이 성공적으로 종료되면 Future#get은 null을 반환한다.
                    li &lt;T> List&lt;Future&lt;T>> invokeAll(Collection&lt;? extends Callable&lt;T>> tasks)
                    |             모든 작업이 종료되면 Future 리스트를 반환한다. 따라서 리스트 안의 각 Future#isDone은 true다.
                    li
                        | &lt;T> List&lt;Future&lt;T>> invokeAll(Collection&lt;? extends Callable&lt;T>> tasks, long timout, TimeUnit unit)
                    |             모든 작업이 종료되거나 timeout이 발생하면 반환. 리스트 안의 각 Future#isDone은 true. timeout 발생 시 완료되지 않은 작업들은 취소된다.
                    li &lt;T> T invokeAny(Collection&lt;? extends Callable&lt;T>> tasks)
                    |             성공적으로 완료된 첫 작업의 결과를 반환한다. 완료되지 않은 작업들은 취소된다.
                    li
                        | &lt;T> T invokeAny(Collection&lt;? extends Callable&lt;>> tasks, long timeout, TimeUnit unit)
                    |             timeout되면 TimeoutException 발생
            details
                h2.marker interface ScheduledExecutorService extends ExecutorService Since 1.5
                ol
                    li 실행 전에 딜레이를 두거나, 주기적으로 실행을 반복할 수 있는 ExecutorService
                    li ScheduledFuture&lt;?> schedule(Runnable command, long delay, TimeUnit unit) + 오버로딩
                    |             주어진 delay 이후 command가 1회 실행되도록 한다
                    li
                        | ScheduledFuture&lt;?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)
                    |             반복되는 작업은 반환된 Future를 통해 취소할 수 있다.
                    li
                        | ScheduledFuture&lt;?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)
                    |             scheduleAtFixedRate와 달리, 이전 작업이 완료된 후 다음 작업이 시작된다.
            details
                h2.marker abstract class AbstractExecutorService implements ExecutorService Since 1.5
                ol
                    li submit, invokeAny, invokeAll 메서드 구현. 반환하는 RunnableFuture에는 FutureTask 이용.
                    li
                        | protected &lt;T> RunnableFuture&lt;T> newTaskFor(Runnable runnable, T value) Since 1.6 + 오버로딩
            details
                h2.marker class ThreadPoolExecutor extends AbstractExecutorService Since 1.5
                ol
                    li 각 작업들은 스레드풀의 별개 스레드에서 실행된다
                    li Core and maximum pool sizes
                    |             corePoolSize에 도달할 때까지 신규 작업에 대해 신규 스레드를 할당한다. 대기 중인 스레드가 없으면 maxPoolSize에 도달할 때까지 신규 작업에 대해 신규 스레드를 할당한다
                    li On-demand construction
                    |             처음부터 corePoolSize만큼의 스레드를 만들어놓을 지를 설정할 수 있다
                    li Creating new threads
                    |             지정되지 않으면 Executors#defaultThreadFactory로부터 신규 스레드를 생성한다. 동일 스레드그룹 + NORM_PRIORITY + non-daemon
                    li Keep-alive times
                    |             corePoolSize를 초과한 스레드들은 대기 상태가 keepAliveTime을 초과하면 종료된다. allowCoreThreadTimeOut 메서드로 코어 스레드에도 적용할 지 설정 가능
                    li Queuing
                    ul
                        li 처리를 기다리는 작업들은 BlockingQueue에서 대기한다.
                        li corePoolSize 이상의 스레드가 활성 상태라면 작업은 우선 큐에 진입된다. 큐에 자리가 없으면 신규 스레드가 생성되어 작업을 처리한다.
                        li 큐에 자리도 없고 활성 스레드 수가 maximumPoolSize와 같다면 추가 작업은 거부된다
                        li 큐잉 전략 1. Direct handoff
                        |                 SynchronousQueue. 작업 가능한 스레드가 없으면 신규로 생성한다. 제한없는 maximumPoolSize 필요
                        li 큐잉 전략 2. Unbounded queue
                        |                 무제한으로 큐에 작업을 추가하므로, 활성 스레드의 수는 항상 corePoolSize 이하다
                        li 큐잉 전략 3. Bounded queue
                        |                 큐의 크기와 maxPoolSize의 적절한 trade off 필요
                    li Rejected tasks
                    ul
                        li 거부된 작업에 대하여 RejectedExecutionHandler#rejectedExecution 메서드가 실행된다
                        li 기본 정책. ThreadPoolExecutor.AbortPolicy : 핸들러가 RejectedExecutionException 발생
                        li ThreadPoolExecutor.CallerRunsPolicy : 작업을 제출한 스레드가 직접 작업을 실행한다
                        li ThreadPoolExecutor.DiscardPolicy : 거부된 작업은 버려진다
                        li
                            | ThreadPoolExecutor.DiscardOldestPolicy : 신규 작업이 아닌, 큐에서 가장 오래된 작업이 버려진다. 신규 작업은 다시 시도된다
                    li Hook methods
                    |             beforeExecute, afterExecute, terminated 메서드를 재정의하여 작업 전후에 필요한 부분을 실행할 수 있다
                details
                    h2.marker interface RejectedExecutionHandler Since 1.5
                    ol
                        li ThreadPoolExecutor에서 실행되지 않은 작업에 대한 처리를 위해 사용.
                        li void rejectedExecution(Runnable r, ThreadPoolExecutor executor)
                        li static class ThreadPoolExecutor.AbortPolicy implements RejectedExecutionHandler
                        li
                            | static class ThreadPoolExecutor.CallerRunsPolicy implements RejectedExecutionHandler
                        li
                            | static class ThreadPoolExecutor.DiscardPolicy implements RejectedExecutionHandler
                        li
                            | static class ThreadPoolExecutor.DiscardOldestPolicy implements RejectedExecutionHandler
                details
                    h2.marker Constructor Detail
                    ol
                        li
                            | public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable> workQueue)
                        li
                            | public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable> workQueue, ThreadFactory threadFactory)
                        li
                            | public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable> workQueue, RejectedExecutionHandler handler)
                        li
                            | public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)
                details
                    h2.marker Method Detail
                    ol
                        li void execute(Runnable command) ↔ remove
                        |                 command를 언젠가 실행한다. 작업 스레드가 실행하지 못하면, RejectedExecutionHandler가 처리한다
                        li void shutdown()
                        |                 순차적 종료 절차에 진입한다. 추가 작업은 받지 않고, 이미 제출된 작업들은 마저 처리한다
                        li List&lt;Runnable> shutdownNow()
                        |                 대기 중인 작업에 더해 실행 중인 작업들도 모두 중지한다. 대기중이었던 작업들은 리스트로 반환한다. 실행 중인 작업들에 유예 시간을 주고 싶다면 ExecutorService#awaitTermination 이용
                        li boolean isTerminating()
                        |                 shutdown 또는 shutdownNow 메서드가 호출되었지만, 아직 중지가 완료되지는 않았다면 true
                        li void setThreadFactory(ThreadFactory threadFactory) + getter 메서드
                        |                 + set/getRejectedExecutionHandler, set/getCorePoolSize, set/getMaximumPoolSize, set/getKeepAliveTime
                        li boolean prestartCoreThread()
                        |                 신규 스레드를 하나 생성한다. 이미 corePoolSize 만큼 스레드가 존재한다면 false 반환.
                        li int prestartAllCoreThreads()
                        |                 생성된 스레드의 수가 corePoolSize가 될 때까지 신규 스레드를 생성한다. 신규로 생성된 스레드의 수를 반환한다
                        li void allowCoreThreadTimeOut(boolean value) Since 1.6 + 오버로딩
                        |                 코어 스레드에도 keep-alive를 적용할 지 여부 setter/getter
                        li BlockingQueue&lt;Runnable> getQueue()
                        |                 직접 조작하진 말고, 모니터링/디버깅 용도로 이용함이 바람직하다
                        li void purge() : 취소된 Future 작업들을 큐에서 제거
                        li int getPoolSize()
                        |                 현재 풀 안의 스레드 수 반환
                        li int getActiveCount()
                        |                 현재 실행 중인 스레드 수 추정치 반환
                        li int getLargestPoolSize()
                        |                 풀에 동시에 존재했던 스레드의 최대 개수 반환
                        li long getTaskCount()
                        |                 실행 스케쥴된 작업의 총 개수의 근사치 반환
                        li long getCompletedTaskCount()
                        |                 실행 완료된 작업의 총 개수의 근사치 반환
            details
                h2.marker
                    | class ScheduledThreadPoolExecutor extends ThreadPoolExecutor implements ScheduledExecutorService Since 1.5
                ol
                    li 생성자는 ThreadPoolExecutor와 유사
                    li
                        | protected &lt;V> RunnableScheduledFuture&lt;V> decorateTask(Runnable runnable, RunnableScheduledFuture&lt;V> task) Since 1.6 + 오버로딩
                    li void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value) + getter
                    |             기본값 false. true면 shutdownNow가 호출되거나 이 정책이 false가 될 때까지 주기 작업을 계속 실행한다
                    li void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value) + getter
                    |             기본값 true. true면 shutdownNow가 호출되거나 종료 후 이 정책이 false가 되기 전까지는 지연 작업을 실행한다
                    li void setRemoveOnCancelPolicy(boolean value) Since 1.7 + getter
                    |             기본값 false. 취소된 작업을 즉시 큐에서 제거할 것인지, 또는 해당하는 딜레이 후 제거할 것인지 설정.
            details
                h2.marker interface CompletionService&lt;V> Since 1.5
                ol
                    li 생산자가 작업들을 추가하면, 소비자는 그것이 완료된 순서대로 이용할 수 있다.
                    li Future&lt;V> submit(Callable&lt;V> task)
                    li Future&lt;V> submit(Runnable task, V result)
                    li Future&lt;V> take()
                    |             완료된 작업을 가져온다. 없으면 대기한다.
                    li Future&lt;V> poll()
                    |             완료된 작업을 가져온다. 없으면 null.
                    li Futur&lt;V> poll(long timeout, TimeUnit unit)
            details
                h2.marker class ExecutorCompletionService&lt;V> impliments CompletionService&lt;V&gt
                ol
                    li
                        | CompletionService 구현. 주어진 Executor를 실행에 이용한다. 완료되는 순서대로 작업을 take 메서드로 접근할 수 있는 큐에 배치한다.
                    li public ExecutorCompletionService(Executor executor)
                    li
                        | public ExecutorCompletionService(Executor executor, BlockingQueue&lt;Future&lt;V>> completionQueue)
            details
                h2.marker class ForkJoinWorkerThread extends Thread Since 1.7
                ol
                    li ForkJoinPool에서 ForkJoinTask를 실행하는 스레드
                    li protected ForkJoinWorkerThread(ForkJoinPool pool) + getPool
                    li int getPoolIndex() : 풀 안에서 이 스레드의 번호(Unique)
                    li protected void onStart() + onTermination
            details
                h2.marker class ForkJoinPool extends AbstractExecutorService Since 1.7
                ol
                    li ForkJoinTask에 관한 ExecutorService. Non-ForkJoinTask 호출자도 이용할 수 있는 메서드를 제공한다
                    |             execute(ForkJoinTask), invoke(ForkJoinTask), submit(ForkJoinTask)
                    li 모든 ForkJoinWorkerThread는 데몬 스레드로 초기화된다
                    li Common pool 튜닝에 관한 시스템 속성
                    |             java.util.concurrent.ForkJoinPool.common.parallelism : parallelism level. 기본값은 프로세서 수
                    br
                    |             java.util.concurrent.ForkJoinPool.common.threadFactory : class name of a ForkJoinPool.ForkJoinWorkerThreadFactory
                    br
                    |             java.util.concurrent.ForkJoinPool.common.exceptionHandler : class name of a Thread.UncaughtExceptionHandler
                    br
                    |             java.util.concurrent.ForkJoinPool.common.maximumSpares : maximum number of allowed extra threads to maintain target parallelism (default 256).
                details
                    h2.marker static interface ForkJoinPool.ForkJoinWorkerThreadFactory
                    |             ForkJoinWorkerThread newThread(ForkJoinPool pool)
                details
                    h2.marker static interface ForkJoinPool.ManagedBlocker
                    ol
                        li boolean block()
                        |             필요한 만큼 현재 스레드를 블록시킨다. 추가적인 블로킹이 필요하지 않으면 true 반환
                        li boolean isReleasable
                        |             블로킹이 필요없으면 true 반환
                details
                    h2.marker Field, Constructor Detail
                    ol
                        li
                            | public static final ForkJoinPool.ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory
                        li public ForkJoinPool() == this(Runtime.availableProcessors())
                        li public ForkJoinPool(int parallelism)
                        li
                            | public ForkJoinPool(int parallelism, ForkJoinPool.ForkJoinWorkerThreadFactory factory, Thread.UncaughtExceptionHandler handler, boolean asyncMode)
                        li
                            | public ForkJoinPool(int parallelism, ForkJoinPool.ForkJoinWorkerThreadFactory factory, Thread.UncaughtExceptionHandler handler, boolean asyncMode, int corePoolSize, int maximumPoolSize, int minimumRunnable, Predicate&lt;? super ForkJoinPool> saturate, long keepAliveTime, TimeUnit unit) Since 9
                details
                    h2.marker Method Detail
                    ol
                        li static ForkJoinPool commonPool() Since 1.8
                        li static void managedBlock(ForkJoinPool.ManagedBlocker blocker)
                        li
                            | &lt;T> T invoke(ForkJoinTask&lt;T> task)
                            br
                            |                     void execute(ForkJoinTask&lt;?> task) + 오버로딩
                            br
                            |                     &lt;T> ForkJoinTask&lt;T> submit(ForkJoinTask&lt;T> task) + 오버로딩
                        li void shutdown()
                        |                 + shutdownNow(), isTerminated, isTerminating, isShutdown, awaitTermination, awaitQuiescence
                        li ForkJoinPool.ForkJoinWorkerThreadFactory getFactory()
                        |                 + getUncaughtExceptionHandler, getParallelism, getPoolSize, getAsyncMode, getRunningThreadCount, getActiveThreadCount, isQuiescent, getStealCount, getQueuedTaskCount, getQueuedSubmissionCount, hasQueuedSubmissions
            details
                h2.marker class Executors Since 1.5
                details
                    h2.marker ExecutorService 관련
                    ul
                        li static ExecutorService newFixedThreadPool(int nThreads) + 오버로딩
                        |                 최대 동시 실행 가능한 스레드 수가 제한. 나머지 스레드는 큐에서 대기. 스레드들은 명시적으로 shutdown되기 전까지 풀에 존재한다.
                        li static ExecutorService newWorkStealingPool() Since 1.8 + 오버로딩
                        |                 사용 가능한 프로세서 수를 parallelism level로 이용. 반환되는 객체는 ForkJoinPool 인스턴스
                        li static ExecutorService newSingleThreadExecutor() + 오버로딩
                        |                 하나의 워커 스레드만 사용한다. 예기지 않게 워커가 종료되면 새로운 스레드가 나머지 작업을 위해 그 자리를 대신할 수 있다.
                        br
                        |                 같은 특징을 갖는 newFixedThreadPool(1)과 다르게, 반환된 ExecutorService가 추가적인 워커 스레드를 이용하도록 설정할 수 없다.
                        li static ExecutorService newCachedThreadPool() + 오버로딩
                        |                 이전에 종료된 스레드를 재사용. 60초 동안 이용되지 않으면 풀에서 삭제된다.
                        li static ExecutorService unconfigurableExecutorService(ExecutorService executor)
                        |                 ExecutorService에 정의된 메서드들은 executor에 연결하고, 그 외 캐스트를 통해 이용할 수 있는 메서드들은 호출하지 못하도록 한다.
                details
                    h2.marker ScheduledExecutorService 관련
                    ul
                        li static ScheduledExecutorService newSingleThreadScheduledExecutor() + 오버로딩
                        li static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) + 오버로딩
                        li
                            | static ScheduledExecutorService unconfigurableScheduledExecutorService(ScheduledExecutorService executor)
                        |                 ScheduledExecutorService에 정의된 메서드들은 executor에 연결하고, 그 외 캐스트를 통해 이용할 수 있는 메서드들은 호출하지 못하도록 한다.
                details
                    h2.marker ThreadFactory 관련
                    ul
                        li static ThreadFactory defaultThreadFactory()
                        |                 모든 스레드들을 같은 ThreadGroup으로 생성한다. 스레드의 우선순위는 Threa.NORM_PRIORITY와 그룹의 최대 허용치 중 작은 것으로 설정된다.
                        br
                        |                 각 스레드들은 non-daemon으로 생성되며, Thread.getName()을 통해 얻을 수 있는 "pool-N-thread-M" 꼴의 이름으로 접근할 수 있다.
                        li static ThreadFactory privilegedThreadFactory()
                        |                 호출하는 스레드와 같은 권한으로 새로운 스레드를 생성하는 ThreadFactory 반환.
                details
                    h2.marker Callable 관련
                    ul
                        li static &lt;T> Callable&lt;T> callable(Runnable task, T result)
                        li static Callable&lt;Object> callable(Runnable task)
                        |                 작업이 완료되면 null을 반환하는 Callable 반환
                        li static Callable&lt;Object> callable(PrivilegedAction&lt;?> action)
                        |                 호출되면 action#run을 실행하고 그 결과를 반환하는 Callable 반환
                        li static Callable&lt;Object> callable(PrivilegedExceptionAction&lt;?> action)
                        li static &lt;T> Callable&lt;T> privilegedCallable(Callable&lt;T> callable)
                        |                 호출되면 callable을 현재 access control context에서 실행. AccessController.doPrivileged에서 호출되어야 한다.
                        li
                            | static &lt;T> Callable&lt;T> privilegedCallableUsingCurrentClassLoader(Callable&lt;T> callable)
        hr
        details
            h2.marker 리액티브 스트림
            ol
                li https://github.com/reactive-streams/reactive-streams-jvm
                li final class Flow Since 9
                |         static int defaultBufferSize() : 256
                li @FunctionalInterface static interface Flow.Publisher&lt;T>
                |         void subscribe(Flow.Subscriber&lt;? super T> subscriber)
                details
                    h2.marker 규칙
                    ol
                        li
                            | Publisher가 Subscriber에 onNext로 신호를 보낸 횟수 &lt;= Subscriber가 Subscription으로 보낸 request의 횟수
                        |                 이 규칙은 onNext의 호출에 대하여, 선행되는 request가 항상 존재함을 함의한다
                        li
                            | Publisher가 onNext로 신호를 보낸 횟수가 request보다 적은 경우, Subscription을 onComplete 또는 onError로 종결한다
                        |                 이 규칙은 request에 대한 onNext가 항상 존재하지는 않음을 명시한다
                        li onSubscribe, onNext, onError, onComplete 신호는 직렬적이어야 한다
                        |                 결코 다른 신호와 중첩되는 시점이 있어서는 안 된다
                        li Publisher의 실패는 반드시 onError로 보내야 한다
                        li 스트림이 정상적으로 종결된 경우 Publisher는 반드시 onComplete 신호를 보내야 한다
                        li Publisher가 onError, onComplete 신호를 보낸 경우, Subscription은 반드시 취소된 것으로 간주되야 한다
                        li 종료 상태(onError, onCompletion)에서 추가적인 신호의 발생은 절대 없다
                        li Subscription이 취소된 경우, 추가적인 신호 전달은 절대 없다
                        li
                            | Publisher.subscribe 안에서 onSubscribe를 반드시 호출해야 하며, 반드시 다른 신호를 보내기 전에 선행되어야 한다. 또, 이 경우 메서드는 반드시 정상 종결되어야 한다
                        |                 Subscriber.onSubscribe 호출 시 null 검사는 필요없다. NullPointerException이 발생하게 내버려두면 된다.
                        li Publisher.subscribe는 여러 번 호출될 수 있지만, 하나의 Subscriber로부터는 최대 한 번만 호출되어야 한다
                        li Publisher는 여러 Subscriber들에 대한 멀티캐스트를 지원할 수 있다
                li static interface Flow.Subsbriber&lt;T>
                |         void onSubscribe(Flow.Subscription), onNext(T), onError(Throwable), onComplete(Void)
                details
                    h2.marker 규칙
                    ol
                        li Subscriber는 onNext 신호를 받고 싶다면 반드시 먼저 request 신호를 보내야 한다
                        li 신호를 보낼 때, Publisher의 완료를 기다리지 말고 비동기적으로 전달함이 권장된다
                        li onComplete, onError 메서드는 절대 Subscription, Publisher 어느쪽의 메서드도 호출해선 안 된다
                        li onComplete, onError 신호를 받은 이후부터, Subscription은 반드시 취소로 간주되어야 한다
                        li 유효한 Subscription이 존재한다면, 추가적인 onSubscribe 신호에 대해 반드시 cancel을 호출해야 한다
                        |                 하나의 Subscriber는 둘 이상의 Publisher를 동시에 구독하지 않아야 한다
                        li 더 이상 필요없다면 반드시 Subscription.cancel을 호출해야 한다
                        li Subscription으로 보내는 신호들은 반드시 직렬적이어야 한다
                        |                 결코 동시에 두 신호를 보내는 순간은 없어야 한다
                        li cancel의 호출은 대기 중인 작업의 취소를 보장하지 않는다. cancel 이후 추가적인 onNext 신호에 대해 준비되어야 한다
                        li 아무런 request를 보내지 않았더라도, onComplete, onError 신호에 대해 준비되어야 한다
                        li onSubscribe, onNext, onError, onComplete는 인자가 null이 아닌 이상 반드시 정상 종료되어야 한다
                        |                 Subscriber의 실패는 Subscription.cancel로만 통지할 수 있다. 이 규칙이 지켜지지 않은 경우, Subscription은 반드시 취소로 간주되어야 한다
                li static interface Flow.Subscription
                |         void request(long) , cancel(Void)
                details
                    h2.marker 규칙
                    ol
                        li request, cancel은 반드시 Subscriber가 호출해야 한다
                        li onNext, onSubscribe 안에서 동기적으로 request를 호출하는 것은 허용된다
                        li cancel의 호출은 멱등이어야 하고, 그 실행은 스레드-안전해야 한다
                        li Subscription이 취소됐다면, 이후의 request, cancel의 호출은 아무 작업도 하지 않아야 한다
                        li 0이하에 대한 request 호출은 onError로 IllegalArgumentException을 보내야 한다
                        li Subscription이 취소됐다면, Publisher는 Subscriber에 대한 모든 참조를 제거해야 한다
                        li request, cancel은 항상 정상 종료되어야 한다
                        li Subscription은 반드시 무제한적인 request 호출을 허용해야 한다. n == Long.MAX_VALUE
                li
                    | static interface Flow.Processor&lt;T, R> extends Flow.Subscriber&lt;T>, Flow.Publisher&lt;R>
            details
                h2.marker class SubmissionPublisher&lt;T> implements Flow.Publisher&lt;T>, AutoCloseable Since 9
                details
                    h2.marker Constructor Detail
                    ol
                        li
                            | public SubmissionPublisher(Executor executor, int maxBufferCapacity, BiConsumer&lt;? super Flow.Subscriber&lt;? super T>, ? super Throwable> handler) + 오버로딩
                        |                 executor : 비동기적으로 구독자에게 전달하는 데 쓰일 Executor
                        br
                        |                 maxBufferCapacity : 각 구독자에 대한 버퍼의 한도. 실제 한도는 getMaxBufferCapacity()로 확인
                        br
                        |                 handler : null이 아니면 onNext에서 발생한 예외를 처리
                        li public SubmissionPublisher()
                        |                 executor = ForkJoinPool.commonPool(), maxBufferCapacity = Flow.defaultBufferSize(), handler = null
                details
                    h2.marker Method Detail
                    ol
                        li int submit(T item)
                        |                 각 구독자에게 비동기적으로 item을 보낸다(onNext). lag(배포된 item 중에 아직 소비되지 않은 개수) 추정치를 반환한다.
                        li
                            | int offer(T item, BiPredicate&lt;Flow.Subscriber&lt;? super T>, ? super T> onDrop) + 오버로딩
                        |                 가능하다면 각 구독자에게 비동기적으로 item을 보낸다(onNext). 리소스 초과(버퍼가 가득 찼다던지)로 실패한 경우 onDrop이 실행된다. onDrop이 true를 반환하면 onNext를 다시 시도한다.
                        br
                        |                 반환값이 음수인 경우 drop된 구독자 수를 의미하고, 그 외의 경우 lag(배포된 item 중에 아직 소비되지 않은 개수) 추정치를 의미한다
                        li void closeExceptionally(Throwable error) + getClosedException
                        li boolean isClosed()
                        li boolean hasSubscribers()
                        |                 + getNumberOfSubscribers(), getExecutor(), getMaxBufferCapacity(), getSubscribers(), isSubscribed(Flow.Subscriber&lt;? super T> subscriber)
                        li long estimateMinimumDemand()
                        |                 각 구독자들이 요청한 아이템 수 중, 아직 공급되지 않은 수의 최소값(추정치) 반환
                        li int estimateMaximumLag()
                        |                 각 구독자들에 보낸 아이템 중 아직 소비되지 않은 수의 최대값(추정치) 반환
                        li CompletableFuture&lt;Void> consume(Consumer&lt;? super T> consumer)
                        |                 배포된 모든 아이템에 대해 consumer 실행. 정상적으로 모두 실행되면 onComplete가 호출되고, CompletableFuture도 정상 종료된다
        hr
        details
            h2.marker Blocking 컬렉션
            details
                h2.marker interface BlockingQueue&lt;E> extends Queue&lt;E> Since 1.5
                ol
                    li 기본적으로 스레드-안전하지만, addAll 따위의 bulk 연산은 특별히 표시되지 않는 한 그렇지 않다.
                    li 요소를 획득할 때, 큐가 비어있는 경우 블로킹. 요소를 추가할 때, 큐에 빈 자리가 있을 때까지 블로킹
                    table
                        tbody
                            tr
                                th
                                th 예외 발생
                                th 특별값 반환
                                th 블로킹
                                th 시간 제한
                            tr
                                th Insert
                                td add(E)
                                td offer(E)
                                td put(E)
                                td offer(E,long,TimeUnit)
                            tr
                                th Remove
                                td remove()
                                td poll()
                                td take()
                                td poll(long,TimeUnit)
                            tr
                                th Examine
                                td element()
                                td peek()
                                td -
                                td -
                    li int remainingCapacity()
                    |             블로킹없이 삽입 가능한 요소의 수. 오차가 있을 수 있다
                    li int drainTo(Collection&lt;? super E> c) + 오버로딩
                    |             모든 원소를 c로 옮긴다
            details
                h2.marker
                    | class ArrayBlockingQueue&lt;E> extends AbstractQueue&lt;E> implements BlockingQueue&lt;E>, Serializable Since 1.5
                ol
                    li 크기가 고정된 기저 배열을 이용한 BlockingQueue
                    li 기본적으로 삽입을 기다리는 스레드들 사이의 처리 순서는 보장되지 않지만, fairness를 설정하면 FIFO 순으로 처리된다
                    li Collection, Iterator의 모든 선택적 연산을 구현했다.
                    li public ArrayBlockingQueue(int capacity, boolean fair) + 오버로딩
            details
                h2.marker
                    | class LinkedBlockingQueue&lt;E> extends AbstractQueue&lt;E> implements BlockingQueue&lt;E>, Serializable Since 1.5
                ol
                    li 크기를 고정할 수 있는 연결된 BlockingQueue
                    li Collection, Iterator의 모든 선택적 연산을 구현했다
                    li public LinkedBlockingQueue(int capacity) + 오버로딩
                    |             지정하지 않은 경우, 기본 크기는 Integer.MAX_VALUE
            details
                h2.marker
                    | class PriorityBlockingQueue&lt;E> extends AbstractQueue&lt;E> implements BlockingQueue&lt;E>, Serializable Since 1.5
                ol
                    li 크기 제한 없고, PriorityQueue와 비슷한 정렬을 이용한 BlockingQueue
                    li Collection, Iterator의 모든 선택적 연산을 구현했다
                    |             다만 iterator(), spliterator()로 제공되는 인스턴스들은 순회하는 순서를 보장하지 않는다. 순차적인 순회를 원한다면 Arrays.sort(queue.toArray())를 고려할 것
                    li 같은 우선순위의 원소 사이의 정렬은 정의되지 않았다
                    li
                        | public PriorityBlockingQueue(int initialCapacity, Comparator&lt;? super E> comperator) + 오버로딩
                    |             initialCapacity는 지정되지 않은 경우 11, comperator는 지정되지 않은 경우 자연스러운 정렬을 이용
                    li Comparator&lt;? super E> comparator()
            details
                h2.marker
                    | class SynchronousQueue&lt;E> extends AbstractQueue&lt;E> implements BlockingQueue&lt;E>, Serializable Since 1.5
                ol
                    li 서로 연관된 삽입 연산과 삭제 연산 한 쌍이 동시에 존재할 때까지 연산을 블로킹한다
                    li Collection, Iterator의 모든 선택적 연산을 구현했지만, 빈 컬렉션처럼 동작한다
                    li public SynchronousQueue(boolean fair) + 오버로딩
                    |             fair : 대기하는 스레드들이 순서대로 처리된다. 지정되지 않으면 false
            details
                h2.marker
                    | class DelayQueue&lt;E extends Delayed> extends AbstractQueue&lt;E> implements BlockingQueue&lt;E> Since 1.5
                ol
                    li Delayed 요소들로 구성된, 크기 제한없는 BlockingQueue. 요소의 지연 시간이 만료되어야 큐로부터 획득 가능하다
                    |             요소가 만료됐음은 getDelay(TimeUnit.NANOSECONDS) 리턴값이 0 이하일 때로 판정
                    li Collection, Iterator의 모든 선택적 연산을 구현했다
                    li public DelayQueue() + 오버로딩
            details
                h2.marker interface BlockingDeque&lt;E> extends BlockingQueue&lt;E>, Deque&lt;E> Since 1.6
                |         요소를 획득할 때, 덱이 비어있는 경우 블로킹. 요소를 추가할 때, 덱에 빈 자리가 있을 때까지 블로킹
                table
                    tbody
                        tr
                            th
                            th 예외 발생
                            th 특별값 반환
                            th 블로킹
                            th 시간 제한
                        tr
                            th Insert
                            td
                                | addFirst(E)
                                br
                                | addLast(E)
                            td
                                | offerFirst(E)
                                br
                                | offerLast(E)
                            td
                                | putFirst(E)
                                br
                                | putLast(E)
                            td
                                | offerFirst(E,long,TimeUnit)
                                br
                                | offerLast(E,long,TimeUnit)
                        tr
                            th Remove
                            td
                                | removeFirst()
                                br
                                | removeLast()
                            td
                                | pollFirst()
                                br
                                | pollLast()
                            td
                                | takeFirst()
                                br
                                | takeLast()
                            td
                                | pollFirst(long,TimeUnit)
                                br
                                | pollLast(long,TimeUnit)
                        tr
                            th Examine
                            td
                                | getFirst()
                                br
                                | getLast()
                            td
                                | peekFirst()
                                br
                                | peekLast()
                            td -
                            td -
            details
                h2.marker
                    | class LinkedBlockingDeque&lt;E> extends AbstractQueue&lt;E> implements BlockingDeque&lt;E>, Serializable Since 1.6
                ol
                    li 크기를 제한할 수 있는 BlockingDeque.
                    li Collection, Iterator의 모든 선택적 연산을 구현했다
                    li public LinkedBlockingDeque(int capacity) + 오버로딩
                    |             지정하지 않은 경우 Integer.MAX_VALUE가 사용된다
            details
                h2.marker interface TransferQueue&lt;E> extends BlockingQueue&lt;E> Since 1.7
                ol
                    li 생산자가 소비자가 소비할 때까지 대기할 수 있는 BlockingQueue.
                    |             기존의 BlockingQueue와 SynchronousQueue 기능 모두를 선택적으로 이용할 수 있다
                    li void transfer(E e)
                    |             소비자에게 e를 전달한다. 소비자가 소비할 때까지 대기한다
                    li boolean tryTransfer(E e)
                    |             대기 중인 소비자에게 e를 전달한다. 대기 중인 소비자가 없다면 즉시 false를 반환한다
                    li boolean tryTransfer(E e, long timeout, TimeUnit unit)
                    |             timeout이 지나도록 대기 중인 소비자가 없다면 false를 반환한다
                    li boolean hasWaitingConsumer()
                    li int getWaitingConsumerCount()
            details
                h2.marker
                    | class LinkedTransferQueue&lt;E> extends AbstractQueue&lt;E> implements TransferQueue&lt;E>, Serializable Since 1.7
                ol
                    li 크기 제한없고 연결된 TransferQueue.
                    li size 계산에 순회가 필요하므로 정확하지 않을 수 있다
                    li addAll 따위의 bulk 연산은 원자적으로 실행되지 않을 수 있다
                    li Collection, Iterator의 모든 선택적 연산을 구현했다
                    li public LinkedTransferQueue() + 오버로딩
        hr
        details
            h2.marker Non-Blocking 컬렉션
            details
                h2.marker
                    | class CopyOnWriteArrayList&lt;E> implements List&lt;E>, RandomAccess, Cloneable, Serializable Since 1.5
                ol
                    li 스레드-안전한 ArrayList
                    li add, set 등의 연산마다 새로운 배열을 만든다. 따라서 일반적인 용도로는 매우 나쁘다
                    li iterator는 생성된 시점의 snapshot을 순회함이 보장되지만, iterator를 통한 요소의 변경은 불가하다
                    li public CopyOnWriteArrayList() + 오버로딩
                    li int indexOf(E e, int index) + lastIndexOf
                    li boolean addIfAbsent(E e) + addAllAbsent
            details
                h2.marker
                    | class CopyOnWriteArraySet&lt;E> extends AbstractSet&lt;E> implements Serializable Since 1.5
                |         모든 연산에 CopyOnWriteArrayList를 사용하는 Set
            details
                h2.marker
                    | class ConcurrentLinkedQueue&lt;E> extends AbstractQueue&lt;E> implements Queue&lt;E>, Serializable Since 1.5
                ol
                    li 크기 제한 없고, 스레드-안전한 연결된 Queue
                    li size 계산에 순회가 필요하므로, 오차가 있을 수 있다
                    li addAll 따위의 bulk 연산은 원자적으로 실행되지 않을 수 있다
                    li Collection, Iterator의 모든 선택적 연산을 구현했다.
            details
                h2.marker
                    | class ConcurrentlinkedDeque&lt;E> extends AbstractCollection&lt;E> implements Deque&lt;E>, Serializable Since 1.7
                ol
                    li 크기 제한 없고, 스레드-안전한 연결된 Deque
                    li size 계산에 순회가 필요하므로, 오차가 있을 수 있다
                    li addAll 따위의 bulk 연산은 원자적으로 실행되지 않을 수 있다
                    li Collection, Iterator의 모든 선택적 연산을 구현했다.
            details
                h2.marker interface ConcurrentMap&lt;K, V> extends Map&lt;K, V> Since 1.5
                ol
                    li 스레드-안전, 작업의 원자성 보장
                    |             Map의 각 연산, Map이 반환하는 컬렉션들의 연산 모두 재정의해야 한다
            details
                h2.marker
                    | interface ConcurrentNavigableMap&lt;K, V> extends ConcurrentMap&lt;K, V>, NavigableMap&lt;K, V> Since 1.6
                |         NavigableMap 연산을 지원하는 ConcurrentMap
            details
                h2.marker
                    | class ConcurrentHashMap&lt;K, V> extends AbstractMap&lt;K, V> implements ConcurrentMap&lt;K, V>, Serializable Since 1.5
                ol
                    li 읽기 연산에 대해서는 완전한 동시성을, 갱신 연산에 대해서는 높은 수준의 동시성을 제공
                    |             Hashtable의 모든 연산을 구현했다. 읽기 연산에 대해 원소를 잠그지는 않으며, 테이블 전체를 잠기는 기능 또한 없다. 가져간 원소를 사용하려고 하는 시점에는 맵에서 제거됐을 수도 있다.
                    li 카운터로 사용할 수 있다. 예. map.computeIfAbsent(key, x -> new LongAdder()).increment();
                    li Map, Iterator의 모든 선택적 연산을 구현했다
                    li 3가지 Bulk 연산을 지원한다 : forEach, search, reduce
                    |             인자로 받은 parallelismThreshold보다 맵이 작다고 판단되면 순차적으로 원소를 소비, 그 외엔 병렬로 소비. 1이면 최대 병렬성, Long.MAX_VALUE면 병렬 X
                    li 모든 작업 메서드의 매개변수는 non-null이어야 한다
                    li public ConcurrentHashMap(int initialCapacity, float loadFactor) Since 1.6 + 오버로딩
                details
                    h2.marker Method Detail
                    ol
                        li boolean contains(Object value)
                        |                 containsValue(Object)와 동일하며, Hashtable과의 호환을 위해 존재
                        li Enumeration&lt;K> keys() + elements
                        li long mappingCount()
                        |                 크기가 매우 큰 경우, Map.size() 대신 이용
                        li static &lt;K> ConcurrentHashMap.KeySetView&lt;K, Boolean> newKeySet() Since 1.8 + 오버로딩
                        li ConcurrentHashMap.KeySetView&lt;K, V> keySet(V mappedValue)
                        li
                            | void forEach(long parallelismThreshold, BiConsumer&lt;? super K, ? super V> action) Since 1.8
                        |                 + 오버로딩, forEachKey, forEachValue, forEachEntry
                        li
                            | &lt;U> U search(long parallelismThreshold, BiFunction&lt;? super K, ? super V, ? extends U> searchFunction) Since 1.8
                        |                 찾는 원소에 대해서는 non-null 반환 + searchKeys, searchValues, searchEntries
                        li
                            | &lt;U> U reduce(long parallelismThreshold, BiFunction&lt;? super K, ? super V, ? extends U> transformer, BiFunction&lt;? super U, ? super U, ? extends U> reducer) Since 1.8
                        |                 + reduceToDouble ~ Int, reduceKeys, reduceKeysToDouble ~ Int, reduceValues, reduceValuesToDouble ~ Int, reduceEntries, reduceEntriesToDouble ~ Int
            details
                h2.marker
                    | class ConcurrentSkipListMap&lt;K,V> extends AbstractMap&lt;K,V> implements ConcurrentNavigableMap&lt;K,V>, Cloneable, Serializable Since 1.6
                ol
                    li
                        | ConcurrentNavigableMap 구현체. 평균 log(n) 시간이 소요되는, 스레드-안전한
                        a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='http://en.wikipedia.org/wiki/Skip_list') SkipList
                        |  구현을 이용
                    li 오름차순 정렬된 뷰와 이터레이터가 내림차순보다 빠르다
                    li putAll과 같은 bulk 연산은 원자적으로 종료되지 않을 수 있다
                    li Map, Iterator의 모든 선택적 연산을 구현했다
                    li public ConcurrentSkipListMap(Comparator&lt;? super K> comparator) + 오버로딩
                    |             지정하지 않은 경우, 자연스러운 정렬을 이용한다
            details
                h2.marker
                    | class ConcurrentSkipListSet&lt;E> extends AbstractSet&lt;E> implements NavigableSet&lt;E>, Cloneable, Serializable Since 1.6
                ol
                    li ConcurrentSkipListMap을 이용한 NavigableSet
                    li public ConcurrentSkipListSet(Comparator&lt;? super E> comparator)
                    |             지정하지 않은 경우, 자연스러운 정렬을 이용한다
        hr
        details
            h2.marker 실행 기법
            details
                h2.marker class Semaphore implements Serializable Since 1.5
                ol
                    li 제한된 수의 접근 권한을 acquire()로 획득, release()로 반환.
                    |             fairness : acquire()호출 순서대로 권한 획득.
                    li public Semaphore(int permits, boolean fair) + 오버로딩
                    |             fair : 지정하지 않은 경우 false
                details
                    h2.marker Method Detail
                    ol
                        li void acquire() + 오버로딩
                        |                 권한을 하나 요구한다. 권한을 얻을 때까지 대기하며, 대기 중인 스레드는 인터럽트될 수 있다.
                        li void acquireUninterruptibly() + 오버로딩
                        |                 대기 중일 때 인터럽트되더라도 계속 대기한다. 인터럽트되지 않았을 경우와 권한을 얻는 시기가 달라질 수 있다
                        li boolean tryAcquire() + 오버로딩
                        li void release() + 오버로딩
                        li int availablePermits()
                        li int drainPermits() : 가용한 모든 권한을 얻는다. 만약 음수라면 release하여 0으로 맞춘다.
                        li boolean isFair()
                        li final boolean hasQueuedThreads()
                        li final int getQueueLength()
            details
                h2.marker class CountDownLatch Since 1.5
                ol
                    li count가 0일 될때까지(원하는 작업들이 완료될 때까지), 1개 이상의 스레드가 대기하는 동기화 제공.
                    li public CountDownLatch(int count)
                    li void await()
                    |             count가 0이 될때까지 대기한다. 대기 중에 인터럽트될 수 있다
                    li boolean await(long timeout, TimeUnit unit)
                    |             대기 중에 timeout을 넘으면 즉시 false 반환
                    li void countDown()
                    |             --count, count가 0이면 대기하는 모든 스레드를 깨운다
                    li long getCount()
            details
                h2.marker class CyclicBarrier Since 1.5
                ol
                    li 스레드들이 공통의 목적이 달성되기까지 함께 대기. 그 목적을 barrier라고 하며, barrier를 재사용할 수 있어 cyclic하다.
                    li public CyclicBarrier(int parties, Runnable barrierAction) + 오버로딩
                    |             barrierAction : barrier를 넘을 때 실행. 지정하지 않은 경우, 대기하던 스레드를 깨우기만 한다
                    li int getParties()
                    li int await()
                    |             마지막 스레드가 await을 호출할 때까지 대기한다. 대기 중에 인터럽트될 수 있다. 현재 스레드의 대기 순번 반환. getParties() - 1이 첫 번째, 0이 마지막 스레드.
                    li int await(long timeout, TimeUnit unit)
                    |             timeout을 초과하여 대기하면 barrier는 부서진다
                    li boolean isBroken()
                    li void reset()
                    |             barrier를 초기 상태로 재설정한다. 이미 대기 중인 스레드가 있다면 BrokenBarrierException 발생. 부서진 barrier를 재사용하려면 별도의 동기화가 필요하므로, 차라리 새로 하나 만들자
                    li int getNumberWaiting()
            details
                h2.marker class Exchanger&lt;V> Since 1.5
                ol
                    li 두 스레드가 같은 시점에 값을 서로 교환하도록 해준다.
                    li public Exchanger()
                    li V exchange(V x) throws InterruptedException
                    |             다른 스레드가 같은 지점에 도달하기까지 기다렸다가, 서로 값을 교환한다.
                    li
                        | V exchange(V x, long timeout, TimeUnit unit) throws InterruptedException, TimeoutException
                    |             timeout 초과 시 TimeoutException 발생
            details
                h2.marker class Phaser Since 1.7
                ol
                    li 재사용 가능한 동기화 barrier. CyclicBarrier, CountDownLatch 기능에 더해 보다 유연한 메서드 제공
                    li CyclicBarrier와 다르게 각 회전마다 총 대기하는 스레드 수가 다를 수 있다
                    |             현재 phase가 완료되기 전에 미리 이후의 phase(들)을 등록할 수 있다. 각 phase는 0부터 시작하는 번호를 가진다(Integer.MAX_VALUE에 도달하면 다음은 다시 0)
                    li
                        | 계층 구조를 구성할 수 있다. 자식 Phaser의 parties가 0이 아니게 되는 순간 parent에 등록되고, 0이 되는 순간 parent에서 제거된다
                    li public Phaser(int parties) + 오버로딩
                    |             parties : 다음 phase로 넘어가기 위해 필요한 수
                    li public Phaser(Phaser parent, int parties)
                    |             parties : 다음 phase로 넘어가기 위해 필요한 수. 지정하지 않으면 0
                details
                    h2.marker Method Detail
                    ol
                        li int register() + bulkRegister
                        |                 새로운 phase를 등록한다
                        li int arrive()
                        |                 현재 phaser에 도착한다. 다른 스레드의 도착을 기다리지는 않는다. 현재 phase 번호를 반환한다(종료됐다면 음수)
                        li int arriveAndDeregister()
                        |                 현재 phaser에 도착하고, 이후 phase에서는 자신이 빠짐을 알린다
                        li int arriveAndAwaitAdvance()
                        |                 현재 phaser에 도착하고, 현재 phase의 모든 구성원이 도착할 때까지 기다린다 == awaitAdvance(arrive())
                        li int awaitAdvance(int phase) + awaitAdvanceInterruptibly
                        |                 지정한 번호의 phase의 모든 구성원이 도착할 때까지 기다린다. 현재 phase의 번호와 다르거나, phaser가 종료된 경우엔 즉시 반환한다.
                        li void forceTermination() + isTerminated
                        |                 계층 구조에 속해있다면, 모든 phaser가 종료된다
                        li final int getPhase()
                        |                 현재 phase 번호를 반환한다. Phaser가 종료됐다면 음수(마지막 phase 번호 + Integer.MAX_VALUE)를 반환한다
                        li int getRegisteredParties() + getArrivedParties, getUnarrivedParties
                        li Phaser getParent() + getRoot
        hr
        details
            h2.marker class ThreadLocalRandom extends Random Since 1.7
            ol
                li 현재 스레드에 격리된 난수 생성기
                li static ThreadLocalRandom current()
                li int nextInt(int origin, int bound) : [origin, bound)
                |         + nextLong, nextDouble
        hr
        details
            h2.marker enum TimeUnit Since 1.5
            ol
                li
                    | NANOSECONDS, MICROSECONDS, MILLISECONDS, SECONDS, MINUTES Since 1.6, HOURS Since 1.6, DAYS Since 1.6
                li long convert(long sourceDuration, TimeUnit sourceUnit)
                li long toNanos(long duration) == NANOSECONDS.convert(duration, this)
                |         + toMicros, toMillis, toSeconds, toMinutes, toHours, toDays
                li void timeWait(Object obj, long timeout)
                |         timeout만큼 obj.wait()
                li void timedJoin(Thread thread, long timeout)
                |         timeout만큼 Thread.join()
                li void sleep(long timeout)
                li ChronoUnit toChronoUnit() Since 9
                li static TimeUnit of(ChronoUnit chronoUnit) Since 9
        hr


    h1.marker java.util.concurrent.atomic Since 1.5
        details(open='')
            h2.marker Package h2.marker
            ol
                li 변수 하나에 대한 잠금 없는 스레드-안전성을 제공한다
                li VarHandle을 통해 변수를 원자적으로 접근한다
                li AtomicBoolean, AtomicInteger 등은 일반적인 Boolean, Integer 등을 대신할 수 없다
                li 메모리 장벽을 만나면 CPU 코어의 캐시값이 RAM으로 반영된다
        hr
        details
            h2.marker abstract class VarHandle implements Constable Since 9
            ol
                li java.lang.invoke 패키지 멤버임
                li
                    | 하나의 변수, 매개변수, 필드 등에 대한 동적인 타입 참조. plain 읽기/쓰기, volatile 읽기/쓰기, compare-and-set 접근을 지원한다
            details
                h2.marker static enum VarHandle.AccessMode
                table
                    tbody
                        tr
                            th GET
                            td VarHandle.get
                        tr
                            th SET
                            td VarHandle.set
                        tr
                            th GET_VOLATILE
                            td VarHandle.getVolatile
                        tr
                            th SET_VOLATILE
                            td VarHandle.setVolatile
                        tr
                            th GET_ACQUIRE
                            td VarHandle.getAcquire
                        tr
                            th SET_RELEASE
                            td VarHandle.setRelease
                        tr
                            th GET_OPAQUE
                            td VarHandle.getOpaque
                        tr
                            th SET_OPAQUE
                            td VarHandle.setOpaque
                        tr
                            th COMPARE_AND_SET
                            td VarHandle.compareAndSet
                        tr
                            th COMPARE_AND_EXCHANGE
                            td VarHandle.compareAndExchange
                        tr
                            th COMPARE_AND_EXCHANGE_ACQUIRE
                            td VarHandle.compareAndExchangeAcquire
                        tr
                            th COMPARE_AND_EXCHANGE_RELEASE
                            td VarHandle.compareAndExchangeRelease
                        tr
                            th WEAK_COMPARE_AND_SET_PLAIN
                            td VarHandle.weakCompareAndSetPlain
                        tr
                            th WEAK_COMPARE_AND_SET
                            td VarHandle.weakCompareAndSet
                        tr
                            th WEAK_COMPARE_AND_SET_ACQUIRE
                            td VarHandle.weakCompareAndSetAcquire
                        tr
                            th WEAK_COMPARE_AND_SET_RELEASE
                            td VarHandle.weakCompareAndSetRelease
                        tr
                            th GET_AND_SET
                            td VarHandle.getAndSet
                        tr
                            th GET_AND_SET_ACQUIRE
                            td VarHandle.getAndSetAcquire
                        tr
                            th GET_AND_SET_RELEASE
                            td VarHandle.getAndSetRelease
                        tr
                            th GET_AND_ADD
                            td VarHandle.getAndAdd
                        tr
                            th GET_AND_ADD_ACQUIRE
                            td VarHandle.getAndAddAcquire
                        tr
                            th GET_AND_ADD_RELEASE
                            td VarHandle.getAndAddRelease
                        tr
                            th GET_AND_BITWISE_OR
                            td VarHandle.getAndBitwiseOr
                        tr
                            th GET_AND_BITWISE_OR_RELEASE
                            td VarHandle.getAndBitwiseOrRelease
                        tr
                            th GET_AND_BITWISE_OR_ACQUIRE
                            td VarHandle.getAndBitwiseOrAcquire
                        tr
                            th GET_AND_BITWISE_AND
                            td VarHandle.getAndBitwiseAnd
                        tr
                            th GET_AND_BITWISE_AND_RELEASE
                            td VarHandle.getAndBitwiseAndRelease
                        tr
                            th GET_AND_BITWISE_AND_ACQUIRE
                            td VarHandle.getAndBitwiseAndAcquire
                        tr
                            th GET_AND_BITWISE_XOR
                            td VarHandle.getAndBitwiseXor
                        tr
                            th GET_AND_BITWISE_XOR_RELEASE
                            td VarHandle.getAndBitwiseXorRelease
                        tr
                            th GET_AND_BITWISE_XOR_ACQUIRE
                            td VarHandle.getAndBitwiseXorAcquire
            details
                h2.marker Method Detail
                ol
                    li final Object get(Object... args)
                    |             변수가 non-volatile인 것처럼 읽는다(= plain read). 모든 VarHandle 인스턴스에서 지원된다
                    li final void set(Object... args)
                    |             변수가 non-volatile, non-final인 것처럼 쓴다(= plain write). 메서드 시그니처는 (CT1 ct1, ..., CTn ctn, T newValue)void.
                    li final Object getVolatile(Object... args)
                    |             변수가 volatile인 것처럼 읽는다.
                    li final void setVolatile(Object... args)
                    |             변수가 volatile인 것처럼 쓴다. 메서드 시그니처는 (CT1 ct1, ..., CTn ctn, T newValue)void.
                    li final Object getOpaque(Object... args) + setOpaque
                    |             Opaque : Program order 순서대로 접근한다. 다른 스레드와의 조율은 없다
                    li final Object getAcquire(Object... args)
                    |             같은 변수에 대해 이어지는 load/store 연산이 이 접근보다 먼저 발생하지 않는다
                    li final void setRelease(Object... args)
                    |             같은 변수에 대한 이전의 load/store 연산이 이 접근보다 나중에 발생하지 않는다
                    li final boolean compareAndSet(Object... args)
                    |             원자적으로 다음이 실행된다. getVolatile과 동일한 문맥으로 가져온 값(witness value)이 expectedValue와 동일(==)하면 setVolatile과 동일한 문맥으로 newValue 설정 후 true 반환, 그 외엔 false 반환
                    br
                    |             메서드 시그니처는 (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean
                    li final Object compareAndExchange(Object... args)
                    |             원자적으로 다음이 실행된다. getVolatile과 동일한 문맥으로 가져온 값(witness value)이 expectedValue와 동일(==)하면 setVolatile과 동일한 문맥으로 newValue 설정. 반환값은 witness value
                    li final Object compareAndExchangeAcquire(Object... args)
                    |             원자적으로 다음이 실행된다. getAcquire와 동일한 문맥으로 가져온 값(witness value)이 expectedValue와 동일(==)하면 set와 동일한 문맥으로 newValue 설정. 반환값은 witness value
                    li final Object compareAndExchangeRelease(Object... args)
                    |             원자적으로 다음이 실행된다. get와 동일한 문맥으로 가져온 값(witness value)이 expectedValue와 동일(==)하면 setRelease와 동일한 문맥으로 newValue 설정. 반환값은 witness value
                    li final boolean weakCompareAndSetPlain(Object... args)
                    |             다음이 실행된다. get과 동일한 문맥으로 가져온 값(witness value)이 expectedValue와 동일(==)하면 set과 동일한 문맥으로 newValue 설정 후 true 반환. 그 외엔 false
                    li final boolean weakCompareAndSet(Object... args) + ~Acquire, ~Release
                    |             다음이 실행된다. getVolatile과 동일한 문맥으로 가져온 값(witness value)이 expectedValue와 동일(==)하면 setVolatile과 동일한 문맥으로 newValue 설정 후 true 반환. 그 외엔 false
                    li final Object getAndSet(Object... args) + ~Acquire, ~Release
                    |             원자적으로 다음이 실행된다. getVolatile과 동일한 문맥으로 값(witness value)을 가져오고, setVolatile과 동일한 문맥으로 newValue 설정 후 witness value 반환
                    li final Object getAndAdd(Object... args) + ~Acquire, ~Release
                    |             원자적으로 값을 더한 후 이전 값 반환. 메서드 시그니처는 (CT1 ct1, ..., CTn ctn, T value)T
                    li final Object getAndBitwiseOr(Object... args)
                    |             원자적으로 OR 연산 수행 후 이전 값 반환. 메서드 시그니처는 (CT1 ct1, ..., CTn ctn, T mask)T
                    br
                    |             + ~Acquire, ~Release, getAndBitwiseAnd~, getAndBitwiseXor~
                    li final Class&lt;?> varType() + coordinateTypes
                    li
                        | final MethodType accessModeType(VarHandle.AccessMode accessMode) + isAccessModeSupported
                    |             접근 모드 획득
                    li static void acquireFence()
                    |             장벽 이전의 load 연산이 장벽 이후의 load/store 뒤로 재배치되지 않음
                    li static void fullFence()
                    |             장벽 이전의 load/store 연산이 장벽 이후의 load/store 뒤로 재배치되지 않음
                    li static void releaseFence()
                    |             장벽 이전의 load/store 연산이 장벽 이후의 store 뒤로 재배치되지 않음
                    li static void loadLoadFence()
                    |             장벽 이전의 load 연산이 장벽 이후의 load 뒤로 재배치되지 않음
                    li static void storeStoreFence()
                    |             장벽 이전의 store 연산이 장벽 이후의 store 뒤로 재배치되지 않음
        hr
        details
            h2.marker class AtomicBoolean implements Serializable Since 1.5
            ol
                li public AtomicBoolean(boolean initialValue) + 오버로딩
                |         지정하지 않으면 false
                li final boolean get() : VarHandle#getVolatile
                li
                    | final boolean compareAndSet(boolean expectedValue, boolean newValue) : VarHandle#compareAndSet
                li
                    | boolean weakCompareAndSetPlain(boolean expectedValue, boolean newValue) Since 9 + VarHandle#weakCompareAndSetPlain
                li final void set(boolean newValue) : VarHandle#setVolatile
                li final void lazySet(boolean newValue) Since 1.6 : VarHandle#setRelease
                li final boolean getAndSet(boolean newValue) : VarHandle#getAndSet
                li final boolean getPlain() Since 9 : VarHandle#get
                li final void setPlain(boolean newValue) Since 9 : VarHandle#set
                li final boolean getOpaque() Since 9 : VarHandle#getOpaque
                li final void setOpaque(boolean newValue) Since 9 : VarHandle#setOpaque
                li final boolean getAcquire() Since 9 : VarHandle#getAcquire
                li final void setRelease(boolean newValue) Since 9 : VarHandle#setRelease
                li
                    | final boolean compareAndExchange(boolean expectedValue, boolean newValue) Since 9 + ~Acquire, ~Release
                |         메모리 영향은 VarHandle#compareAndExchange와 같다.
                li
                    | final boolean weakCompareAndSetVolatile(boolean expectedValue, boolean newValue) Since 9 + ~Acquire, ~Release
                |         메모리 영향은 VarHandle#weakCompareAndSet와 같다
        hr
        details
            h2.marker
                | class AtomicInteger extends Number implements Serializable Since 1.5 + AtomicLong, AtomicReference
            ol
                li public AtomicInteger(int initialValue) + 오버로딩
                |         지정하지 않은 경우 0
                li final int get() : VarHandle#getVolatile
                li final void set(int newValue) : VarHandle#setVolatile
                li final void lazySet(int newValue) Since 1.6 : VarHandle#setRelease
                li final int getAndSet(int newValue) : VarHandle#getAndSet
                li
                    | final boolean weakCompareAndSetPlain(int expectedValue) Since 9 : VarHandle#weakCompareAndSetPlain
                li VarHandle#getAndAdd
                |         final int getAndIncrement() + getAndDecrement, getAndAdd, incrementAndGet, decrementAndGet, addAndGet
                li VarHandle#compareAndSet
                |         final boolean compareAndSet(int expectedValue, int newValue) + getAndUpdate, updateAndGet, getAndAccumulate, accumulateAndGet
                li getPlain ~ weakCompareAndSetRelease​ : AtomicBoolean과 동일
        hr
        details
            h2.marker
                | class AtomicIntegerArray implements Serializable Since 1.5 + AtomicLongArray, AtomicReferenceArray
            ol
                li 인덱스를 추가로 받는 것 외에, 지원하는 메서드들은 AtomicInteger와 같다.
                li public AtomicIntegerArray(int length) : 각 원소는 0으로 초기화.
                li public AtomicIntegerArray(int[] array)
                li final int length()
        hr
        details
            h2.marker
                | abstract class AtomicIntegerFieldUpdater&lt;T> Since 1.5 + AtomicLongFieldUpdater, AtomicReferenceFieldUpdater
            ol
                li 지정된 volatile int 필드를 atomic 연산으로 갱신.
                |         해당 필드를 단일 업데이터로만 접근한다면, compareAndSet 메서드들이 원자적으로 작동됨이 보장된다
                li 지원하는 메서드는 AtomicInteger와 유사하다.
                li
                    | static &lt;U> AtomicIntegerFieldUpdater&lt;U> newUpdater(Class&lt;U> tclass, String fieldName)
        hr
        details
            h2.marker class AtomicMarkableReference&lt;V> Since 1.5
            ol
                li 원자적으로 갱신되는 마커 bit와 객체 참조 쌍
                li public AtomicMarkableReference(V initialRef, boolean initialMark)
                li V getReference() + isMarked
                li V get(boolean[] markHolder)
                |         markHolder[0]에 해당하는 참조 반환
                li
                    | boolean compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark) + weakCompareAndSet
                |         기존 참조와 마커 bit가 모두 예상과 동일(==)하다면 원자적으로 갱신하고 true 반환. 그 외엔 false
                li void set(V newReference, boolean newMark)
                li boolean attemptMark(V expectedReference, boolean newMark)
                |         기존 참조가 예상과 동일(==)하다면, 마커 bit를 원자적으로 갱신하고 true 반환. 그 외엔 false
        hr
        details
            h2.marker class AtomicStampedReference&lt;V> Since 1.5
            ol
                li 원자적으로 갱신되는 index와 참조 쌍
                li public AtomicStampedReference(V initialRef, int initialStamp)
                li V getReference() + getStamp
                li V get(int[] stampHolder)
                |         stampHolder[0]에 해당하는 참조 반환
                li
                    | boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp) + weakCompareAndSet
                |         기존 참조와 인덱스가 예상과 동일(==)하다면 원자적으로 갱신하고 true 반환. 그 외엔 false
                li void set(V newReference, int newStamp)
                li boolean attempStamp(V expectedReference, int newStamp)
                |         기존 참조가 예상과 동일(==)하다면, 인덱스를 원자적으로 갱신하고 true 반환. 그 외엔 false
        hr
        details
            h2.marker class LongAdder extends Number implements Serializable Since 1.8 + DoubleAdder
            ol
                li 초깃값 0으로 시작하는 스레드-안전한 합계.
                |         합의 순서는 정의되지 않으므로 순서에 상관 없는 경우에 이용해야 한다.
                li public LongAdder()
                li void add(long x)
                li void increment()
                li void decrement()
                li long sum() : 현재 합계 반환
                li void reset()
                li long sumThenReset()
        hr
        details
            h2.marker
                | class LongAccumulator extends Number implements Serializable Since 1.8 + DoubleAccumulator
            ol
                li 특정 값과 특정 함수로 갱신되는 long 값 유지.
                |         주어진 accumulatorFunction은 부작용이 없어야 한다.
                li public LongAccumulator(LongBinaryOperator accumulatorFunction, long identity)
                li void accumulate(long x)
                li long get()
                li void reset()
                li long getThenReset()
        hr


    h1.marker java.util.function Since 1.8
        details
            h2.marker Consumer
            details
                h2.marker @FunctionalInterface interface Consumer&lt;T> Since 1.8
                ol
                    li 인자를 하나 먹고 아무것도 반환하지 않는 소비자.
                    li void accept(T t)
                    li
                        | default Consumer&lt;T> andThen(Consumer&lt;? super T> after) : 이 소비자 다음에 after가 소비하는 병합된 소비자 반환.
            details
                h2.marker @FunctionalInterface interface DoubleConsumer Since 1.8 + int, long
                ol
                    li void accept(double value)
                    li default DoubleConsumer andThen(DoubleConsumer after)
            details
                h2.marker @FunctionalInterface interface BiConsumer&lt;T, U> Since 1.8
                ol
                    li 인자 두개를 먹고 아무것도 뱉지 않는 소비자.
                    li void accept(T t, U u) : 적당한 동작 수행
                    li
                        | default BiConsumer&lt;T, U> andThen(BiConsumer&lt;? super T, ? super U> after) : 현재 소비자가 작업을 마치면 after가 실행되는 새로운 소비자 반환.
            details
                h2.marker @FunctionalInterface interface ObjDoubleConsumer&lt;T> Since 1.8
                |         void accept(T t, double value) + int, long
        hr
        details
            h2.marker Supplier
            details
                h2.marker @FunctionalInterface interface Supplier&lt;T> Since 1.8
                |         T get()
            details
                h2.marker @FunctionalInterface interface BooleanSupplier Since 1.8
                |         boolean getAsBoolean() : boolean 값을 공급하는 생산자. + int, double, long
        hr
        details
            h2.marker Function, Operator
            details
                h2.marker @FunctionalInterface interface Function&lt;T, R> Since 1.8
                ol
                    li 인자 하나를 먹고 결과 하나를 뱉는 함수.
                    li R apply(T t)
                    li default &lt;V> Function&V, R> compose(Function&lt;? super V, ? extends T> before)
                    li default &lt;V> Function&lt;T, V> andThen(Function&lt;? super R, ? extends V> after)
                    li static &lt;T> Function&lt;T, T> identity() : 입력 인자 그대로 반환하는 함수.
            details
                h2.marker @FunctionalInterface interface IntFunction&lt;R> Since 1.8
                |         R apply(int value) + double, long
            details
                h2.marker @FunctionalInterface interface DoubleToIntFunction Since 1.8
                |         int applyAsInt(double value) + double, int, long 간의 상호 변환 함수들이 모두 정의됨
            details
                h2.marker @FunctionalInterface interface UnaryOperator&lt;T> extends Function&lt;T, T> Since 1.8
                |         static &lt;T> UnaryOperator&lt;T> identity()
            details
                h2.marker @FunctionalInterface interface DoubleUnaryOperator Since 1.8 + int, long
                ol
                    li double applyAsDouble(double operand)
                    li default DoubleUnaryOperator compose(DoubleUnaryOperator before)
                    li default DoubleUnaryOperator andThen(DoubleUnaryOperator after)
                    li static DoubleUnaryOperator identity() : 항상 입력값 그대로 반환하는 단항 연산자 반환.
            details
                h2.marker @FunctionalInterface interface ToDoubleFunction&lt;T> Since 1.8
                |         double applyAsDouble(T value) + int, long
            details
                h2.marker @FunctionalInterface interface BiFunction&lt;T, U, R> Since 1.8
                ol
                    li 인자 두개를 먹고 값을 반환하는 함수.
                    li R apply(T t, U u)
                    li
                        | default &lt;V> BiFunction&lt;T, U, V> andThen(Function&lt;? super R, ? extends V> after) : 함수가 실행되고 난 결과를 after가 처리하는 새로운 함수 반환.
            details
                h2.marker @FunctionalInterface interface ToDoubleBiFunction&lt;T, U> Since 1.8
                |         double applyAsDouble(T t, U u) + int, long
            details
                h2.marker
                    | @FunctionalInterface interface BinaryOperator extends BiFunction&lt;T, T, T> Since 1.8
                ol
                    li 같은 타입의 인자 두개를 먹고 같은 타입의 값을 반환하는 함수.
                    li
                        | static &lt;T> BinaryOperator&lt;T> minBy(Comparator&lt;? super T> comparator) : 주어진 comparator에 따라 둘 중 작은 것을 반환하는 함수를 생성.
                    li
                        | static &lt;T> BinaryOperator&lt;T> maxBy(Comparator&lt;? super T> comparator) : 주어진 comparator에 따라 둘 중 큰 것을 반환하는 함수 생성.
            details
                h2.marker @FunctionalInterface interface DoubleBinaryOperator Since 1.8
                |         double applyAsDouble(double left, double right) : double 두개를 먹고 double 하나를 반환하는 함수. + int, long
        hr
        details
            h2.marker Predicate
            details
                h2.marker @FunctionalInterface interface Predicate&lt;T> Since 1.8
                ol
                    li boolean test(T t)
                    li default Predicate&lt;T> and(Predicate&lt;? super T> other)
                    li default Predicate&lt;T> or(Predicate&lt;? super T> other)
                    li
                        | static &lt;T> Predicate&lt;T> isEqual(Object targetRef) : Object.equals(Object, Object)를 이용해 비교하는 Predicate 반환
            details
                h2.marker @FunctionalInterface interface DoublePredicate Since 1.8 + int, long
                ol
                    li boolean test(double value)
                    li default DoublePredicate and(DoublePredicate other)
                    li default DoublePredicate or(DoublePredicate other)
                    li default DoublePredicate negate()
            details
                h2.marker @FunctionalInterface interface BiPredicate&lt;T, U> Since 1.8
                ol
                    li 인자 두개를 먹고 가부를 판단하는 함수.
                    li boolean test(T t, U u)
                    li
                        | default BiPredicate&lt;T, U> and(BiPredicate&lt;? super T, ? super U> other) : A short-circuiting logical AND of this predicate and other.
                    li default BiPredicate&lt;T, U> negate()
                    li
                        | default BiPredicate&lt;T, U> or(BiPredicate&lt;? super T, ? super U> other) : A short-circuiting logical OR of this predicate and other.
        hr


    h1.marker java.util.regex Since 1.4
        details
            h2.marker interface MatchResult Since 1.5
            ol
                li 정규표현식 매칭 결과. group의 의미에 대해선 Pattern 참고.
                li int start() : 매치된 결과의 시작 인덱스 반환
                li int start(int group) : group번째 매치된 결과의 시작 인덱스 반환
                li int end() : 매치된 결과의 마지막 글자 다음 인덱스 반환
                li int end(int group) : group번째 매치된 결과의 마지막 글자 다음 인덱스 반환
                li String group() : 이전 매치된 결과 반환
                li String group(int group) : group번째 매치된 결과 반환
                li
                    | int groupCount() : 매치된 group 개수 반환
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/regex/MatchResultExample.java', lan: 'java'})
        hr
        details
            h2.marker final class Pattern implements Serializable Since 1.4
            ul
                li Line terminator
                |         "\n", "\r\n", "\r", "\u0085", "\u2028", "\u2029" // UNIX_LINES 모드에서는 "\n"만 줄 끝으로 인식
                li Groups and capturing
                ul
                    li Group : 괄호로 감싸인 정규표현식 (X)
                    li Capturing group : 괄호 순서에 따라 그룹에 ID가 매겨지며, 이는 나중에 참조(backreference)될 수 있다
                    |             0번 그룹은 항상 전체 표현을 가리킨다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[16,26]', lan: 'java'}) 예를 들어
                    |  (A)(B(C))에 대하여,
                    table
                        tr
                            th Group ID
                            th Pattern
                        tr
                            td 0
                            td (A)(B(C))
                        tr
                            td 1
                            td (A)
                        tr
                            td 2
                            td (B(C))
                        tr
                            td 3
                            td (C)
                    li
                        | Non-capturing group : (?:X)는 후참조할 수 없다
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[28,37]', lan: 'java'}) 예 »
                li Character expression
                ul
                    li
                        | x, \\ : 각각 x, \에 대응
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[39,39]', lan: 'java'}) 예 »
                    li
                        | \0n, \0nn, \0nnn : 8진수 아스키 코드[0,255] == [00, 0377]
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[40,40]', lan: 'java'}) 예 »
                    li
                        | \xhh : 16진수 아스키 코드[0,255]
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[41,41]', lan: 'java'}) 예 »
                    li
                        | \uhhhh, \u{h...h} : 16진수 유니코드[Character.MIN_CODE_POINT, Character.MAX_CODE_POINT]
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[42,42]', lan: 'java'}) 예 »
                    li
                        | \N{name} : 유니코드 이름
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[43,43]', lan: 'java'}) 예 »
                    li
                        | \t(tab \u0009), \n(newline \u000A), \r(carriage-return \u000D), \f(form-feed \u000C), \a(alert \u0007), \e(escape \u001B), \cx(x에 관한 제어 문자)
                li Character class
                ul
                    li
                        | [abc] : 단순 집합
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[44,44]', lan: 'java'}) 예 »
                    li
                        | [^abc] : 여집합
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[45,45]', lan: 'java'}) 예 »
                    li
                        | [a-z] : 유니코드 Range(inclusive)
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[46,46]', lan: 'java'}) 예 »
                    li
                        | [a-d[m-p]] == [a-dm-p] : 합집합
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[47,47]', lan: 'java'}) 예 »
                    li
                        | [a-z&&[def]] : 교집합
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[48,48]', lan: 'java'}) 예 »
                    li
                        | [a-z&&[^bc]] : 차집합(A and not(B) == A - B)
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[49,49]', lan: 'java'}) 예 »
                li Predefined character classe
                ul
                    li . : 임의 문자. DOTALL 플래그가 있으면 line terminator도 매칭
                    li \d : [0-9], \D : [^\d]
                    li \s : 공백 문자 [ \t\n\x0B\f\r], \S : [^\s]
                    li \h : 수평 공백 [ \t\xA0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000], \H : [^\h]
                    li \v : 수직 공백 [\n\x0B\f\r\x85\u2028\u2029], \V : [^\v]
                    li \w : Word character, \W : [^w]
                li java.lang.Character class
                ul
                    li \p{javaLowerCase} : Character.isLowerCase()
                    li \p{javaUpperCase} : Character.isUpperCase()
                    li \p{javaWhitespace} : Character.isWhitespace()
                    li \p{javaMirrored} : Character.isMirrored()
                li Unicode class
                ul
                    li \R : 임의 줄바꿈 문자열 \u000D\u000A|[\u000A\u000B\u000C\u000D\u0085\u2028\u2029]
                    li \X : Any Unicode extended grapheme cluster
                    li \b{g} : A Unicode extended grapheme cluster boundary
                    li \P{expr} == [^\p{expr}]
                    |             \p{IsLatin} : Latin
                    strong script
                    | , \p{InGreek} : Greek
                    strong block
                    | ,
                    |             \p{Lu} : Uppercase letter(
                    strong category
                    | ), \p{IsAlphabetic} :
                    strong binary property
                    | ,
                    |             \p{Sc} : Currency symbol
                li Boundary matcher
                ul
                    li ^ : 줄 시작, $ : 줄 끝
                    li \b : 단어 경계, \B : 비단어 경계
                    li \A : The beginning of the input
                    li \G : The end of the previous match
                    li \z » The end of the input
                li Greedy quantifier
                ul
                    | 처음에 매치할 수 있는 만큼 최대한 매치. 그 다음 요소의 매칭이 없으면 백트래킹.
                    a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://stackoverflow.com/questions/5319840/greedy-vs-reluctant-vs-possessive-quantifiers') 참고자료
                    li X? : X, once or not at all
                    li X* : X, zero or more times
                    li X+ : X, one or more times
                    li X{n} : X, exactly n times
                    li X{n,} : X, at least n times
                    li X{n,m} : X, at least n but not more than m times
                li Reluctant quantifier
                |         처음에 최소한만 매치. 그 다음 요소의 매칭이 없으면 백트래킹.
                |         X??, X*?, X+?, X{n}?, X{n,}?, X{n,m}?
                li Possessive quantifier
                |         Greedy quantifier와 같지만, 백트래킹은 없다.
                |         X?+, X*+, X++, X{n}+, X{n,}+, X{n,m}+
                li Logical operation
                ul
                    li XY : X followed by Y
                    li X|Y : Either X or Y
                    li (X) : X, as a capturing group
                li Backreference
                ul
                    li \n : The n-th capturing group matched
                    li \k&lt;name> : Tthe named-capturing group "name" matched
                    |             ↑ 정규표현식 내에서는 위 두 가지 backreference가 가능하며, replace()에서는 $0, $1, $2, ...로 표기한다
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[51,57,59,71,73,85]', lan: 'java'}) 예 »
                li Quotation
                ul
                    li \ : Nothing, but quotes the following character
                    li \Q : Nothing, but quotes all characters until \E
                    li \E : Nothing, but ends quoting started by \Q
                li Special construct
                ul
                    li
                        | (?&lt;name>X) : X, as a named-capturing group
                        +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[59,71]', lan: 'java'}) 예 »
                    li (?:X) : X, as a non-capturing group
                    li (?idmsuxU-idmsuxU) : 각 플래그를 켜거나 끈다
                    li (?idmsux-idmsux:X) : 주어진 플래그로 non-capturing group X를 매칭한다
                    li (?=X) : Positive lookahead, (?!X) : Negative lookahead
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[51,57]', lan: 'java'}) 예1 »
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/Basic/src/io/github/donggi/RegexExample.java', displayrange='[87,102]', lan: 'java'}) 금칙어 판별 예 »
                    li (?&lt;=X) : Positive lookbehind, (?&lt;!X) : Negative lookbehind
                    li (?>X) : Non-capturing group + Possessive
            details
                h2.marker Field Detail
                ol
                    li public static final int UNIX_LINES
                    |             줄끝 '\n'만 ., ^, $에서 동작. (?d) 플래그도 같은 의미.
                    li public static final int CASE_INSENSITIVE
                    |             대소문자 구분 없음. (?i) 플래그도 같은 의미.
                    li public static final int COMMENTS
                    |             공백과 주석 허용. 공백과 #부터 줄 끝까지의 주석이 무시된다. (?x) 플래그도 같은 의미.
                    li public static final int MULTILINE
                    |             ^, $이 각 줄의 끝을 기준으로도 작동; 기본 동작은 입력 시작과 끝에서만 작동. (?m) 플래그도 같은 의미.
                    li public static final int LITERAL Since 1.5
                    |             표현식 전체를 상수 문자열 취급.
                    li public static final int DOTALL
                    |             .이 줄 끝도 포함하여 매치; 기본 동작은 줄 끝 문자는 미포함. (?s) 플래그도 같은 의미.
                    li public static final int UNICODE_CASE
                    |             CASE_INSENSITIVE 플래그가 유니코드 표준 상에서 동작한다; 기본은 US-ASCII에서만 동작. (?u) 플래그도 같은 의미.
            details
                h2.marker Method Detail
                ol
                    li static Pattern compile(String regex) + 1 오버로딩
                    li static boolean matches(String regex, CharSequence input) : 1회용
                    li String pattern()
                    li String toString() Since 1.5
                    li static String quote(String s) Since 1.5
                    |             s를 매칭할 수 있는 정규표현식 리터럴 문자열 표현을 반환.
                    li int flags()
                    li Matcher matcher(CharSequence input)
                    li String[] split(CharSequence input) + 1 오버로딩
                    li Predicate&lt;String> asPredicate() Since 1.8
                    li Stream&lt;String> splitAsStream(CharSequence nput) Since 1.8
        hr
        details
            h2.marker final class Matcher implements MatchResult Since 1.4
            ol
                | Pattern으로부터 만들어지는 매칭 엔진으로, 아래 세 가지 작업을 수행한다.
                li matches() : 전체 입력에 대해 패턴 매칭
                li lookingAt() : 입력 시작부분 패턴 매칭
                li find() : 입력의 다음 부분 패턴 매칭
            details
                h2.marker Method Detail
                ol
                    li Pattern pattern()
                    li MatchResult toMatchResult() Since 1.5
                    li Matcher usePattern(Pattern newPattern) Since 1.5
                    li Matcher reset() + 1오버로딩
                    li int start(String name) Since 1.8
                    |             주어진 식별자에 해당하는 그룹의 시작 인덱스 반환
                    li int end(String name) Since 1.8
                    li String group(String name) Since 1.7
                    li boolean mathes()
                    li boolean find() + 1 오버로딩
                    li boolean lookingAt()
                    li static String quoteReplacement(String s) Since 1.5
                    |             appendReplacement 메서드의 replacement로 사용될 s의 리터럴 표기를 반환.
                    li Matcher appendReplacement(StringBuffer sb, String replacement) + 1 오버로딩
                    |             입력 소스의 append position부터 start() 전까지 sb에 추가. → replacement를 sb에 추가. 현재 matcher의 append position을 end()로 설정.
                    li StringBuffer appendTail(StringBuffer sb) + 1 오버로딩
                    |             입력 소스의 append position부터를 sb에 추가.
                    |             appendReplacement 메서드를 호출한 뒤에 이를 호출하여 남머지 부분을 복사할 목적으로 만들어짐.
                    li String replaceAll(String replacement)
                    |             입력 소스의 모든 매칭되는 부분을 replacement로 변경.
                    li String replaceAll(Function&lt;MatchResult, String> replacer) Since 9
                    li String replaceFirst(String replacement) + 1 오버로딩
                    li Stream&lt;MatchResult> results() Since 9
                    li Matcher region(int start, int end) Since 1.5
                    |             입력 소스의 특정 구간을 매칭 대상으로 하도록 초기화한다. transparency, anchoring 속성에 따라 동작이 다르다.
                    li int regionStart(), regionEnd() Since 1.5
                    li boolean hasTransparentBounds() Since 1.5
                    li Matcher useTransparentBounds(boolean b) Since 1.5
                    |             region의 경계 너머를 패턴 매칭에 보이도록 할지 여부
                    li boolean hasAnchoringBounds() Since 1.5
                    li Matcher useAnchoringBounds(boolean b) Since 1.5
                    |             region의 경계에서 ^, $를 작동하게 할지 여부
        hr


    h1.marker java.util.stream Since 1.8
        details
            h2.marker
                | interface BaseStream&lt;T, S extends BaseStream&lt;T, S>> extends AutoCloseable Since 1.8
            ol
                li Iterator&lt;T> iterator()
                li Spliterator&lt;T> spliterator()
                li boolean isParallel()
                li S sequential() : 순차적인 스트림 반환(어쩌면 자기 자신)
                li S parallel() : 병렬적인 스트림 반환(어쩌면 자기 자신)
                li S unordered() : 순서 없는 스트림 반환(어쩌면 자기 자신)
                li S onClose(Runnable closeHandler)
        hr
        details
            h2.marker interface DoubleStream extends BaseStream&lt;Double, DoubleStream> Since 1.8
            ol
                li DoubleStream map(DoubleUnaryOperator mapper)
                li &lt;U> Stream&lt;U> mapToObj(DoubleFunction&lt;? extends U> mapper) + int, long
                li DoubleStream flatMap(DoubleFunction&lt;? extends DoubleStream> mapper)
                li double[] toArray()
                li double sum()
                li OptionalDouble min(), max(), average(), findFirst(), findAny()
                li Doubleh2.markerStatistics h2.markerStatistics()
                li Stream&lt;Double> boxed()
        hr
        details
            h2.marker interface IntStream extends BaseStream&lt;Integer, Integer> Since 1.8 + LongStream
            ol
                li
                    b static interface IntStream.Builder
                li static IntStream range(int startInclusive, int endExclusive)
                li static IntStream rangeClosed(int startInclusive, int endInclusive)
        hr
        details
            h2.marker interface Stream&lt;T> extends BaseStream&lt;T, Stream&lt;T>> Since 1.8
            ol
                li 2가지 스트림 연산
                ul
                    li Terminal Operation
                    |             종결 연산. 스트림 연산 파이프라인의 마지막으로, 더 이상 스트림 연산을 수행할 수 없다.
                    li Intermediate Operation
                    |             중간 연산. 새로운 스트림을 반환한다.
                li 2가지 중간 연산
                ul
                    li Stateless Operation
                    |             요소의 연산 과정에 상태의 보존이 필요 없는 경우. filter, map 등
                    li Stateful Operation
                    |             요소의 연산 과정에 상태의 보존이 필요한 경우. sorted, distinct 등.
                    br
                    |             이러한 연산을 사용하기 위해선 스트림 전체 인풋이 필요할 수 있으며, 병렬 스트림에서는 요구되는 버퍼의 크기가 늘어나게 된다.
            details
                h2.marker static interface Stream.Builder&lt;T> Since 1.8
                ul
                    li void accept(T t)
                    li default Stream.Builder&lt;T> add(T t)
                    li Stream&lt;T> build()
            details
                h2.marker 팩터리 메서드
                ol
                    li static &lt;T> Stream.Builder&lt;T> builder()
                    li static &lt;T> Stream&lt;T> empty()
                    li static &lt;T> Stream&lt;T> of(T t)
                    li static &lt;T> Stream&lt;T> ofNullable(T t) Since 9
                    li @SafeVarargs static &lt;T> Stream&lt;T> of(T... values)
                    li static &lt;T> Stream&lt;T> iterate(T seed, UnaryOperator&lt;T> f)
                    li
                        | static &lt;T> Stream&lt;T> iterate(T seed, Predicate&lt;? super T> hasNext, UnaryOperator&lt;T> next) Since 9
                    li static &lt;T> Stream&lt;T> generate(Supplier&lt;? extends T> s)
                    li static &lt;T> Stream&lt;T> concat(Stream&lt;? extends T> a, Stream&lt;? extends T> b)
            details
                h2.marker 중간 연산
                ol
                    li Stream&lt;T> filter(Predicate&lt;? super T> predicate)
                    |             predicate이 true인 요소만 남긴다.
                    li &lt;R> Stream&lt;R> map(Function&lt;? super T, ? extends R> mapper)
                    |             mapper : 하나의 T 변수에서 하나의 R 변수로 대응하는 변환
                    br
                    |             mapper를 이용해 새로운 스트림을 반환한다.
                    li IntStream mapToInt(ToIntFunction&lt;? super T> mapper) + long, double
                    li &lt;R> Stream&lt;R> flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R>> mapper)
                    |             mapper : 하나의 T 변수에서 여러 R 변수(R 스트림)로 대응하는 변환.
                    br
                    |             mapper를 이용해 만들어진 여러 R 스트림을 일렬로 펴서(flattening) 하나의 R 스트림으로 변환. mapper가 null을 반환하면 빈 스트림을 대신 이용된다.
                    br
                    |             최종적으로 반환되는 스트림 외의 모든 중간 스트림은 닫힌다.
                    +w3button()&attributes({ class: 'btn-code', title: '/Repositories/Eclipse/JavaSE/src/util/FlatMapExample.java', lan: 'java'})
                    li
                        | IntStream flatMapToInt(Function&lt;? super T, ? extends IntStream> mapper ) + long, double
                    li Stream&lt;T> distinct()
                    |             Object.equals(Object)를 이용해 유일한 것들만으로 구성. stateful 중간 연산.
                    li Stream&lt;T> sorted()
                    |             자연스러운 방향으로 정렬. T가 Comparable하지 않으면 예외 발생할 수 있음. stateful 중간 연산.
                    li Stream&lt;T> sorted(Comparator&lt;? super T> comparator)
                    li Stream&lt;T> peek(Consumer&lt;? super T> action)
                    |             forEach와 유사한 기능을 하는 중간 연산. 다른 중간 연산 전후의 값을 살펴보는 디버깅 용도로 만들어짐.
                    li Stream&lt;T> limit(long maxSize)
                    |             스트림의 크기가 maxSize 이하가 되도록 한다. short-circuiting stateful 중간 연산.
                    li Stream&lt;T> skip(long n)
                    |             n개를 버린 나머지로 스트림을 구성해 반환한다. 더 없으면 빈 스트림이 반환된다.
                    li default Stream&lt;T> takeWhile(Predicate&lt;? super T> predicate) Since 9
                    |             요소들을 하나씩 검사하여, predicate을 만족하지 않는 요소가 나오기 전까지로 구성된 스트림을 반환한다. 순서 있는 스트림에 대하여는 조건을 만족하는 최장 길이 접두 요소들을 얻게 되며, 순서 없는 스트림은 조건을 만족하는 부분 집합을 얻게 된다. short-circuiting stateful 중간 연산.
                    br
                    |             일반적으로 연산이 저렴하지만, 순서 있는 병렬 스트림에 대하여는 최장 길이 접두 요소들을 찾기 위해 연산이 비싸지므로, 허용된다면 순서 없는 스트림 소스(generate(Supplier))를 이용하거나, BaseStream.unordered()를 이용해 순서를 없애는 것이 성능에 도움이 될 것이다.
                    li default Stream&lt;T> dropWhile(Predicate&lt;? super T> predicate) Since 9
                    |             stateful 중간 연산.
            details
                h2.marker 종결 연산
                ol
                    li void forEach(Consumer&lt;? super T> action)
                    li void forEachOrdered(Consumer&lt;? super T> action
                    |             순서 있는 스트림의 경우, 이를 이용하면 요소의 순서대로 소비자가 실행된다.
                    li Object[] toArray()
                    li &lt;A> A[] toArray(IntFunction&lt;A[]> generator)
                    |             generator : 배열 크기를 먹고 배열을 뱉는 함수. 예: A[]::new.
                    li T reduce(T identity, BinaryOperator&lt;T> accumulator)
                    |             하나의 T 변수로 축약하는 종결 연산. 아래와 동치다.
                    br
                    |             var result = identity;
                    br
                    |             for(T element : 스트림)
                    br
                    |             　　result = accumulator.apply(result, element);
                    br
                    |             return result;
                    li Optional&lt;T> reduce(BinaryOperator&lt;T> accumulator
                    |             하나의 T로 축약하는 종결 연산. 처음 연산 결과는 null이며, 스트림 첫 번째 요소를 만나면 치환된다. 이후는 reduce(T, BinaryOperator)와 같다.
                    li
                        | &lt;U> U reduce(U identity, BiFunction&lt;U, ? super T, U> accumulator, BinaryOperator&lt;U> combiner)
                    |             하나의 U 변수로 축약하는 종결 연산. 연산은 reduce(T, BinaryOperator)와 동일한데, identity 값은 combiner 연산에 대한 항등원이어야 한다. 다시 말해, 임의의 U 타입 변수 u에 대하여 u == combiner(identity, u)를 만족해야 한다.
                    br
                    |             이는 연산 과정에서 다음의 검사를 통해 검증된다. combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)
                    br
                    |             이렇게 복잡하게 하는 것보다는 map과 reduce를 쪼개 이용하는 것이 훨씬 간결하므로 유념.
                    li
                        | &lt;R> R collect(Supplier&lt;R> supplier, BiConsumer&lt;R, ? super T> accumulator, BiConsumer&lt;R, R> combiner)
                    |             하나의 R 변수로 축약하는 종결 연산. reduce와 다르게 R 자체가 결과값에 대한 가변적인 컨테이너(ArrayList, String 등)가 되어야 한다. 아래와 동치다.
                    br
                    |             여기서는 combiner를 사용하지 않는 것처럼 보이지만, combiner는 병렬 스트림 연산을 위해 존재하는 것이므로, 연산 결과 자체는 아래와 동치가 맞다.
                    br
                    |             var result = supplier.get();
                    br
                    |             for(T element : this stream)
                    br
                    |             　　accumulator.accept(result, element);
                    br
                    |             return result;
                    br
                    br
                    |             메서드 참조 예.
                    br
                    |             collect(ArrayList::new, ArrayList::add, ArrayList::addAll)
                    br
                    |             collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
                    li &lt;R, A> collect(Collector&lt;? super T, A, R> collector)
                    |             collect(Supplier, BiConsumer, BiConsumer)의 매개변수를 캡슐화한 Collector를 이용.
                    br
                    |             Collectors 유틸리티 클래스에 이미 정의된 Collector들이 있으니 편하게 이용 가능.
                    li Optional&lt;T> min(Comparator&lt;? super T> comparator) + max
                    li long count()
                    |             개수를 반환하는 종결 연산.
                    li boolean anyMatch(Predicate&lt;? super T> predicate) + allMatch, noneMatch
                    |             short-circuiting 종결 연산.
                    li Optional&lt;T> findFirst() + findAny
                    |             short-circuiting 종결 연산.
        hr
        details
            h2.marker final class StreamSupport Since 1.8
            ol
                li static &lt;T> Stream&lt;T> stream(Spliterator&lt;T> spliterator, boolean parallel)
                li
                    | static &lt;T> Stream&lt;T> stream(Supplier&lt;? extends Spliterator&lt;T>> supplier, int characteristics, boolean parallel)
                |         characteristics = supplier.get().characteristics()
                li
                    | static IntStream intStream(Spliterator.OfInt spliterator, boolean parallel) + long, double
                li
                    | static IntStream intStream(Supplier&lt;? extends Spliterator.OfInt> supplier, int characteristics, boolean parallel)
                |         characteristics = supplier.get().characteristics()
        hr
        details
            h2.marker interface Collector&lt;T, A, R> Since 1.8
            ol
                li
                    b static enum Collector.Characteristics
                |         CONCURRENT, IDENTITY_FINISH, UNORDERED
                li Supplier&lt;A> supplier()
                |         결과 컨테이너인 A를 생성하는 함수 반환.
                li BiConsumer&lt;A, T> accumulator()
                |         A의 결과에 T 타입 데이터를 축적하는 함수
                li BinaryOperator&lt;A> combiner()
                |         두 결과 컨테이너를 받아 하나로 반환하는 함수
                li Function&lt;A, R> finisher()
                |         결과 컨테이너로부터 최종 결과 R으로 변환하는 함수 반환
                li Set&lt;Collector.Characteristics> characteristics()
                li
                    | static &lt;T, A, R> Collector&lt;T, A, R> of(Supplier&lt;A> supplier, BiConsumer&lt;A, T> accumulator, BinaryOperator&lt;A> combiner, Function&lt;A, R> finisher, Collector.Characteristics... characteristics) + 1 오버로딩
        hr
        details
            h2.marker final class Collectors Since 1.8
            ol
                li
                    | static &lt;T, C extends Collection&lt;T>> Collector&lt;T, ?, C> toCollection(Supplier&lt;C> collectionFactory)
                |         collectionFactory로 생성한 Collection 객체에 원소들을 만나는 순서대로 집어넣는 Collector 반환.
                li static &lt;T> Collector&lt;T, ?, List&lt;T>> toList()
                |         새로운 List 객체에 입력 원소들을 모두 담아 반환하는 Collector. 반환된 List의 타입, 변경 가능 여부, 직렬화, 스레드-안전 그 무엇도 보장하지 않음.
                li static &lt;T> Collector&lt;T, ? Set&lt;T>> toSet()
                |         새로운 Set 객체에 입력 원소들을 모두 담아 반환하는 Collector. 반환된 Set의 타입, 변경 가능 여부, 직렬화, 스레드-안전 그 무엇도 보장하지 않음.
                li static &lt;T> Collector&lt;T, ?, List&lt;T>> toUnmodifiableList() Since 10
                li static &lt;T> Collector&lt;T, ?, Set&lt;T>> toUnmodifiableSet() Since 10
                li static Collector&lt;CharSequence, ?, String> joining() + 2 오버로딩
                |         String에 만나는 순서대로 덧붙이는 Collector.
                li
                    | static &lt;T, U, A, R> Collector&lt;T, ?, R> mapping(Function&lt;? super T, ? extends U> mapper, Collector&lt;? super U, A, R> downstream)
                |         U 타입 원소에 대한 Collector에 T 타입 원소를 mapper를 통해 U 타입으로 변환하여 받아들이는 Collector.
                li
                    | static &lt;T, U, A, R> Collector&lt;T, ?, R> flatMapping(Function&lt;? super T, ? extends Stream&lt;? extends U>> mapper, Collector&lt;? super U, A, R> downstream) Since 9
                |         Flat mapper는 입력 요소를 0개 이상의 요소를 담은 stream으로 만들어내며, downstream에 투입되면 해당 stream은 닫힌다.(null인 경우 빈 스트림을 대신 이용한다)
                li
                    | static &lt;T, A, R> Collector&lt;T, ?, R> filtering(Predicate&lt;? super T> predicate, Collector&lt;? super T, A, R> downstream) Since 9
                |         동일한 입력 타입 T 원소를 받아 predicate을 만족하면 downstream에 투입하는 Collector.
                li
                    | static &lt;T, A, R, RR> Collector&lt;T, A, RR> collectingAndThen(Collector&lt;T, A, R> downstream, Function&lt;R, RR> finisher)
                li static &lt;T> Collector&lt;T, ?, Long> counting()
                li static &lt;T> Collector&lt;T, ?, Optional&lt;T>> minBy(Comparator&lt;? super T> comparator)
                li static &lt;T> Collector&lt;T, ?, Optional&lt;T>> maxBy(Comparator&lt;? super T> comparator)
                li
                    | static &lt;T> Collector&lt;T, ?, Integer> summingInt(ToIntFunction&lt;? super T> mapper) + Long, Double
                li
                    | static &lt;T> Collector&lt;T, ?, Double> averagingInt(ToIntFunction&lt;? super T> mapper) + Long, Double
                li
                    | static &lt;T> Collector&lt;T, ?, Inth2.markerStatistics> summarizingInt(ToIntFunction&lt;? super T> mapper) + Long, Double
                li static &lt;T> Collector&lt;T, ? T> reducing(T identity, BInaryOperator&lt;T> op) + 2 오버로딩
                |         reducing 설명은 DoubleStream 참고
                li
                    | static &lt;T, K> Collector&lt;T, ?, Map&lt;K, List&lt;T>>> groupingBy(Function&lt;? super T, ? extends K> classifier) + 2 오버로딩
                li
                    | static &lt;T, K> Collector&lt;T, ?, ConcurrentMap&lt;K, List&lt;T>>> groupingByConcurrent(Function&lt;? super T, ? extends K> classifier) + 2 오버로딩
                li
                    | static &lt;T> Collector&lt;T, ?, Map&lt;Boolean, List&lt;T>>> partitioningBy(Predicate&lt;? super T> predicate) + 1 오버로딩
                li
                    | static &lt;T, K, U> Collector&lt;T, ?, Map&lt;K, U>> toMap(Function&lt;? super T, ? extends K> keyMapper, Function&lt;? super T, ? extends U> valueMapper) + 2 오버로딩
                li
                    | static &lt;T, K, U> Collector&lt;T, ?, Map&lt;K, U>> toUnmodifiableMap(Function&lt;? super T, ? extends K> keyMapper, Function&lt;? super T, ? extends U> valueMapper) Since 10 + 1 오버로딩
                li
                    | static &lt;T, K, U> Collector&lt;T, ?, ConcurrentMap&lt;K, U>> toConcurrentMap(Function&lt;? super T, ? extends K> keyMapper, Function&lt;? super T, ? extends U> valueMapper) + 2 오버로딩
        hr


    h1.marker java.util.zip Since 1.1
        details
            h2.marker interface Checksum Since 1.1
            ol
                li void update(int b)
                li default void update(byte[] b) Since 9
                li void update(byte[] b, int off, int len)
                li default void update(ByteBuffer buffer) Since 9
                li long getValue()
                li void reset()
            ol
                | 구현 클래스
                li class Adler32 implements Checksum Since 1.1
                li class CRC32 implements Checksum Since 1.1
                li class CRC32C implements Checksum Since 9
        hr
        details
            h2.marker class ZipInputStream extends InflaterInputStream Since 1.1
            ol
                li public ZipInputStream(InputStream in)
                li public ZipInputStream(InputStream in, Charset charset) Since 1.7
                li ZipEntry getNextEntry()
                li void closeEntry()
                |         현재 ZipEntry를 닫고 읽기 위치를 다음 entry로 이동.
                li int available()
                |         EOF를 만났으면 0, 아니면 1
        hr
        details
            h2.marker class ZipOutputStream extends DeflaterOutputStream Since 1.1
            ol
                li public ZipOutputStream(OutputStream out)
                li public ZipOutputStream(OutputStream out, Charset charset) Since 1.7
                li void setComment(String comment)
                li void setMethod(int method)
                |         ZipEntry에 설정되지 않은 경우 사용하는 압축 방법 : DEFLATED(압축, 기본값), STORED(비압축)
                li void setLevel(int level)
                |         압축 레벨 : 0(BEST_SPEED) ~ 9(BEST_COMPRESSION). 기본은 DEFAULT_COMPRESSION(-1)이며, 보통 6.
                li void putNextEntry(ZipEntry e)
                li void closeEntry()
                |         현재 ZipEntry를 닫고 다음 쓰기 위치로 이동. putNextEntry 메서드는 쓰기 전에 알아서 닫는다.
                li void finish()
                |         쓰기를 종료하고 스트림을 닫는다. 동일한 출력 스트림에 여러 필터를 적용한 경우에 사용.
        hr
        details
            h2.marker class ZipEntry implements Cloneable Since 1.1
            ol
                li public ZipEntry(String name)
                li public ZipEntry(ZipEntry e) : e로 필드를 채운다.
                li String getName()
                li void setTime(long time) + getter
                li void setTimeLocal(LocalDateTime time) Since 9 + getter
                li ZipEntry setLastModifiedTime(FileTime time) Since 1.8 + getter
                li ZipEntry setLastAccessTime(FileTime time) Since 1.8 + getter
                li ZipEntry setCreationTime(FileTime time) Since 1.8 + getter
                li void setSize(long size) : 비압축 크기 설정 + getter
                li void setCompressedSize(long csize) + getter
                li void setCrc(long crc) + getter
                li void setMethod(int method) + getter
                |         DEFLATED(압축), STORED(비압축), -1(미설정)
                li void setExtra(byte[] extra) + getter
                li void setComment(String comment) + getter
                li boolean isDirectory()
                |         이름이 "/"로 끝나면 디렉터리.
                li String toString()
                li int hashCode()
                li Object clone()
        hr
        details
            h2.marker class ZipFile implements Closeable Since 1.1
            ol
                li public ZipFile(String name) : UTF-8
                li public ZipFile(File file, int mode) Since 1.3 : UTF-8
                |         mode : OPEN_READ | OPEN_DELETE(파일이 close 호출 전까지 삭제됨, 내용은 객체를 통해 계속 접근 가능)
                li public ZipFile(File file) : UTF-8
                li public ZipFile(File file, int mode, Charset charset) SInce 1.7
                li public ZipFile(String name, Charset charset) Since 1.7
                li public ZipFile(File file, Charset charset) Since 1.7
                li String getComment() Since 1.7
                li ZipEntry getEntry(String name)
                li InputStream getInputStream(ZipEntry entry)
                |         ZipFile이 닫히면 이 메서드가 반환한 모든 스트림도 같이 닫힌다.
                li String getName()
                li Enumeration&lt;? extends ZipEntry> entries()
                li Stream&lt;? extends ZipEntry> stream() Since 1.8
                li int size() : entry 개수
        hr


    h1.marker javax.crypto Since 1.4
    | EMPTY

    h1.marker javax.net Since 1.4
        details
            h2.marker abstract class SocketFactory Since 1.4
            ol
                li static SocketFactory getDefault()
                li Socker createSocket(String host, int port) + 오버로딩
        hr
        details
            h2.marker abstract class ServerSocketFactory Since 1.4
            ol
                li static ServerSocketFactory getDefault()
                li ServerSocker createServerSocket(int port) + 오버로딩
        hr


    h1.marker javax.net.ssl Since 1.4
    | EMPTY
