include ../../source/skeleton.jade
+post('JPA', 'JPA, Java Persistence API, Hibernate, Spring Data JPA', 'JPA; Java Persistence API 정리')
    h1.marker JPA?
    div
        h2.marker 정의
        p
            strong Java Persistence API
            |  ::= Java ORM(Object-Relational Mapping)을 위한 명세
            br
            | → 객체지향 설계와 RDB의 설계를 둘 다 해치지 않으면서 둘 사이의 매핑을 지원 ─ 즉, 필요한 SQL을 자동으로 구성
            ul
                li SQL과 유사한, 객체를 이용한 JPQL(Java Persistence Query Language) 지원
                li 객체 상속 관계 사용 가능
                +asCode('java').
                    public class MMonster {
                        private Integer monsterId;
                        private String name;
                    }
                    public class MBossMonster extends MMonster {
                        private Integer baseMonsterId;
                    }
                li 객체 참조 관계 유지 가능
                +asCode('java').
                    public class MCharacterVoice {
                        private Integer characterId;
                        private MVoice voice;
                    }
                    public class MVoice {
                        private Integer voiceId;
                        private String message;
                    }
                +asCode('sql').
                    create table m_character_voice (
                        character_id int primary key,
                        voice_id int not null
                    );
                    create table m_voice (
                        voice_id int primary key,
                        message text
                    );

        h2.marker 사용
        p Hibernate와 같은 JPA 구현체(JPA Provider)를 이용하거나, 직접 구현하여 이용하면 된다
        div
            h3 EntityManager
            ul
                li &lt;T> T find(class&lt;T> entityClass, Object primaryKey)
                p 쿼리 즉시 실행. DB에 있으면 T 인스턴스, 없으면 null 리턴
                li &lt;T> T getReference(class&lt;T> entityClass, Object primaryKey)
                ul
                    li 쿼리 지연 실행. 우선 T 프록시를 반환. 프록시 최초 사용 시 쿼리 실행되며, DB에 없으면 EntityNotFoundException
                    li 사용하는 EntityManager를 닫기 전에 프록시를 사용해야 함
                    li Hibernate의 경우, final entity class에 대하여 쿼리 즉시 실행
                li void persist(Object entity)
                p DB에 저장
            h3 @Entity
            +asCode('java').
                @Entity
                public class MMonster {}
                @Entity(name = "m_monster_v2")
                public class MMonster {}
            ul
                li DB 입출력 단위
                li 기본 생성자 필수. @Id 최소 한 개 지정 필수
                li 원활한 프록시 동작을 위해 protected 이상, non-final 클래스로 정의
            h3 @Table
            p @Entity에 catalog, index, schema, UniqueConstraint 설정 추가
            h3 @Id
            p 필드 또는 getter 메서드에 대해 기본키 명시. 기본 타입 + Wrapper 타입, Date, BigInteger, BigDecimal 타입만 가능
            h3 @Temporal
            p date, time, timestamp 컬럼 명시. 각각 java.sql.Date, java.sql.Time, java.sql.Timestamp에 매핑
            h3 @Column
            ul
                | 필드 또는 getter 메서드에 대해 컬럼 정보 명시.
                li name : DB 컬럼 이름
                li unique : 이 컬럼만으로 unique key인 경우
                li length : 텍스트 길이
                li precision, scale : decimal 정밀도
                li insertable : insert 포함 여부
                li updatable : update 포함 여부
                +asCode('java').
                    @Entity(name = "jpa_user2")
                    public class User2 {
                        // ...
                        @Temporal(TemporalType.TIMESTAMP)
                        @Column(insertable = false, updatable = false)
                        private Date addDate;
                    }
            h3 @Transient 또는 transient 한정자
            p 해당 필드는 persistence 대상에서 제외
            h3 @Enumerated
            p enum 매핑 : EnumType.ORDINAL, STRING 2가지만 가능
            h3 @Convert, @Converter
            p 커스텀 컨버터 지정
            +asCode('java').
                @Entity
                @Data
                @NoArgsConstructor
                @AllArgsConstructor
                class ApiAccessLog {
                    private Long userId;
                    private String requestApi;
                    private String requestParam;
                    @Convert(converter = ApiResultCode.class)
                    private ApiResultCode apiResult;
                    @Temporal(TemporalType.TIMESTAMP)
                    private Date addDate;
                }

                interface EnumValue {
                    //@com.fasterxml.jackson.annotation.JsonValue
                    int getValue();
                }

                enum ApiResultCode implements EnumValue, AttributeConverter&lt;ApiResultCode, Integer> {
                    /** 정상 */
                    OK(200),
                    /** 입력 불량 */
                    BAD_REQUEST(400),
                    /** 알 수 없는 서버 에러 */
                    INTERNAL_ERROR(500),
                    ;


                    private final int value;
                    private static final Map&lt;Integer, ApiResultCode> MAP = null /* EnumUtil.asMap(OK) */;


                    //@com.fasterxml.jackson.annotation.JsonCreator
                    public static ApiResultCode valueOf(int value) {
                        return MAP.get(value);
                    }

                    private ApiResultCode(int value) {
                        this.value = value;
                    }

                    @Override
                    public int getValue() {
                        return value;
                    }

                    @Override
                    public Integer convertToDatabaseColumn(ApiResultCode attribute) {
                        return getValue();
                    }

                    @Override
                    public ApiResultCode convertToEntityAttribute(Integer dbData) {
                        return valueOf(dbData);
                    }

                }
            h3 @DynamicInsert, @DynamicUpdate
            p Non-null 컬럼만 insert, update 시 이용
            +asCode('java').
                @Entity(name = "jpa_user1")
                @DynamicInsert
                @DynamicUpdate
                public class User1 { }

    h1.marker Spring Data JPA
    p JPA에 대한 추상화된 모듈을 제공하여 보다 쉬운 사용을 가능하게 한다
