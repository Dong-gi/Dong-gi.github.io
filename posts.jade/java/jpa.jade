include ../../source/skeleton.jade
+post('JPA', 'JPA, Java Persistence API, Hibernate, Spring Data JPA', 'JPA; Java Persistence API 정리')
    h1.marker JPA?
    div
        h2.marker 정의
        p
            strong Java Persistence API
            |  ::= Java ORM(Object-Relational Mapping)을 위한 명세
            br
            | → 객체지향 설계와 RDB의 설계를 둘 다 해치지 않으면서 둘 사이의 매핑을 지원 ─ 즉, 필요한 SQL을 자동으로 구성
            ul
                li SQL과 유사한, 객체를 이용한 JPQL(Java Persistence Query Language) 지원
                li 객체 상속 관계 사용 가능
                +asCode('java').
                    public class MMonster {
                        private Integer monsterId;
                        private String name;
                    }
                    public class MBossMonster extends MMonster {
                        private Integer baseMonsterId;
                    }
                li 객체 참조 관계 유지 가능
                +asCode('java').
                    public class MCharacterVoice {
                        private Integer characterId;
                        private MVoice voice;
                    }
                    public class MVoice {
                        private Integer voiceId;
                        private String message;
                    }
                +asCode('sql').
                    create table m_character_voice (
                        character_id int primary key,
                        voice_id int not null
                    );
                    create table m_voice (
                        voice_id int primary key,
                        message text
                    );

        h2.marker JPA 사용
        p Hibernate와 같은 JPA 구현체(JPA Provider)를 이용하거나, 직접 구현하여 이용하면 된다
        
        h2.marker Spring Data JPA
        p JPA에 대한 추상화된 모듈을 제공하여 보다 쉬운 사용을 가능하게 한다

    h1.marker JPA 사용 정리
    div
        h2.marker 예시 코드
        table
            +ths('설명', '링크')
            tr
                td 전체 프로젝트
                td: +asA('https://github.com/Dong-gi/Dong-gi.github.io/tree/master/Repositories/STS/jpa-example')
            tr
                td 예시 코드 1 - 기본 CRUD
                td
                    +codeBtn('/Repositories/STS/jpa-example/src/main/resources/ddl/jpa_user.sql', 'sql', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/entity/User1.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/entity/User2.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/dao/User1Dao.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/dao/User2Dao.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/test/java/io/github/donggi/jpa/dao/UserDaoTests.java', 'java', null, true)
            tr
                td 예시 코드 2 - Embed 매핑
                td
                    +codeBtn('/Repositories/STS/jpa-example/src/main/resources/ddl/jpa_item.sql', 'sql', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/entity/Price.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/entity/Item1.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/entity/Item2.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/entity/PricePair.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/entity/Item3.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/dao/Item1Dao.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/dao/Item2Dao.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/main/java/io/github/donggi/jpa/dao/Item3Dao.java', 'java', null, true)
                    +codeBtn('/Repositories/STS/jpa-example/src/test/java/io/github/donggi/jpa/dao/ItemDaoTests.java', 'java', null, true)
        h2.marker EntityManager
        ul
            li &lt;T> T find(class&lt;T> entityClass, Object primaryKey)
            p 쿼리 즉시 실행. DB에 있으면 T 인스턴스, 없으면 null 리턴
            li &lt;T> T getReference(class&lt;T> entityClass, Object primaryKey)
            ul
                li 쿼리 지연 실행. 우선 T 프록시를 반환. 프록시 최초 사용 시 쿼리 실행되며, DB에 없으면 EntityNotFoundException
                li 사용하는 EntityManager를 닫기 전에 프록시를 사용해야 함
                li Hibernate의 경우, final entity class에 대하여 쿼리 즉시 실행
            li void persist(Object entity)
            p DB에 저장
            li void remove(Object entity)
            p DB에서 삭제
            li 엔티티 수정
            p 트랜잭션(@Transactional 포함) 안에서 엔티티 수정 시 트랜잭션 커밋 시점에 자동 반영
        h2.marker @Entity
        ul
            li DB 입출력 단위
            li 기본 생성자 필수. @Id 최소 한 개 지정 필수
            li 원활한 프록시 동작을 위해 protected 이상, non-final 클래스로 정의
        +asCode('java').
            @Entity
            public class MMonster {}
            @Entity(name = "m_monster_v2")
            public class MMonster {}
        h2.marker @Table
        p @Entity에 catalog, index, schema, UniqueConstraint 설정 추가
        h2.marker @Id
        p 필드 또는 getter 메서드에 대해 기본키 명시. 기본 타입 + Wrapper 타입, Date, BigInteger, BigDecimal 타입만(should) 가능
        h2.marker @GeneratedValue, @SequenceGenerator, @TableGenerator
        ul
            | 기본키 자동 설정 명시. insert 실행 후 실제 값이 설정된다.
            +asCode('java').
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long userId;
            li strategy = GenerationType.IDENTITY : DB 설정(MySQL auto_increment, PostgreSQL serial) 그대로 이용
            li generator = "gen_name" : 시퀀스 또는 ID 생성 테이블 이용
            +asCode('java', '시퀀스').
                @Id
                @SequenceGenerator(name = "gen_name", sequenceName = "jpa_user2_user_id_seq", allocationSize = 1)
                @GeneratedValue(generator = "gen_name")
                private Long userId;
            +asCode('java', '테이블').
                @Id
                @TableGenerator(
                    name = "gen_name",
                    table = "jpa_id",                    // ID 생성 테이블
                    pkColumnName = "id_name",            // 테이블 기본키
                    pkColumnValue = "jpa_user2_user_id", // 기준 행을 찾기 위한 기본키 값
                    valueColumnName = "next_id",         // id로 사용할 컬럼 이름
                    initialValue = 0,                    // 테이블에 행이 없는 경우 초기값으로 이용
                    allocationSize = 1
                )
                @GeneratedValue(generator = "gen_name")
                private Long userId;
        h2.marker @Temporal
        p date, time, timestamp 컬럼 명시. 각각 java.sql.Date, java.sql.Time, java.sql.Timestamp에 매핑
        h2.marker @Column
        ul
            | 필드 또는 getter 메서드에 대해 컬럼 정보 명시.
            li name : DB 컬럼 이름
            li unique : 이 컬럼만으로 unique key인 경우
            li length : 텍스트 길이
            li precision, scale : decimal 정밀도
            li insertable : insert 포함 여부
            li updatable : update 포함 여부
            +asCode('java').
                @Temporal(TemporalType.TIMESTAMP)
                @Column(insertable = false, updatable = false)
                    // ↑ false면 쿼리 실행 후 컬럼 값이 변경되도 객체에 반영되지 않음
                private Date addDate;
        h2.marker @Transient 또는 transient 한정자
        p 해당 필드는 persistence 대상에서 제외
        h2.marker @Enumerated
        p enum 매핑 : EnumType.ORDINAL, STRING 2가지만 가능
        h2.marker @Convert, @Converter
        p 커스텀 컨버터 지정
        +asCode('java').
            @Entity
            @Data
            @NoArgsConstructor
            @AllArgsConstructor
            class ApiAccessLog {
                private Long userId;
                private String requestApi;
                private String requestParam;
                @Convert(converter = ApiResultCode.class)
                private ApiResultCode apiResult;
                @Temporal(TemporalType.TIMESTAMP)
                private Date addDate;
            }

            interface EnumValue {
                //@com.fasterxml.jackson.annotation.JsonValue
                int getValue();
            }

            enum ApiResultCode implements EnumValue, AttributeConverter&lt;ApiResultCode, Integer> {
                /** 정상 */
                OK(200),
                /** 입력 불량 */
                BAD_REQUEST(400),
                /** 알 수 없는 서버 에러 */
                INTERNAL_ERROR(500),
                ;


                private final int value;
                private static final Map&lt;Integer, ApiResultCode> MAP = null /* EnumUtil.asMap(OK) */;


                //@com.fasterxml.jackson.annotation.JsonCreator
                public static ApiResultCode valueOf(int value) {
                    return MAP.get(value);
                }

                private ApiResultCode(int value) {
                    this.value = value;
                }

                @Override
                public int getValue() {
                    return value;
                }

                @Override
                public Integer convertToDatabaseColumn(ApiResultCode attribute) {
                    return getValue();
                }

                @Override
                public ApiResultCode convertToEntityAttribute(Integer dbData) {
                    return valueOf(dbData);
                }

            }
        h2.marker @DynamicInsert, @DynamicUpdate
        ul
            li Non-null 컬럼만 insert, update 시 이용.
            li 세션 당 최초 1번만 적용된다.
            li 쿼리 실행 후 생략된 컬럼 값이 변경되더라도, 객체에 설정되지 않는다.
        +asCode('java').
            @Entity(name = "jpa_user1")
            @DynamicInsert
            @DynamicUpdate
            @Data
            @NoArgsConstructor
            @AllArgsConstructor
            public class User1 {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long userId;
                private String nickname;
                @Temporal(TemporalType.TIMESTAMP)
                private Date addDate;
                @Temporal(TemporalType.TIMESTAMP)
                private Date updDate;
            }

            @Test
            void createUser1() {
                var user = new User1();
                user.setNickname("At" + System.nanoTime());
                user = user1Dao.save(user);
                assertTrue(user.getUserId() != null);   // ← 설정됨
                assertTrue(user.getAddDate() == null);  // ← 설정되지 않음
            }
        h2.marker @Embeddable, @Embedded, @AttributeOverride
        ul
            li 엔티티 필드 일부를 하나의 @Embeddable value 클래스로 묶을 수 있다.
            p Value class : 여타 ValueType과 마찬가지로 값을 이용해 비교하며, 자기 자신을 변경하지 않는다(getter만 제공).
            li @Embeddable 클래스의 필드 일부도 다른 @Embeddable 클래스로 묶을 수 있다.
            li @AttributeOverride를 이용해 동일 @Embeddable 클래스를 여러 개 이용하는 경우에 대처할 수 있다