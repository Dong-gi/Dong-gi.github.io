include ../../source/skeleton.jade
+post('Java 시작하기', 'Java', 'Java 정리')
    h1.marker 개발 환경
    ol
        li JDK 설치
        p
            | 2019년 1월부로 오라클 JDK SE 버전이 전면 유료화되므로, OpenJDK를 설치한다.
            +asA('http://openjdk.java.net/install/')
        li 환경변수 설정
        ul
            li JAVA_HOME, JRE_HOME 예시 » C:\Program Files\Java\jdk-10.0.2
            li Path » %JAVA_HOME%\bin

        li IDE 설치
        p Eclipse, IntelliJ Community 등 취향에 맞게 설치한다.

        h2.marker Eclipse 환경 설정 : Window » Preferences
        ul
            li 폰트 설정
            p General - Appearance - Colors and Fonts : Basic - Text Font 및 기타 폰트를 시력에 맞게 설정
            li 포매터 설정
            p General - Editors - Text Editors : Insert spaces for tabs 체크, Show line numbers 체크
            p Java → Code Style → Formatter → New → Indentation → Tab Policy = Space Only
            p 기존 파일에 Formatter 적용하고자 하는 경우 : 적용할 소스 or 프로젝트 우클릭 → Source → Format
            li 인코딩 설정
            p General - Workspace : Text file encoding을 UTF-8로 설정
            p Web - CSS Files, HTML Files, JSP Files : Encoding을 UTF-8로 설정
            li JDK 설정
            p Java - Installed JREs : jre가 아닌 jdk로 설정

    h1.marker 이클립스 HelloWorld 프로젝트
    ol
        li 프로젝트 생성
        p
            | "File" 메뉴 클릭, 또는 "Package Explorer"에서 우클릭 - New - Java Project.
            br
            | 없으면 New - Other... - Java - Java Project를 선택
            br
            +w3img('/imgs/20180826_213734.png')
        li Main 클래스 생성
        p
            | "Package Explorer"의 해당 프로젝트에서 우클릭 - New - Class
            br
            +w3img('/imgs/20180826_214148.png')
            br
            | Name에는 "HelloWorld"(공백 없음에 유의)를 적고, public static void main(String[] args)를 체크
        li 실행
        p
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/HelloWorld.java', 'java')
            |  와 같이 코드를 작성하고 Run.
            br
            | 콘솔 결과창이 보이지 않는다면 Window - Show View - Console 선택

    h1.marker 개발 과정
    ol
        | "»" 우측은 산출물.
        li 코딩 » .java 소스 코드
        li 컴파일 by 컴파일러 » .class 바이트 코드 = 중간 언어
        p javac.exe가 담당. javap.exe는 그 반대(역어셈블러).
        li 해석 by JVM 인터프리터 » 기계어
        p
            | java.exe가 담당.
            br
            | JIT(Just-In-Time) : 한 번 해석한 바이트 코드를 다시 해석하지 않고, 이전에 해석된 기계어를 가져다 이용.
        li 실행 by CPU
        li 참고
        p
            | javadoc.exe : 주석 html 문서 생성
            br
            | jar.exe : Java ARchive. 프로그램 실행에 관련된 파일들을 .jar파일로 압축

    h1.marker 주석
    ol
        li 주석(Comment)은 프로그래머를 위한 것으로, 컴파일러는 무시하는 문장들이다.
        li // : '//'부터 줄의 끝까지 무시한다.
        li
            | /* */ : '/*'와 '*/' 사이의 모든 텍스트를 무시한다.
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/Comment.java', 'java')

    h1.marker 식별자
    ul
        li 식별자(Identifier)는 의미 있는 코드에 붙이는 이름을 의미한다. 의미 있는 코드에는 변수(Variable), 상수(Constant), 메서드, 클래스 등이 있다.
        li 자바 식별자는 '_', '$'의 사용을 허용한다. 단, '_' 단독으로는 사용할 수 없다.
        li
            | 식별자 관례 : 상수는 SNAKE_CASE, 상수를 제외한 식별자는 camelCase 이용. 클래스는 CamelCase.
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/Identifier.java', 'java')

    h1.marker 자료형, 연산
    ul
        li 자료형은 메모리 상에서 값이 표현되는 형식을 정의한다.
        li 기본 자료형(Base Type; Primitive Type)
        p
            | 참조 자료형이 아닌 자바의 8가지 기본 자료형은 메모리 상에 값이 그대로 존재한다. boolean, char, byte, short, int, long, float, double
            br
            | 식별자 없이 값 자체를 나타내는 코드를 리터럴(Literal)이라 부른다. 각 자료형의 리터럴과 적용되는 연산은 아래의 예시 코드 참고.
            br
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/TypeExample.java', 'java', '[5, 25]') boolean
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/TypeExample.java', 'java', '[38, 43]') char
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/TypeExample.java', 'java', '[45, 86]') number
        li 참조 자료형(Reference Type)
        p
            | 메모리의 주소를 통해 값에 접근한다. C/C++의 포인터와 같지만, 자바는 포인터 연산을 지원하지는 않는다.
            br
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/TypeExample.java', 'java', '[27, 36]') 문자열
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/TypeExample.java', 'java', '[88, 100]') 배열
        li 변수 할당
        p 기본 자료형 변수는 정적 할당, 참조 자료형 변수는 동적 할당된다. 동적 할당된 객체들은 자동으로 GC 대상이 된다.
        ul
            li 정적 할당
            p
                | 컴파일러가 메모리 점유를 정확하게 예측할 수 있는 (지역)변수를 생성하는 방법으로, 선언과 동시에 스택 영역에 할당되어 코드 블록이 끝나는 순간 해제된다.
                br
                | 클로저 Closure : 동적 할당되어 유지되는 객체 안에 정적 할당되는 변수를 선언하여 정적 변수의 소멸 시기를 스코프 밖으로 지연시키는 것.
            li 동적 할당
            p 동적으로 할당되는 객체들은 힙 영역에 생성되며, 그 참조가 유지되는 한 프로그램 종료시까지 유지된다.
        li 형변환 Type Casting
        ul
            li 묵시적 형변환
            p 자식 타입 변수는 부모 타입 변수에 그냥 할당 가능. 산술 연산시에도 자동으로 이루어진다.
            li 명시적 형변환 - (clazz)
            p 부모 타입 변수를 자식 타입 변수에 할당하는 경우, (clazz) 명시 필요. 경우에 따라 경고가 표시된다.
            li Checked Casting
            p 경고 없이 명시적으로 형변환하는 것. clazz.cast(object)를 이용한다.

    h1.marker 구문
    p if, for, while, do-while, switch, try-catch, try-with-resource
    ul
        li switch 조건식에 정수(char 포함), String, Enum이 허용된다.
        li 반복문에 label을 설정해 중첩된 루프들 중 어느 것이든 break/continue시킬 수 있다.
        li Iterable하면 향상된 for 구문을 이용할 수 있다.
        +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/Syntax.java', 'java', '[6, 35]') switch
        +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/Syntax.java', 'java', '[37, 41]') labeled 반복문
        +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/Syntax.java', 'java', '[43, 46]') enhanced for
        +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/TryWithResources.java', 'java') try-with-resource

    h1.marker Varargs
    ul
        li 가변 길이 매개변수 선언 : Type... 배열명
        p
            | 나열된 매개변수들이 하나의 배열로 넘겨지며, 배열 자체를 넘길 수 있다.
            +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/VarArgs.java', 'java')

    h1.marker 제한자(Modifier)
    ol
        li 접근 제한자 : 부모의 것보다 접근 범위를 넓힐 수는 있지만, 축소할 수는 없다.
        ul
            li private : 해당 클래스 내부에서만 접근 가능
            li 생략(default) : 같은 패키지 내부에서만 접근 가능
            li protected : 같은 패키지 or 하위 클래스에서만 접근 가능
            li public : 어디서든지 접근 가능
        li 그 외
        ul
            li static : 클래스 로드시 하나만 생성. 클래스 이름을 통해 접근.
            li final : 재정의 불가, 상속 불가, 수정 불가; 메서드의 매개변수도 final일 수 있다.
            li abstract : 인스턴스화 불가(클래스, 인터페이스). body를 가질 수 없음(메서드). 추상 클래스만 추상 메서드를 정의할 수 있다.
            li native : JNI로 구현한 메서드.
            li transient : 직렬화 제외
            li synchronized : LOCK 객체에 동기화
            li volatile : 값을 CPU 캐시를 사용하지 않고 메인 메모리에 직접 읽고/쓴다. 컴파일러에 의해 volatile 변수가 이용되는 문장의 실행 순서가 재배치되지 않는다; 해당 문장 전/후의 문장들은 실제로 전/후에 실행됨이 보장된다. 변수에 대한 쓰기 작업이 항상 한 스레드에서만 이루어진다면, synchronized 대신 동기화를 위해 이용할 수 있다.
        li 요소별 접근 제한자 목록 : java.lang.reflect.Modifier
        ul
            li Outer Class : abstract, final, public, default
            li Inner Class : abstract, final, private, protected, public, static, default
            li Outer Interface : abstract, public, default
            li Inner Interface : abstract, private, protected, public, static, default
            li Constructor : private, protected, public, default
            li Method : All
            li Variable : final, private, protected, public, static, default

    h1.marker JUnit
    p
        | 단위 테스트에 사용되는 라이브러리
        +codeBtn('/Repositories/Eclipse/Basic/src/io/github/donggi/JUnitExample.java', 'java')
