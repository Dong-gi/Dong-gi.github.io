html
    body
        script(src='/source/redirect.js?200226_1657')
        hr
        details
            summary JavaEE
            ol
                li Java Enterprise Edition은 동적 웹 애플리케이션 개발을 위한 자바 플랫폼이다.
                |         JavaSE와 다른 문서 페이지를 참조해야 한다.
                a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://javaee.github.io/javaee-spec/javadocs/') https://javaee.github.io/javaee-spec/javadocs/
                li WAR(Web Application Archive) : JavaEE 웹 애플리케이션을 위한 압축 파일
                pre.
                    \n웹 애플리케이션 루트
                    ㄴ META-INF
                            ㄴ MANIFEST.MF
                            ㄴ 컨테이너 지원
                    ㄴ WEB-INF : 웹에서 접근 불가
                            ㄴ classes
                                    ㄴ META-INF
                                            ㄴ 애플리케이션 자원
                                    ㄴ 자바 .class 파일 및 자원
                            ㄴ i88n
                                    ㄴ 국제화 파일
                            ㄴ lib
                                    ㄴ 번들 jar 파일
                            ㄴ tags
                                    ㄴ JSP 태그 파일
                            ㄴ tld
                                    ㄴ JSP 태그 라이브러리 설명자
                    ㄴ 기타 웹에서 접근 가능한 파일
                li 서블릿
                |         자바로 구현된 CGI(Common Gateway Interface; 웹 서버와 프로그램 사이의 통신 규약).
                |         JCP(Java Community Process)에서 제정한 Servlet Specification을 따라야 한다.
                li 서블릿 컨테이너
                |         서블릿의 생애를 관리하는 프로그램(예. 톰캣)
                li JSP
                |         전용 태그 "&lt;% %>"를 이용해 HTML 문서에 자바 코드를 삽입.
                |         컨테이너가 알아서 컴파일 하며, 서블릿 클래스와 달리 수정사항이 있어도 다시 빌드할 필요가 없다.
        hr
        details
            summary 개발환경
            ol
                li
                    a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='http://openjdk.java.net/install/') OpenJDK
                    |  설치
                li
                    a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://tomcat.apache.org/') 톰캣
                    |  설치
                |         + posts/tip/tomcat.html 참고
                li IDE(이클립스, STS 등) 설치
                li 이클립스에 톰캣 추가
                |         Windows » Preferences » Server » Runtime Environments » Add » Apache
                li 이클립스 프로젝트에 톰캣 구성 추가
                |         프로젝트 Server 속성에 추가.
                li IntelliJ에 톰캣 추가
                |         Settings » Application Servers » + » 톰캣 홈 디렉터리 추가
                li IntelliJ 프로젝트에 톰캣 구성 추가
                |         도구 모음에서 Run/Debug Configurations 아이콘(아래방향 화살표)을 누른 다음 Edit Configurations 클릭
                br
                |         옵션. 대화상자가 열리면 + 버튼 클릭 후 Tomcat Server를 Local로 추가.
                br
                |         옵션. 배포할 아티팩트를 선택하지 않았다는 경고가 표시되면 Deployment 탭을 누르고 "Deploy atthe server setup" 머리글 아래의 + 버튼 클릭. Artifact를 누르고
                |         확장된 war 파일 아티팩트를 누른 다음 OK. 배포를 위한 "Application context"이름을 서버를 기준으로 한 상대 주소로 변경(예. /my-app)
        hr
        details
            summary Hello World 프로젝트
            details
                summary 이클립스 Dynamic Web Project
                ol
                    li New Project » Web » Dynamic Web Project » Target runtime에 톰캣 설정
                    img.w3-round(src='imgs/20180929_220300.png')
                    li 코드 작성
                    img.w3-round(src='imgs/20180929_220301.png')
                    br
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/servlet/Hello1.java', lan='java') Hello1.java »
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/webapp/WEB-INF/web.xml', lan='xml') web.xml »
                    br
                    |             web.xml은 배포 설명자로, 서블릿 및 서블릿 매핑, 필터 등을 정의한다.
                    |             이클립스 프로젝트 생성 마법사로 web.xml을 생성하면 자동으로 welcome-file-list를 구성해주는데, welcome-file-list에 정의된 welcome-file을 순서대로 찾아 기본 페이지로 보여준다.
                    li 실행
                    img.w3-round(src='imgs/20180929_220302.png')
                    br
                    |             또는 Export » WAR file를 선택하여 webapps 디렉터리에 추가하여 배치되기를 기다린 뒤 브라우저에서 실행.
                    li 이클립스 내부에서 실행하는 경우 웹 애플리케이션 배포 위치
                    |             %이클립스 프로젝트 디렉터리%\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\Web01\WEB-INF
            details
                summary 톰캣에 직접 배치
                ol
                    li 위와 동일하게 HelloWorld.java 작성
                    li 컴파일
                    ul
                        li 톰캣 lib를 클래스패스로 넘기는 경우
                        |                 javac -encoding UTF-8 -cp "C:\apache-tomcat-8.0.52\lib\servlet-api.jar" HelloWorld.java
                        li JDK의 jre/lib/ext에 servlet-api.jar를 붙여넣은 경우
                        |                 javac -encoding UTF-8 HelloWorld.java
                    li 컴파일된 클래스 파일을 webapps/"웹모듈명"/WEB-INF/classes/"패키지 경로"/ 에 저장
                    li 동일한 배포 설명자 web.xml을 WEB-INF에 작성하고 실행
            details
                summary 이클립스 Maven 프로젝트
                ol
                    li New Project » Maven » Maven Project » maven-archetype-webapp
                    img.w3-round(src='imgs/20180930_154849.png')
                    br
                    |             webapp 아티팩트로 프로젝트를 만들면 Hello World를 출력하는 index.jsp가 생성된다.
                    li Maven Install, 빌드하여 war 파일이 생성되면 톰캣 webapps 디렉터리에 붙여넣고 배치되기를 기다린 뒤 브라우저에서 실행
                    |             maven이 pom.xml에 정의된 라이브러리를 /users/유저이름/.m2 폴더에 다운로드한다.
        hr
        details
            summary 서블릿 생애 주기
            ol
                li 서블릿 컨테이너에 의해 최초로 로드되어 인스턴스 생성
                li init()
                li 각 요청마다 service() 호출
                li
                    | destroy()
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/servlet/LifeCycle.java', lan='java') 예시 코드 »
        hr
        details
            summary web.xml 대신 애너테이션으로 서블릿 기술하기
            ol
                li WebServlet 애너테이션으로 배포설명자 web.xml 대신 간결하게 서블릿을 기술할 수 있다.
                button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/servlet/Hello2.java', lan='java') value 예시 »
                button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/servlet/Hello3.java', lan='java') initParams 예시 »
                li name : 배포설명자의 servlet-name에 해당.
                li urlPatterns : 배포설명자의 url-pattern들의 배열에 해당.
                li
                    | value : urlPatterns 요소와 동일하게 동작하기 때문에, 서블릿 매핑만을 기술할 거라면 편하게 WebServlet("/hello")처럼 기술할 수 있다.
                li initParams : 배포설명자의 init-param들의 배열에 해당.
                |         GenericServlet#getInitParameter로 참조할 수 있으며, 이 메서드는 ServletConfig#getInitParameter를 호출한다. ServletConfig는 getServletConfig 메서드로 참조할 수 있다.
                li loadOnStartup : 컨테이너가 애플리케이션을 시작할 때, 클라이언트의 요청이 없어도 자동으로 초기화를 진행한다.
                |         Non-negative 정수로 설정하며, 0에 가까울수록 우선 초기화
                button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/servlet/Hello5.java', lan='java') loadOnStartup 예시 »
        hr
        details
            summary JDBC 예시
            ol
                li 드라이버 설치
                |         톰캣 lib(C:\apache-tomcat-8.0.52\lib)에 복사
                br
                |         또는, 웹 애플리케이션 lib(프로젝트 경로\WebContent\WEB-INF\lib)에 복사
                br
                |         또는, 프로젝트에서 직접 포함
                li 사용하기 전에 드라이버 클래스 로드
                |         로드할 JDBC 클래스 이름은 다운로드 받은 압축파일의 html 문서에 있음
                li
                    | 사용하기
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/servlet/Hello4.java', lan='java') JDBC Test »
                ul
                    li url : JDBC 연결 문자열로, 옵션은 각 JDBC마다 제공하는 것이 다르다
                    li https://commons.apache.org/proper/commons-dbcp/guide/index.html
                    li BasicDataSource.initialSize : 최초 커넥션 수
                    |             + maxActive, maxIdle, minIdle
                    li BasicDataSource.maxWait : 풀에 커넥션이 없을 때 대기하는 최대 시간(ms). 음수면 무기한
                    li BasicDataSource.minEvictableIdleTimeMillis : 설정된 것 이상 비활성 상태인 커넥션은 정리될 수 있다
                    |             + timeBetweenEvictionRunsMillis, numTestsPerEvictionRun
                    li BasicDataSource.testOnBorrow : 커넥션을 가져올 때, 유효한 지 검사할 지 여부
                    |             + testOnReturn, testWhileIdle
                li Context.xml 리소스로 DataSource 정의하기
                button.btn-code(path='Repositories/Eclipse/app1/src/main/webapp/META-INF/context.xml', lan='xml') context.xml »
                button.btn-code(path='Repositories/Eclipse/app1/src/main/webapp/WEB-INF/web.xml', lan='xml') web.xml » resource-ref
                button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/servlet/Hello6.java', lan='java') 서블릿 »
                li 트랜잭션
                ul
                    li 관련 클래스
                    |             AbstractPlatformTransactionManager ← DataSourceTransactionManager(JDBC), HibernateTransactionManager, JtaTransactionManager
                    li 예시 코드
                    button.btn-code(path='Repositories/Eclipse/spring-transaction/pom.xml', lan='xml') pom.xml »
                    button.btn-code(path='Repositories/Eclipse/spring-transaction/src/main/resources/applicationContext.xml', lan='xml') applicationContext.xml »
                    button.btn-code(path='Repositories/Eclipse/spring-transaction/src/main/java/io/github/donggi/service/NameService.java', lan='java') NameService.java »
                    button.btn-code(path='Repositories/Eclipse/spring-transaction/src/test/java/Test.java', lan='java') Test.java »
        hr
        details
            summary 다른 페이지로 이동/호출
            ol
                li 다른 페이지로 이동
                ul
                    li Refresh : 응답 페이지를 보여준 뒤 클라이언트가 나중에 다시 요청하도록 한다.
                    li Redirect : 응답 페이지 없이 바로 다른 url을 요청하도록 한다.
                    |             따라서 redirect의 경우에는 getWriter()를 이용하지 말아야 한다.
                li 다른 페이지 호출
                ul
                    li Forward
                    |             호출된 페이지로 제어를 넘기기 때문에 해당 페이지가 종료되도 제어가 되돌아오지 않는다.
                    |             따라서 forward를 호출하는 측은 getWriter()를 이용하지 말아야 한다.
                    |             + 때문에 호출자 자신과 동일한 페이지/서블릿을 호출할 수 있다.
                    br
                    |             forward는 서버 내에서 요청/응답 객체를 넘겨주므로 별도의 인코딩 없이 텍스트나 다른 객체를 추가하여 넘겨줄 수 있다.
                    li Include
                    |             Forward와 달리 호출된 페이지가 종료되면 제어가 돌아온다.
                    |             + 때문에 호출자와 동일한 페이지/서블릿을 호출할 수 없다.
                    br
                    |             호출된 페이지와 호출한 페이지 사이의 출력 HTML 코드 조각 순서를 맞추기 위해 flush()를 적절히 호출해줘야 한다.
                li
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/servlet/CallOther.java', lan='java') 예시 코드 »
                    br
        hr
        details
            summary 필터 Filter
            ol
                li 웹 브라우저가 웹 컴포넌트를 호출하면, 필터가 사전작업을 수행하고 웹 컴포넌트를 호출.
                li 필터 체인 : 하나의 페이지에 대해 여러 필터가 정의된 경우, 정의된 순서대로 필터가 호출된다.
                li
                    | 배포 설명자에 명시 :
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/webapp/WEB-INF/web.xml', lan='xml') web.xml »
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/filter/DoNothing.java', lan='java') 예시 코드 »
                li
                    | 애너테이션으로 명시 :
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/filter/DoNothing2.java', lan='java') 예시 코드 »
        hr
        details
            summary 래퍼 Wrapper
            ol
                li Http 요청/응답을 감싸는 사용자 정의 객체
                li 각각 HttpServletRequestWrapper, HttpServletResponseWrapper를 상속하면 된다.
                button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/request/RequestWrapper.java', lan='java') MyRequestWrapper.java »
                button.btn-code(path='Repositories/Eclipse/app1/src/main/java/io/github/donggi/response/ResponseWrapper.java', lan='java') MyResponseWrapper.java »
        hr
        details
            summary JSP
            ol
                li JSP 파일은 클라이언트 요청으로 필요해지면 HttpJspPage 인터페이스를 구현한 서블릿 클래스로 컴파일되고, 해당 서블릿이 요청을 처리한다
                li JSP 파일의 본문은 HttpJspPage#_jspService 메서드의 본문이 된다.
                li HttpJspPage → JspPage → Servlet
                |         JspPage 인터페이스는 jspInit(), jspDestroy()를 정의한다
                li
                    | JSP 태그
                    button.btn-code(path='Repositories/Eclipse/app1/src/main/webapp/jsp/Hello.jsp', lan='xml') Hello.jsp »
                ul
                    li &lt;%@ %> : 지시자; Directive : page, taglib, include 3종류가 있다
                    li
                        | &lt;% %> : Scriptlet : 일반 자바 코드를 작성하면 된다. _jspService 메서드 안의 코드로, 매개변수를 포함한 아래의 변수들을 참조할 수 있다.
                    img.w3-round(src='imgs/20190912_191500.png')
                    li &lt;%! %> : 선언문; Declaration : 서블릿 클래스의 멤버 정의
                    li &lt;%= %> : Expression : out#print 또는 out#write에 들어갈 값을 반환하는 문장을 작성하면 된다
        hr
        details
            summary 데이터 저장소
            ol
                li ServletContext
                |         애플리케이션 수준 공유 데이터. GenericServlet#getServletContext로 참조할 수 있다. JSP에서는 application 변수.
                br
                |         initParams : 앱 초기화 매개변수. 모든 서블릿이 ServletContext#getInitParameter로 참조할 수 있다.
                details
                    summary web.xml 예시
                    |             &lt;context-param>
                    br
                    |             　　&lt;param-name>name&lt;/param-name>
                    br
                    |             　　&lt;param-value>Context Param&lt;/param-value>
                    br
                    |             &lt;/context-param>
                li ServletConfig
                |         서블릿 수준 공유 데이터. GenericServlet#getServletConfig로 참조할 수 있다. JSP에서는 config 변수.
                br
                |         initParams : 서블릿 초기화 매개변수. 서블릿 내에서 GenericServlet#getInitParameter로 참조할 수 있다.
                li 당연하지만, 서블릿 static 멤버도 서블릿 수준 공유 가능
                li HttpSession
                |         세션 수준 공유 데이터. HttpServletRequest#getSession으로 참조할 수 있다. JSP에서는 session 변수
                li ServletRequest
                |         (클라이언트 요청 처리) 스레드 수준 공유 데이터. 서블릿마다 자동으로 공유되지는 않으며, 직접 전달해야 한다
                li 각 클라이언트의 요청이 별개의 스레드에서 실행되므로, ThreadLocal이 유용할 수 있다
                li JspContext
                |         _jspService()에서 자동 선언하는 pageContext 지역변수(). JSP 실행하는 동안 유효.
        hr
        details
            summary javax.servlet 이벤트 리스너
            ol
                li
                    | 이벤트 리스너 구현 클래스는 배포 설명자에 서술되거나, @WebListener를 표기하거나, ServletContext#addListener로 등록돼야 한다
                |         @WebListener 표기 가능 리스너 : ServletContextListener, ServletContextAttributeListener, ServletRequestListener, ServletRequestAttributeListener, HttpSessionListener, HttpSessionAttributeListener, HttpSessionIdListener
                br
                |         ServletContext#addListener 등록 가능 리스너 : ServletContextAttributeListener, ServletRequestListener, ServletRequestAttributeListener, HttpSessionAttributeListener, HttpSessionIdListener, HttpSessionListener. ServletContext 인스턴스가 ServletContainerInitializer#onStartup()으로 설정됐다면 ServletContextListener도 등록 가능
                li interface ServletContextListener extends EventListener Since Servlet 2.3
                |         default void contextInitialized(ServletContextEvent sce) : 웹 앱 초기화 이벤트
                br
                |         default void contextDestroyed(ServletContextEvent sce) : ServletContext 종료 이벤트
                li
                    | interface ServletContextAttributeListener extends EventListener Since Servlet 2.3
                |         default void attributeAdded(ServletContextAttributeEvent event) + attributeRemoved, attributeReplaced : ServletContext 속성 추가/제거/변경 이벤트
                li interface ServletRequestListener extends EventListener Since Servlet 2.4
                |         default void requestInitialized(ServletRequestEvent sre) : 요청이 웹앱 스코프에 진입하면 발생
                br
                |         default void requestDestroyed(ServletRequestEvent sre) : 요청이 웹앱 스코프를 벗어나면 발생
                li
                    | interface ServletRequestAttributeListener extends EventListener Since Servlet 2.4
                |         default void attributeAdded(ServletRequestAttributeEvent srae) + attributeRemoved, attributeReplaced : ServletRequest 속성 추가/제거/변경 이벤트
                li interface HttpSessionListener extends EventListener Since Servlet 2.3
                |         default void sessionCreated(HttpSessionEvent se) : 세션 생성 이벤트
                br
                |         default void sessionDestroyed(HttpSessionEvent se) : 세션 폐기 이벤트
                li interface HttpSessionAttributeListener extends EventListener Since Servlet 2.3
                |         default void attributeAdded(HttpSessionBindingEvent event) + attributeRemoved, attributeReplaced : 세션 속성 추가/제거/변경 이벤트
                li interface HttpSessionIdListener extends EventListener Since Servlet 3.1
                |         void sessionIdChanged(HttpSessionEvent event, String oldSessionId) : 세션 ID 변경 이벤트
                li interface HttpSessionBindingListener extends EventListener
                |         default void valueBound(HttpSessionBindingEvent event) : 이 인터페이스를 구현한 클래스의 인스턴스가 세션의 setAttribute()로 추가되면 호출된다
                br
                |         default void valueUnbound(HttpSessionBindingEvent event) : 이 인터페이스를 구현한 클래스의 인스턴스가 세션의 removeAttribute()로 제거된 경우, invalidate()로 세션이 만료된 경우, 시간 초과로 세션이 만료된 경우 호출된다.
                li interface ReadListener extends EventListener Since Servlet 3.1
                |         ServerRequest#getInputStream → ServerInputStream#setReadListener
                br
                |         void onDataAvailable() : HTTP 요청 데이터 읽기가 가능해지는 시점에 한 번 호출된다
                br
                |         void onAllDataRead() : 블로킹 없이 모든 요청 데이터를 읽을 수 있을 때 호출된다
                br
                |         void onError(Throwable t) : 요청 처리에 예외가 발생한 경우 호출된다
                li interface WriteListener extends EventListener Since Servlet 3.1
                |         ServerResponse#getOutputStream → ServerOutputStream#setWriteListener
                br
                |         void onWritePossible() : 응답 쓰기가 가능해지는 시점에 한 번 호출된다
                br
                |         void onError(Throwable t) : non-blocking 쓰기 중 발생한 예외를 처리한다
                li interface AsyncListener extends EventListener Since Servlet 3.0
                |         ServletRequest#startAsync → AsyncContext#addListener
                br
                |         void onComplete(AsyncEvent event) : 비동기 작업이 완료되었을 때 호출한다
                br
                |         void onTimeout(AsyncEvent event) : 비동기 작업이 시간초과된 경우 호출한다
                br
                |         void onError(AsyncEvent event) : 비동기 작업 중 예외가 발생했을 때 호출한다
                br
                |         void onStartAsync(AsyncEvent event) : 비동기 작업 시작시 호출한다
        hr
        details
            summary MyBatis
            details
                summary mybatis-config.xml
                ol
                    li
                        | DTD : &lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
                    li
                        | ELEMENT configuration (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)
                    li properties 예 : &lt;properties url="mybatis.properties"/>
                    |             resource : 파일이 클래스 패스에 있는 경우. url : 다른 경로에 있는 경우
                    li settings
                    |             로깅 : &lt;setting name="logImpl" value=""/> // value : SLF4J, LOG4J, LOG4J2, JDK_LOGGING, COMMONS_LOGGING, STDOUT_LOGGING, NO_LOGGING, Qualified class path
                    li typeAliases : SQL 매퍼 파일의 매개변수/리턴 타입의 별명을 지정
                    |             built-in 별명 : _int(int), int(java.lang.Integer), date(java.util.Date) 등
                    li environments : 실행 환경(environment) 정의.
                    |             environment » transactionManager » type 속성 : JDBC(MyBatis에서 트랜잭션 관리), MANAGED(서버나 서블릿 컨테이너에서 트랜잭션 관리)
                    br
                    |             environment » dataSource » type 속성 : UNPOOLED(매 요청마다 새 커넥션 생성), POOLED(커넥션 풀링), JNDI(서버나 서블릿 컨테이너의 데이터 소스 사용)
                    br
                    |             type="JNDI" 예 : &lt;property name="data_source" value="jdbc/MySQL/localhost/test"
                    li mappers : 각 매퍼(mapper) 파일 정의
                    |             resource : 파일이 클래스 패스에 있는 경우. url : 다른 경로에 있는 경우
            details
                summary mapper.xml
                |         &lt;if test="condition">sql&lt;/if>
                |         &lt;choose> &lt;when test="condition">sql&lt;/when> &lt;otherwise>sql&lt;/otherwise>
                |         &lt;where> &lt;if test="condition">sql&lt;/when> &lt;/where>
                |         &lt;set> &lt;if test="condition">sql&lt;/if> &lt;/set>
                |         &lt;foreach item="item" index...
        hr
        details
            summary Spring IoC Container
            ul
                li 자바 빈 자동 생성을 지원한다
                ul
                    li ClassPathXmlApplicationContext : 클래스 패스 상의 빈 구성 파일로 빈 생성
                    li FileSystemXmlApplicationContext : 파일 시스템 상의 빈 구성 파일로 빈 생성
                    li WebApplicationContext : web.xml 빈 구성으로 빈 생성
                li 빈 Scope
                ul
                    li singleton : 하나만 생성. 기본
                    li prototype : getBean() 호출 시마다 생성
                    li request : HTTP 요청마다 생성. WebApplicationContext에서만 설정 가능
                    li session : HTTP 세션마다 생성. WebApplicationContext에서만 설정 가능
                |         singleton 빈이 prototype 빈을 참조할 때, 기본적으로는 최초 설정된 prototype 빈 인스턴스만 이용한다. aop:scoped-proxy를 이용하면 singleton 빈이 호출할 때마다 prototype 빈을 다시 생성할 수 있다.
                button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello15.java', lan='java') Hello15 빈 클래스
                button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello16.java', lan='java') Hello16 빈 클래스
                button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans21.xml', lan='xml') 빈 구성 파일
                button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello15Test.java', lan='java') 빈 사용 클래스
                li
                    | 빈 생성 + 세터 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello1.java', lan='java') Hello1 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans1.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello1Test.java', lan='java') 빈 사용 클래스
                li
                    | p(property) xmlns를 이용한 세터 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello1.java', lan='java') Hello1 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans5.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello1Test2.java', lan='java') 빈 사용 클래스
                li
                    | 빈 초기화/소멸 로직 InitializingBean, DisposableBean 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello2.java', lan='java') Hello2 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans2.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello2Test.java', lan='java') 빈 사용 클래스
                li
                    | 빈 초기화/소멸 로직 init/destroy-method 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello3.java', lan='java') Hello3 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans3.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello3Test.java', lan='java') 빈 사용 클래스
                li
                    | 익명 빈 + 생성자 주입 + 초기화 전/후 로직 BeanPostProcessor 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello4.java', lan='java') Hello4 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans4.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello4Test.java', lan='java') 빈 사용 클래스
                li
                    | c(constructor) xmlns를 이용한 생성자 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello4.java', lan='java') Hello4 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans6.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello4Test2.java', lan='java') 빈 사용 클래스
                li
                    | 의존 객체 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello1.java', lan='java') Hello1 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello4.java', lan='java') Hello4 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans7.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello4Test3.java', lan='java') 빈 사용 클래스
                li
                    | 의존 컬렉션 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello5.java', lan='java') Hello5 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans8.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello5Test.java', lan='java') 빈 사용 클래스
                li
                    | util xmlns를 이용한 의존 컬렉션 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello5.java', lan='java') Hello5 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans9.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello5Test2.java', lan='java') 빈 사용 클래스
                li
                    | 팩터리 설정을 통한 의존 컬렉션 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello5.java', lan='java') Hello5 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans10.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello5Test3.java', lan='java') 빈 사용 클래스
                li
                    | parent 속성을 통한 상속 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello1.java', lan='java') Hello1 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans11.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello1Test3.java', lan='java') 빈 사용 클래스
                li lookup-method 태그를 통한 상속 예
                ul
                    li lookup-method name : 재정의할 메서드 이름 → private X, void 반환 X, 메서드 매개변수 X, final X
                    li lookup-method bean : 재정의한 메서드에서 반환할 객체
                button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans19.xml', lan='xml') 빈 구성 파일
                button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Beans19Test.java', lan='java') 빈 사용 클래스
                li
                    | autowire 속성을 통한 생성자 자동 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello4.java', lan='java') Hello4 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans12.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello4Test4.java', lan='java') 빈 사용 클래스
                li
                    | @Autowired를 이용한 세터 자동 주입 예 1
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello6.java', lan='java') Hello6 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans13.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello6Test.java', lan='java') 빈 사용 클래스
                li
                    | @Autowired를 이용한 세터 자동 주입 예 2
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello6.java', lan='java') Hello6 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans14.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello6Test2.java', lan='java') 빈 사용 클래스
                li
                    | @Autowired(required = false)를 이용한 선택적 세터 자동 주입 예
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello6.java', lan='java') Hello6 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello7.java', lan='java') Hello7 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans15.xml', lan='xml') Hello6 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans16.xml', lan='xml') Hello7 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello6Test3.java', lan='java') 빈 사용 클래스
                li
                    | @Autowired + @Qualifier = @Resource
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello8.java', lan='java') Hello8 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello9.java', lan='java') Hello9 빈 클래스
                    button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans17.xml', lan='xml') 빈 구성 파일
                    button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello8Test.java', lan='java') 빈 사용 클래스
                li 빈 자동 등록
                ul
                    li @Component : 빈 생성 대상 클래스
                    li @Repository : DAO. 퍼시스턴스 클래스
                    li @Service : 서비스 클래스
                    li @Controller : 컨트롤러 클래스
                    li 스코프 설정을 해주고 싶다면 @Scope를 추가로 이용
                    li aop:scoped-proxy 설정을 해주고 싶다면 @Scope의 proxyMode 변수를 설정
                    |             DEFAULT == NO : 프록시 없음, INTERFACES : 인터페이스 프록시 생성. JDK 동적 프록시 이용, TARGET_CLASS : 클래스 프록시 생성. CGLIB 이용
                    br
                    |             context:component-scan 태그의 scoped-proxy 속성을 변경하면 DEFAULT 동작을 변경할 수 있다
                    li context:include-filter, context:exclude-filter로 포함할/하지 않을 클래스를 구체적으로 명시할 수 있다
                    |             type 속성 : annotation - 클래스 애너테이션 필터링, assignable - 할당 가능한 타입 필터링, regex - 정규표현식 필터링, aspectj - AspectJ 표현식 필터링
                button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello10.java', lan='java') Hello10 빈 클래스
                button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello11.java', lan='java') Hello11 빈 클래스
                button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello12.java', lan='java') Hello12 빈 클래스
                button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello13.java', lan='java') Hello13 빈 클래스
                button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello14.java', lan='java') Hello14 빈 클래스
                button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans18.xml', lan='xml') 빈 구성 파일
                button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/Hello10Test.java', lan='java') 빈 사용 클래스
                li JavaConfig 예
                ul
                    li
                        | @Configuration 사용 예
                        button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello1.java', lan='java') Hello1 빈 클래스
                        button.btn-code(path='Repositories/Eclipse/app2/src/main/java/io/github/donggi/bean/Hello6.java', lan='java') Hello6 빈 클래스
                        button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/ConfigTest1.java', lan='java') JavaConfig 클래스
                    li
                        | xml에서 @Configuration 임포트 예
                        button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans22.xml', lan='xml') 빈 구성 파일
                        button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/ConfigTest2.java', lan='java') JavaConfig 클래스
                    li
                        | @Configuration에서 xml 임포트 예
                        button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/ConfigTest3.java', lan='java') JavaConfig 클래스
                    li
                        | @Configuration에서 @Configuration 임포트 예
                        button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/ConfigTest4.java', lan='java') JavaConfig 클래스
                    li
                        | xml에서 @Configuration 자동 생성 예
                        button.btn-code(path='Repositories/Eclipse/app2/src/main/resource/Beans23.xml', lan='xml') 빈 구성 파일
                        button.btn-code(path='Repositories/Eclipse/app2/src/test/java/io/github/donggi/bean/ConfigTest5.java', lan='java') JavaConfig 클래스
        hr
        details
            summary Spring AOP
            details
                summary AOP 개념
                ol
                    li Aspect : 횡단 관심사. 로깅/보안 등, 여러 객체를 가로질러 공통적으로 사용되는 모듈/기능
                    li Join Point : Aspect 실행 지점
                    li Advice : Join Point에서 실행되는 코드
                    li
                        | Pointcut : 일치하는 Join Point에 대한
                        a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://www.eclipse.org/aspectj/doc/next/progguide/semantics-pointcuts.html') 정규 표현식
                        | .
                    |             Advice는 Pointcut과 연관되며, 일치하는 모든 Join Point에서 실행된다.
                    li Weaving : Advice 코드를 삽입
                    |             세 가지 Weaving 방식 : 컴파일 타임 위빙, 클래스 로드 타임 위빙, 런타임 위빙
            details
                summary Spring AOP
                ul
                    li 스프링은 인터페이스의 프록시를 만들어 Aspect의 실행을 삽입한다
                    |             따라서 final이거나, 인터페이스에 정의되지 않은 메서드는 Aspect 삽입이 불가능하다
                details
                    summary 지원하는 Advice 종류
                    table
                        thead
                            tr
                                th 종류
                                th aop 태그
                                th 적용 시점
                        tbody
                            tr
                                td Before
                                td aop:before
                                td 메서드 실행 전
                            tr
                                td After Returning
                                td aop:after-returning
                                td 메서드 정상 종료 후
                            tr
                                td After Throwing
                                td aop:after-throwing
                                td 메서드 예외 throw시 적용
                            tr
                                td After
                                td aop:after
                                td after-returning + after-throwing
                            tr
                                td Around
                                td aop:around
                                td before + after
                details
                    summary 각 Advice별 예시 코드
                    ul
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/advice/BeforeAdvice.java', lan='java') Before Advice 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans2.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/BeforeAdviceTest.java', lan='java') 테스트 클래스
                        |                 Before Advice에서 예외를 던지면 실제 메서드는 호출되지 않는 효과가 있다.
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/advice/AfterAdvice.java', lan='java') After Returning Advice 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans3.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/AfterAdviceTest.java', lan='java') 테스트 클래스
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/advice/AfterAdvice2.java', lan='java') After Throwing Advice 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans4.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/AfterAdviceTest2.java', lan='java') 테스트 클래스
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/advice/AfterAdvice3.java', lan='java') After Advice 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans5.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/AfterAdviceTest3.java', lan='java') 테스트 클래스
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/advice/AfterAdvice2.java', lan='java') Around Advice 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans1.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/TimerAdviceTest.java', lan='java') 테스트 클래스
                details
                    summary @Aspect를 이용한 위빙
                    ul
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/aspect/BeforeAspect.java', lan='java') Before Aspect 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans7.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/BeforeAdviceTest2.java', lan='java') 테스트 클래스
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/aspect/AfterAspect.java', lan='java') After Returning Aspect 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans8.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/AfterAdviceTest4.java', lan='java') 테스트 클래스
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/aspect/AfterAspect2.java', lan='java') After Throwing Aspect 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans9.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/AfterAdviceTest5.java', lan='java') 테스트 클래스
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/aspect/AfterAspect3.java', lan='java') After Aspect 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans10.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/AfterAdviceTest6.java', lan='java') 테스트 클래스
                        li
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/aspect/AroundAspect.java', lan='java') Around Aspect 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans6.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/TimerAdviceTest2.java', lan='java') 테스트 클래스
                details
                    summary JoinPoint#getArgs 대신 Pointcut 정의로 매개변수 직접 받기
                    ul
                        li
                            | xml 설정
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/advice/BeforeAdvice2.java', lan='java') Before Advice 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans11.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/BeforeAdviceTest3.java', lan='java') 테스트 클래스
                        li
                            | 애너테이션 설정
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/main/java/io/github/donggi/aspect/BeforeAspect2.java', lan='java') Before Aspect 클래스
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/resources/beans/Beans12.xml', lan='xml') 빈 구성 파일
                            button.btn-code(path='Repositories/Eclipse/spring-aop/src/test/java/io/github/donggi/advice/BeforeAdviceTest4.java', lan='java') 테스트 클래스
                details
                    summary AspectJ Pointcut 표기법
                    ol
                        li execution : 특정 메서드에 대해 호출 시점 정의
                        |                 [접근한정자]? [리턴_타입_패턴] [클래스_이름_패턴]?[메서드_이름_패턴]([매개변수_패턴])
                        br
                        |                 execution(* set*(..)) : 모든 세터 메서드 호출
                        li within : 특정 타입에 대해 호출 시점 정의
                        |                 within(io.github.donggi.service.PrintService) : 해당 인터페이스의 모든 메서드 호출
                        br
                        |                 within(io.github.donggi.service.*) : 해당 패키지의 모든 메서드 호출
                        li bean : 특정 빈에 대해 호출 시점 정의
                        li * ::= 각 패턴에 대해 모든 값을 허용함을 의미
                        li .. ::= 0개 이상 반복에 대응함을 의미
                        li && ::= 패턴 AND
                        li || ::= 패턴 OR
                ul
                    li Aspect 적용 순서 정의
                    |             @Order(xml에서는 order 속성)를 적용하거나 Ordered 인터페이스 구현
        hr
        details
            summary Spring MVC
            ol
                li DispatcherServlet : 클라이언트 요청을 받아 컨트롤러에 처리를 넘긴다.
                |         각 DispatcherServlet은 하나의 WebApplicationContext를 갖는다
                button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/web.xml', lan='xml') WEB-INF/web.xml
                br
                |         기본적으로 {서블릿_이름}-servlet.xml 설정을 읽어온다
                button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/dispatcher-servlet.xml', lan='xml') WEB-INF/dispatcher-servlet.xml
                br
                |         설정 파일을 직접 지정하려면 DispatcherServlet의 "contextConfigLocation" init-param을 지정하면 된다. 각 경로들은 ',', ' ', '\n' 등으로 구분하면 된다. 클래스패스에 있는 파일은 classpath:conf.xml처럼 지정하면 된다
                br
                |         여러 DispatcherServlet을 이용하면서도 두 WebApplicationContext이 공통적으로 가져야 하는 빈이 있다면 ContextLoaderListener를 설정하면 된다
                button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/applicationContext.xml', lan='xml') WEB-INF/applicationContext.xml
                li HandlerMapping : 클라이언트의 요청 URL을 어떤 컨트롤러가 처리할 지 결정한다.
                ul
                    li 요청 URL의 매핑을 항상 전체 경로로만 하려는 경우
                    |             스프링 설정에서 아래 2개의 기본 구현체의 alwaysUseFullPath 설정을 변경
                    br
                    |             &lt;bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" p:alwaysUseFullPath="true" />
                    br
                    |             &lt;bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" p:alwaysUseFullPath="true" />
                    li
                        | RESTful URI
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/HelloController.java', lan='java') 예시
            details
                summary @RequestMapping 사용 시 가능한 파라미터 타입
                ol
                    li
                        | 서블릿 API 관련 : (Http)ServletRequest, (Http)ServletResponse, HttpSession
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/HelloController.java', lan='java') 예시
                    li 요청 Locale : java.util.Locale
                    li 요청/응답 직접 액세스 : InputStream, Reader, OutputStream, Writer
                    li URI 템플릿 변수 : @PathVariable
                    li HTTP 요청 파라미터 : @RequestParam
                    li HTTP 요청 헤더 : @RequestHeader
                    li HTTP 쿠키 : @CookieValue
                    li HTTP 요청 : @RequestBody
                    li 뷰에 전달할 모델 : Map, Model, ModelMap
                    li
                        | POJO : 각 POJO 클래스
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/LoginController.java', lan='java') 예시1
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/view/login.jsp', lan='xml') login.jsp
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/BulkLoginController.java', lan='java') 예시2
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/view/bulkLogin.jsp', lan='xml') bulkLogin.jsp
                    li Multipart 폼 데이터 예시
                    |             CommonsMultipartResolver 이용(commons-fileupload 패키지 의존)
                    button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/dispatcher-servlet.xml', lan='xml') WEB-INF/dispatcher-servlet.xml
                    button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/view/upload.jsp', lan='xml') upload.jsp
                    button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/FileController.java', lan='java') FileController
                    li POJO로의 바인딩 결과 : Errors, BindingResult
                    button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/LoginController.java', lan='java') @Valid, @InitBinder 예시
                    button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/validator/LoginRequestValidator.java', lan='java') Validator 예시
                    li SessionStatus
            ol
                li
                    | Controller : 클라이언트의 요청을 처리한 뒤 결과를 DispatcherServlet에 넘긴다.
                    button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/HelloController.java', lan='java') 예시
            details
                summary 컨트롤러 메서드의 반환 타입
                ol
                    li ModelAndView : 뷰 정보 + 모델 정보
                    li Model, Map : 모델 정보. 뷰 이름은 요청 URL로부터 결정(RequestToViewNameTranslator)된다.
                    li String : 뷰 이름
                    li View : 뷰 인스턴스(org.springframework.web.servlet.View)
                    li
                        | void : 메서드가 (Http)ServletRequest를 매개변수로 받는다면 직접 응답을 처리한다고 가정한다. 그 외의 경우, 뷰 이름은 요청 URL로부터 결정.
                    li
                        | 메서드에 @ResponseBody가 적용된 경우 반환 객체를 HTTP 응답으로(HttpMessageConverter) 전송한다.
                        | AJAX에 유용.
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/EtcController.java', lan='java') 예시
                    li 뷰 이름을 통한 리다이렉트 : "redirect:" 접두어 활용. 상대 경로, 절대 경로 모두 가능
            ol
                li ModelAndView : 컨트롤러의 처리 결과와 뷰 생성에 필요한 정보
                li ViewResolver : 생성할 뷰를 결정한다.
                li View : 컨트롤러의 처리 결과를 클라이언트에 보낼 형태로 생성한다
                li 예외 처리
                ul
                    li
                        | 기본 예외 페이지 설정 :
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/web.xml', lan='xml') WEB-INF/web.xml
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/view/error.jsp', lan='xml') error.jsp
                    li
                        | 컨트롤러 내부 @ExceptionHandler 메서드 선언 :
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/HelloController.java', lan='java') 예시
                    li
                        | 컨트롤러 HandlerExceptionResolver 인터페이스 구현 :
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/controller/FileController.java', lan='java') 예시
                    li
                        | SimpleMappingExceptionResolver로 전체 컨트롤러 특정 예외를 특정 뷰로 연결 :
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/webapp/WEB-INF/dispatcher-servlet.xml', lan='xml') WEB-INF/dispatcher-servlet.xml
                    li
                        | @ControllerAdvice를 이요한 특정 패키지/클래스/인터페이스 예외 처리 :
                        button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/advice/UnhandledExceptionAdvice.java', lan='java') 예시
                li
                    | 사용자 정의 PropertyEditor
                    button.btn-code(path='Repositories/Eclipse/spring-mvc/src/main/java/io/github/donggi/advice/InitAdvice.java', lan='java') 예시
        hr
        details
            summary Spring JUnit
            button.btn-code(path='Repositories/Eclipse/spring-transaction/src/test/java/Test.java', lan='java') 예시 코드 1 »
            button.btn-code(path='Repositories/Eclipse/spring-mvc/src/test/java/Test.java', lan='java') 예시 코드 2 »
        hr
        details
            summary Spring Boot
            details
                summary Spring Boot Web Microservice
                ol
                    li 예시 코드
                    button.btn-code(path='Repositories/STS/rest-microservice/pom.xml', lan='xml') pom.xml
                    button.btn-code(path='Repositories/STS/rest-microservice/src/main/java/io/github/donggi/controller/HelloController.java', lan='java') HelloController.java
                    button.btn-code(path='Repositories/STS/rest-microservice/src/test/java/io/github/donggi/controller/HelloControllerTest.java', lan='java') HelloControllerTest.java
                    li 스프링 부트 마이크로서비스는 실행에 필요한 모든 의존 라이브러리, HTTP 리스너 등을 하나의 jar로 패키징한다
                    img.w3-round(src='imgs/20191006_180335.png')
                    img.w3-round(src='imgs/20191006_180348.png')
                    img.w3-round(src='imgs/20191006_180401.png')
                    li
                        | mvn install하면 bootJar가 빌드된다
                        br
                        |                 java -jar target/rest-microservice-0.0.1-SNAPSHOT.jar
            details
                summary Gradle 프로젝트 빌드 및 실행
                ol
                    li bootRun 실행
                    |             gradle app-name:bootRun -Pprofile=dev
                    li bootJar 빌드
                    |             gradle app-name:bootJar -x test
                    li bootJar 실행
                    |             java -jar -Dspring.profiles.active=dev app-name.jar
                    li 디버그 포트 열기
                    |             -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=55555,suspend=n
                    br
                    |             suspend=y로 하는 경우, 디버그 연결까지 실행을 대기한다, 허용 서브넷 명시 : address=*:55555, address=0.0.0.0:55555
            details(open='')
                summary application.properties 서버 포트 지정
                |         server.port=18080
                br
                |         tomcatPort=18009
                br
                |         tomcatRedirectPort=18443
            details
                summary Spring Boot Reactive Web Microservice
                ol
                    li 예시 코드
                    button.btn-code(path='Repositories/STS/reactive-webflux/pom.xml', lan='xml') pom.xml
                    button.btn-code(path='Repositories/STS/reactive-webflux/src/main/java/io/github/donggi/controller/HelloController.java', lan='java') HelloController.java
                    button.btn-code(path='Repositories/STS/reactive-webflux/src/test/java/io/github/donggi/controller/HelloControllerTest.java', lan='java') HelloControllerTest.java
                    img.w3-round(src='imgs/20191008_110029.png')
                    li 리액티브 스트림 : java.util.concurrent.Flow
                    ul
                        li Publisher : 발행자. subscribe​(Subscriber)
                        li
                            | Subscriber : 구독자. onSubscribe(Subscription), onNext(T), onError(Throwable), onComplete(Void)
                        li Subscription : 구독. request(long), cancel(Void)
                        li Processor extends Subscriber, Publisher : 발행자 + 구독자
                    li 리액터의 발행자 Processor
                    ul
                        li reactor.core.publisher.Mono : 0 또는 1개의 이벤트 발행
                        li reactor.core.publisher.Flux : 0 또는 n개의 이벤트 발행
            details
                summary CORS 허용
                ol
                    li 컨트롤러 클래스 또는 메서드에 @CrossOrigin 설정
                    li WebMvcConfigurer 빈의 addCorsMappings(CorsRegistry)를 재정의하여 앱 전체 설정 변경
            details
                summary Spring Config Server
                ol
                    li Config Server 선택
                    img.w3-round(src='imgs/20191009_095724.png')
                    li 예시 코드
                    button.btn-code(path='Repositories/STS/config-server/src/main/resources/bootstrap.properties', lan='text') bootstrap.properties
                    button.btn-code(path='Repositories/STS/config-server/src/main/java/io/github/donggi/ConfigServerApplication.java', lan='java') @EnableConfigServer
                    button.btn-code(path='Repositories/Config/webapp.properties', lan='text') webapp.properties
                    br
                    li 접근 예
                    |             http://localhost:28888/webapp/default
                    br
                    |             http://localhost:28888/webapp/default/master/test.xml
                    ul
                        li /{application}/{profile}[/{label}]
                        li /{application}-{profile}.yml
                        li /{label}/{application}-{profile}.yml
                        li /{application}-{profile}.properties
                        li /{label}/{application}-{profile}.properties
                        img.w3-round(src='imgs/20191009_115402.png')
                    li 갱신 : http://localhost:28888/actuator/refresh
            details
                summary Spring Config Client
                ol
                    li Config Client, Actuator 선택
                    img.w3-round(src='imgs/20191009_124833.png')
                    li 예시 코드
                    button.btn-code(path='Repositories/Config/config-client.properties', lan='text') config-client.properties
                    button.btn-code(path='Repositories/STS/config-client/src/main/resources/bootstrap.properties', lan='text') bootstrap.properties
                    button.btn-code(path='Repositories/STS/config-client/src/main/java/io/github/donggi/controller/HelloController.java', lan='java') HelloController.java
                    li 접근 예 http://localhost:18888/hello
                    img.w3-round(src='imgs/20191009_122755.png')
                    li 갱신 : POST http://localhost:18888/actuator/refresh
                    |             http://localhost:18888/actuator/에 접속했을 때 /refresh가 보이지 않는다면 management.security.enabled=false, management.endpoints.web.exposure.include=* 2개 설정 확인
                    img.w3-round(src='imgs/20191009_124710.png')
                    img.w3-round(src='imgs/20191009_124647.png')
            ol
                li @Async
                |         메서드를 스프링이 관리하는 ThreadExecutor에서 비동기적으로 실행하는 프록시를 생성한다.
                button.btn-code(path='Repositories/STS/web-app/src/main/java/io/github/donggi/WebAppApplication.java', lan='java') @EnableAsync »
                button.btn-code(path='Repositories/STS/web-app/src/main/java/io/github/donggi/controller/SleepController.java', lan='java') @Async »
                li @Scheduled
                |         메서드를 명시적으로 호출하지 않아도 스케쥴대로 실행된다.
                button.btn-code(path='Repositories/STS/web-app/src/main/java/io/github/donggi/WebAppApplication.java', lan='java') @EnableScheduling »
                button.btn-code(path='Repositories/STS/web-app/src/main/java/io/github/donggi/controller/HelloController.java', lan='java') @Scheduled »
        hr
        details
            summary WebSocket
            ul
                li HTTP/1.1 업그레이드 기능을 이용해 기존 HTTP/HTTPS를 웹 소켓 연결 WS/WSS로 그대로 전환
                |         사용하던 80/443포트 그대로 연결하므로 방화벽의 차단에도 안전. 프록시 서버가 HTTP 업그레이드를 처리하지 않는다면 WSS를 이용.
                li 웹소켓 API Since JavaEE 7
                ul
                    li javax.websocket : 클라이언트/서버 공통 기능
                    ul
                        li WebSocketContainer
                        |                 웹소켓 클라이언트 기능. connectToServer()
                        li ContainerProvider
                        |                 웹소켓 클라이언트 인스턴스 획득을 위한 getWebSocketContainer()
                        li @interface ClientEndpoint
                        |                 POJO가 클라이언트측 웹소켓임을 나타낸다. 해당 클래스는 메서드는 @OnOpen, @OnClose, @OnError, @OnMessage 애너테이트될 수 있다
                        li @interface OnOpen + OnClose
                        |                 선택적 Session 매개변수, 선택적 EndpointConfig 매개변수, 0 ~ n개 @PathParam String 매개변수를 가질 수 있다
                        li @interface OnError
                        |                 선택적 Session 매개변수, Throwable 매개변수, 0 ~ n개 @PathParam String 매개변수를 가질 수 있다
                        li @interface OnMessage
                        |                 선택적 Session 매개변수, 0 ~ n개 @PathParam String 매개변수, 아래 중 하나의 메시지 매개변수
                        ul
                            li 텍스트 메시지 처리
                            ul
                                li 전체 메시지 String
                                li 메시지로부터 변환되는 Java primitive or class
                                li 메시지 청크 String and boolean pair : 마지막 메시지는 true
                                li 전체 메시지 Reader
                                li Decoder.Text or Decoder.TextStream
                            li 이진 메시지 처리
                            ul
                                li 전체 메시지 byte[] or ByteBuffer
                                li 메시지 청크 (byte[] or ByteBuffer) and boolean pair : 마지막 메시지는 true
                                li 전체 메시지 InputStream
                                li Decoder.Binary or Decoder.BinaryStream
                            li 퐁 메시지 처리 : PongMessage
                    li javax.websocket.server : 서버 전용 기능
                    ul
                        li ServerContainer extends WebSocketContainer
                        |                 ServerEndpointConfig 인스턴스 또는 @ServerEndpoint 클래스 등록
                li Spring Boot 예시
                ul
                    li
                        | 웹소켓 API를 사용하기 위해 javax.websocket-api, 스프링의 관리를 위해 spring-websocket 필요
                        button.btn-code(path='Repositories/STS/web-app/pom.xml', lan='xml') pom.xml »
                    li
                        | 스프링이 Endpoint를 찾아 알아서 빈을 생성하도록 ServerEndpointExporter 생성
                        button.btn-code(path='Repositories/STS/web-app/src/main/java/io/github/donggi/config/WebSocketConfig.java', lan='java') WebSocketConfig.java »
                    li
                        | @ServerEndpoint 예
                        button.btn-code(path='Repositories/STS/web-app/src/main/java/io/github/donggi/websocket/Echo.java', lan='java') Echo.java »
                    |             @ServerEndpoint 안에서 @Autowired 주입을 위해 @ServerEndpoint(configurator = ServerEndpointConfigurator.class)를 설정하고 @PostConstruct에서 주입을 실행했음을 참고
                    button.btn-code(path='Repositories/STS/web-app/src/main/java/io/github/donggi/config/ServerEndpointConfigurator.java', lan='java') ServerEndpointConfigurator.java »
        hr
