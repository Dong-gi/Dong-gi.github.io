include ../../source/skeleton.jade
+post('PostgreSQL 시작하기', 'PostgreSQL, 튜토리얼', 'PostgreSQL 튜토리얼 정리')
    h1 시작하기
    div
        h2.marker 설치
        ul
            li: +asA('http://postgresql.kr/docs/current/index.html')
            li: +asA('https://www.postgresql.org/download/')
            li: +asA('https://wiki.postgresql.org/wiki/Frequently_Asked_Questions')
        div
            h3.marker PostgreSQL 9.6 on CentOS 6.9
            ol
                li Install the repository RPM
                +asCode('shell') $ yum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-6-x86_64/pgdg-centos96-9.6-3.noarch.rpm
                li Install the client packages
                +asCode('shell') $ yum install postgresql96
                li Install the server packages
                +asCode('shell') $ yum install postgresql96-server
                li Initialize the database
                +asCode('shell') $ service postgresql-9.6 initdb
                li 서비스 시작
                +asCode('shell').
                    $ service postgresql-9.6 start
                    $ service postgresql-9.6 restart # 재시작하는 경우
                li 자동 구동 설정
                +asCode('shell') $ chkconfig postgresql-9.6 on
        
            h3.marker PostgreSQL 10 on CentOS 7
            ol
                li 패키지 설치
                +asCode('shell').
                    rpm -Uvh https://yum.postgresql.org/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
                    yum install -y postgresql10-server postgresql10
                li DB 초기화
                +asCode('shell') /usr/pgsql-10/bin/postgresql-10-setup initdb
                li 서비스 시작
                +asCode('shell').
                    systemctl start postgresql-10
                    systemctl status postgresql-10 // 상태 확인
                li 자동 구동 설정
                +asCode('shell') systemctl enable postgresql-10
                ul
                    li 서비스 시작 후, 실행 위치 확인
                    +asCode('shell') $ ps aux | grep postgres
    
        h2.marker 실행 구조
        p postgres라는 이름의 서버 프로세스가 항시 실행되면서 클라이언트의 연결 요청 시 이를 처리하고, 연결 수립 시 하위 프로세스를 생성하여 할당한다.
    
        h2.marker 데이터베이스 사용하기
        ul
            li 데이터베이스 사용 방법
            ol
                li psql : PostgreSQL 대화형 터미널 프로그램
                li pgAdmin : PostgreSQL GUI 클라이언트 프로그램
            li.marker 백업
            +asCode('shell').
                $ pg_dump -U [소유주] [DB명] -t [테이블 명] > [백업 파일명] # 테이블 백업
                $ pg_dump -U [소유주] [DB명] > [백업 파일명] # DB 백업
            li.marker 복구
            +asCode('shell').
                $ pgsql -U [DB 사용자 명] -f [백업 파일명] [DB명] # 테이블 복구
                $ psql -U [소유주] [DB명] &lt; [백업 파일명] # DB 복구
        div
            h3.marker psql을 이용한 데이터베이스 사용
            ul
                +asCode('shell') psql [options...] [dbname [username]]
                ul
                    li 접속할 DB와 유저가 명시되지 않은 경우 현재 명령어를 실행하는 유저로, 같은 이름의 DB에 접속 시도
                    li 처음 PostgreSQL을 설치하면, "postgres"를 이름으로 하는 메인 유저와 데이터베이스가 생성
                    li postgres 유저의 최초 패스워드는 알 수 없다
                    li postgres 유저를 이용하는 것은 보안상 좋지 않으므로 프로젝트 별로 계정을 할당하는 것이 좋다.
                li options
                ul
                    li -d dbname : 데이터베이스 지정.
                    li -e : 쿼리 에코 출력
                    li -h hostname : 원격지 설정
                    li -p port : 포트 설정
                    li -U username : 유저 설정.
                    li -s : 명령을 하나씩 확인하면서 실행
            div
                h4.marker psql 사용자 관련
                ul
                    li postgres 계정으로 db 접속
                    +asCode('shell').
                        $ su - [postgres]
                        $ psql postgres
                    li 사용자 추가
                    +asCode('shell').
                        $ adduser username
                        postgres=# create user username;
                    li 사용자 암호 설정
                    +asCode('shell').
                        postgres=# \password username
                        postgres=# alter user username with password 'new_password';
                    li DB 생성 후 권한 부여
                    +asCode('shell').
                        postgres=# create database db_name ENCODING 'UTF-8';
                        postgres=# GRANT ALL PRIVILEGES ON DATABASE db_name TO username;
            
                h4.marker psql 명령어
                +asCode('sql').
                        -- 사용 가능한 데이터베이스 리스트
                        db_name=# \l
                        -- 데이터베이스 연결
                        db_name=# \c db_name
                        -- 테이블 리스트. 처럼 패턴 사용 가능 + \dv, ...
                        db_name=# \dt *account*
                        -- 테이블, 뷰 등 여러가지 리스트. 마찬가지로 패턴 사용 가능
                        db_name=# \d
                        -- describe table, view, sequence, or index
                        db_name=# \d name
                        -- file_name으로 출력
                        db_name=# \o file_name
                        -- file_name 실행
                        db_name=# \i file_name
                        -- 접속 종료
                        db_name=# \q
        
            h3.marker 외부 접속 허용
            ul
                li iptables 규칙 추가
                ol
                    p /etc/sysconfig/iptables
                    +asA('https://webdir.tistory.com/170')
                    li 규칙 추가
                    p PostgreSQL 서버의 포트(--dport 5432)로 들어오는(INPUT) tcp 패킷(-p tcp)을 허용(ACCEPT)하는 규칙을 추가(-A).
                    p strong 규칙의 순서가 중요하므로, 앞선 규칙에서 패킷이 폐기되지 않도록 주의
                    +asCode('shell') $ iptables -A INPUT -p tcp --dport 5432 -j ACCEPT
                    li 확인
                    +asCode('shell') $ iptables -nL --line-numbers
                    li iptable 재시작
                    +asCode('shell') $ service iptables restart
                li /home/postgres/pgsql/data/postgres.conf 수정
                +asCode('ini').
                    # 변경 전
                    listen_addresses='localhost'
                    #port=5432
                    
                    # 변경 후
                    listen_addresses='*'
                    port=5432
                li /home/postgres/pgsql/data/pg_hba.conf
                +asCode('ini').
                    # 보통 서브넷을 특정
                    192.168.0.0/24
                    # 전체 접근 가능
                    0.0.0.0/0
                    + host all all 0.0.0.0/0 md5 # 모든 네트워크에 대해 MD5방식 로그인 요구
                    + host all all 0.0.0.0/0 trust # 암호 요구 없이 접속 허용.
                    + local all all md5 # 로컬 서버에서도 암호를 이용해 접속하도록 변경
                li PostgreSQL 서버 restart

    h1.marker SQL 언어
    p 클러스터 : 하나의 서버가 관리하는 데이터베이스 집합 단위
    div
        h2.marker 테이블 생성, 삭제
        ul
           li 생성
           +asCode('sql').
               CREATE TABLE t_account (
                   account_id bigint NOT NULL,
                   lv integer NOT NULL,
                   nickname text NOT NULL,
                   start_game_date timestamp with time zone NOT NULL
               );
           li psql 안에서 각 명령은 ;로 끝나야 한다.
           li -- : 한 줄 주석
           li 복사 생성
           +asCode('sql') create table t_account_0 ( like t_account including all );
           li 삭제
           +asCode('sql') DROP TABLE table_name;
    
        h2.marker 테이블에 자료 입력하기
        +asCode('sql').
            -- 숫자가 아닌 자료형은 ‘’안에 적는다.
            INSERT INTO weather VALUES (‘San Francisco’, 46, 50, 0.25, ‘1994-11-27’);
            
            -- 여러 개 입력 시 콤마로 구분
            INSERT INTO weather (city, temp_lo, temp_hi, prcp, date) VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29'), ('San Francisco', 43, 57, 0.0, '1994-11-29');
            
            -- SELECT and INSERT
            insert into t_account_old select * from t_account_0;
            
            -- SELECT and INSERT order by
            with tmp as (delete from test returning *) insert into test select * from tmp order by v;
            
            -- COPY from file
            COPY weather FROM '/home/user/weather.txt';
            
            -- COPY from CSV file
            COPY weather FROM '/home/user/weather.txt' WITH csv;
            
            -- COPY from STDIN
            COPY t_account_0 (account_id, lv, nickname, start_game_date) FROM stdin;
            1\t1\t'test'\t2017-03-31 12:06:06.446+09
            2\t2\t'test2'\t2017-03-31 12:06:06.446+09
            \.
    
        h2.marker 테이블의 자료 조회하기
        +asCode('sql').
            SELECT * FROM weather;
            SELECT city, (temp_hi+temp_lo)/2 AS temp_avg FROM weather;
            SELECT * FROM weather WHERE city = ‘San Francisco’ AND prop > 0.0;
            SELECT * FROM weather ORDER BY city, temp_lo;
            SELECT DISTINCT city FROM weather;
            
            -- Cartesian product
            SELECT * FROM weather w, cities c WHERE w.city = c.name;
            SELECT weather.city, cities.location FROM weather, cities WHERE cities.name = weather.city;
            
            -- JOIN
            SELECT * FROM weather INNER JOIN cities ON (weather.city = cities.name);
            SELECT * FROM weather LEFT OUTER JOIN cities ON (weather.city = cities.name);
            -- LEFT OUTER JOIN : 왼쪽 릴레이션 기준으로, 오른쪽 릴레이션에 만족하는 것이 없으면 null로 채운다.
            -- + RIGHT OUTER JOIN, FULL OUTER JOIN
            -- SELF JOIN : 자기 자신과의 조인
            SELECT w1.city, w1.temp_lo AS low, w2.city, w2.temp_lo AS low FROM weather w1, weather w2 WHERE w1.temp_lo &lt; w2.temp_lo;
    
        h2.marker 집계 함수
        +asCode('sql').
            SELECT max(temp_lo) FROM weather;
            SELECT city FROM weather WHERE temp_lo = (SELECT max(temp_lo) FROM weather);
            SELECT city, max(temp_lo) FROM weather GROUP BY city;
            SELECT city, max(temp_lo) FROM weather GROUP BY city HAVING max(temp_lo) &lt; 40;
            SELECT city, max(temp_lo) FROM weather WHERE city LIKE ’S%’ GROUP BY city;
    
        h2.marker 자료 갱신
        +asCode('sql') UPDATE weather SET temp_hi = temp_hi - 2, temp_lo = temp_lo - 2 WHERE date > ‘1994-11-28’;
    
        h2.marker 자료 삭제
        +asCode('sql').
            DELETE FROM weather WHERE city = ‘Hayward’;
            DELETE FROM weather;

    h1.marker 고급 기능
    div
        h2.marker 뷰
        +asCode('sql') CREATE VIEW myview AS SELECT city, temp_lo, temp_hi, prcp, date, location FROM weather, cities WHERE city = name;
    
        h2.marker 외래키
        +asCode('sql').
            CREATE TABLE cities (
                city            varchar(80) primary key,
                location        point
            );
            CREATE TABLE weather (
                city        varchar(80) references cities(city),
                temp_lo     int,
                temp_hi     int,
                prcp        real,
                date        date
            );
    
        h2.marker 트랜잭션
        ol
            li 트랜잭션의 시작과 끝은 BEGIN, COMMIT으로 구분하며, 이를 생략한 각 쿼리는 자동으로 감싸진다. 일부 클라이언트 라이브러리는 자동으로 BEGIN, COMMIT 명령을 포함하여, 사용자가 트랜잭션을 지정하면 오류를 내는 경우도 있다.
            li ROLLBACK : 도중에 문제가 생겨 지금까지 작업한 내역을 모두 취소하고 트랜잭션 종료
            li SAVEPOINT : 중간 지점 설정. 한 중간 지점으로 회귀할 경우, 그 이후의 중간 지점은 모두 사라진다.
        +asCode('sql').
            BEGIN;
            UPDATE accounts SET balance = balance - 100 WHERE name = 'Alice';
            SAVEPOINT my_savepoint;
            UPDATE accounts SET balance = balance + 100 WHERE name = 'Bob';
            -- ... Wally한테 가야하는 건데...
            ROLLBACK TO my_savepoint;
            UPDATE accounts SET balance = balance + 100 WHERE name = 'Wally';
            COMMIT;
    
        h2.marker 윈도우 함수
        ol
            li 행 집합을 대상으로 계산하는 함수. 집계 함수는 행 집합에 대한 하나의 행으로 결과를 보여주지만, 윈도우 함수는 각 행 단위로 결과를 출력한다.
            li 윈도우 함수 뒤에는 항상 OVER 절을 사용한다. OVER 절은 윈도우 함수의 대상이 되는 행 집합을 규정한다.
            li PARTITION BY는 그룹을 정의한다. 이를 생략할 경우 전체 행이 하나의 그룹으로 취급된다.
            +asCode('sql').
                -- 부서별 평균 임금과 각 직원의 급여 비교
                SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;
            li ORDER BY로 그룹 내 정렬 순서를 지정할 수 있다.
            +asCode('sql') SELECT depname, empno, salary, rank() OVER (PARTITION BY depname ORDER BY salary DESC) FROM empsalary;
            li 윈도우 프레임 : 현재 윈도우 함수가 처리하는 행집합. 많은 윈도우 함수들이 윈도우 프레임 단위로 계산한다.
            +asCode('sql').
                -- ORDER BY로 인한 윈도우 프레임 차이
                SELECT salary, sum(salary) OVER () FROM empsalary;
                SELECT salary, sum(salary) OVER (ORDER BY salary) FROM empsalary;
            li 윈도우 함수의 처리 대상은 미리 결정되어야 한다.
            p SELECT 항목 영역 안에서와 ORDER BY 절에서만 사용할 수 있다.
            li 집계 함수의 결과를 윈도우 함수의 입력으로 사용할 수는 있지만 그 반대는 불가능하다.
            li 윈도우 함수의 결과에 대한 검색, 재집계가 필요하다면 서브 쿼리를 사용한다.
            +asCode('sql').
                -- 각 부서에서 최상위 3명 임금만 출력
                SELECT depname, empno, salary, enroll_date FROM (
                    SELECT depname, empno, salary, enroll_date, rank()
                        OVER (PARTITION BY depname ORDER BY salary DESC, empno) AS pos FROM empsalary
                ) AS ss WHERE pos &lt;= 3;
                -- rank 함수의 대상은 OVER에서 특정되므로 생략되었다.
            li 같은 윈도우 프레임을 이용하는 경우, alias를 이용할 수 있다.
            +asCode('sql') SELECT sum(salary) OVER w, avg(salary) OVER w FROM empsalary WINDOW w AS (PARITION BY depname ORDER BY salary DESC);
    
        h2.marker 상속
        ol
            li 객체지향 데이터베이스에서 사용하는 개념. 테이블을 상속하면 해당 테이블의 모든 열을 갖게된다. 다중 상속이 가능하다.
            +asCode('sql').
                -- 도시 - 수도
                CREATE TABLE cities (
                    name        text,
                    population  real,
                    altitude    int -- (피트 단위)
                );
                CREATE TABLE capitals (
                    state       char(2)
                ) INHERITS (cities);
            li 테이블을 조회할 경우, 모든 하위 테이블도 대상이 되며, 해당 테이블만 조회하려면 ONLY 키워드를 이용한다.
            +asCode('sql').
                -- 수도를 빼고 도시 고도 500ft 초과의 도시 검색.
                SELECT name, altitude FROM ONLY cities WHERE altitude > 500;

    h1.marker PostgreSQL 팁
    ul
        li: +w3a()&attributes({target:'_blank', href:'http://postgresql.kr/docs/current/sql-commands.html'}) 명령어 목록
        li timezone 변경
        ol
            li postgresql.conf의 log_timezone, timezone 설정 변경
            li SELECT pg_reload_conf();
        li postgres 유저 비밀번호를 모를 때
        ol
            li pg_hba.conf 파일을 비밀번호 없이 접속할 수 있도록 trust로 변경 후 접속(서비스 재시작 필요)
            li 비밀번호 설정 후 pg_hba.conf 다시 원복
        li 모든 테이블에 대한 권한 부여
        ul
            li: +asCode('sql') GRANT SELECT ON ALL TABLES IN SCHEMA public TO user;
            li: +asCode('sql') GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO user;
            li 이후 추가되는 테이블에도 적용하려면 기본 권한을 변경
            +asCode('sql') ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO user;
            li 실제로 적용됐는지 확인
            +asCode('sql') select * from information_schema.role_table_grants where table_name = 'table_name';
        li dblink 재활용
        +asCode('sql').
            SELECT dblink_connect('myconn', 'hostaddr=1.2.3.4 port=5432 dbname=history user=readonly password=password');
            (SELECT account_id, last_login_date FROM v_account WHERE account_id IN
                (SELECT r.account_id FROM dblink('myconn', 'SELECT account_id, sum(amount) as total_amount FROM v_payment_history WHERE status=2 GROUP BY account_id HAVING sum(amount) >= 10000') AS r(account_id BIGINT, total_amount BIGINT))
            ) UNION ...
        li 시각 차이 획득
        +asCode('sql') select abs(extract (epoch from (insert_datetime - '2019-07-04 19:39:55'::timestamp)));
        li 커넥션 정리
        +asCode('sql') select pg_terminate_backend(pid) from pg_stat_activity where client_addr = '10.0.2.2';
        li
            | AWS Redshift와 드라이버 충돌될 때 jdbc 연결 쿼리에
            +w3a()&attributes({target:'_blank', href:'https://www.simba.com/products/Redshift/doc/JDBC_InstallGuide/content/jdbc/re/options/opensourcesubprotocoloverride.htm'}) OpenSourceSubProtocolOverride=true
            | 추가
        li 테이블 목록 획득
        +asCode('sql') select * from information_schema.tables
        li 테이블 정보 획득
        +asCode('sql') select * from information_schema.columns where table_name = '{tableName}'
