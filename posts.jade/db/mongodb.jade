include ../../source/skeleton.jade
+post('MongoDB 정리', 'MongoDB, NoSQL, BSON', 'MongoDB 주요 내용 정리')
    h1.marker MongoDB
    ol
        li NoSQL 데이터베이스의 한 종류. 데이터를 BSON(Binary JSON)으로 취급하며, SQL을 지원하지 않는다.
        +asA('https://docs.mongodb.com/manual/reference/sql-comparison/')
        table.no-sort
            tr
                th RDBMS
                th MongoDB
            tr
                td Table
                td Collection
            tr
                td Tuple, Row
                td Document
            tr
                td Join
                td Embedding, Linking
        +asA('https://docs.mongodb.com/manual/installation/')
        li 서비스 등록이 안 됐길래 그냥 직접 실행함
        +asCode('bash') mongod --fork -f /etc/mongod.conf
        li 최대 쿼리 결과 크기는 BSON 문서가 허용하는 16MB
        p 이를 초과하는 문서가 필요하다면 GridFS API를 이용. mongofiles 명령 또는 드라이버 참고.

    h2.marker BSON Specification
    ol
        +asA('http://bsonspec.org/spec.html')
        li Basic Types
        table.no-sort
            tr
                th type
                th size(bytes)
            tr
                td byte
                td 1
            tr
                td int32
                td 4(signed, 2의 보수)
            tr
                td int64
                td 8(signed, 2의 보수)
            tr
                td uint64
                td 8(unsigned)
            tr
                td double
                td 8(IEEE 754-2008)
            tr
                td decimal128
                td 16(IEEE 754-2008)
        li Non-terminals
        table.no-sort
            tr
                th
                th
                th
                th
                th mongo alias
            tr
                td document
                td ::=
                td int32 e_list "\x00"
                td BSON 객체. int32는 문서의 바이트 크기
                td
            tr
                td e_list
                td ::=
                td element e_list
                td
                td
            tr
                td
                td |
                td ""
                td
                td
            tr
                td element
                td ::=
                td "\x01" e_name double
                td
                td double
            tr
                td
                td |
                td "\x02" e_name string
                td UTF-8 string
                td string
            tr
                td
                td |
                td "\x03" e_name document
                td Embedded document
                td object
            tr
                td
                td |
                td "\x04" e_name document
                td: span.hover-content(template-id='template-mongodb-bson-array') Array
                td array
            tr
                td
                td |
                td "\x05" e_name binary
                td Binary data
                td binData
            tr
                td
                td |
                td "\x06" e_name
                td Deprecated
                td undefined
            tr
                td
                td |
                td "\x07" e_name (byte*12)
                td 4바이트 시각 + 5바이트 랜덤 + 3바이트 카운터
                td objectId
            tr
                td
                td |
                td "\x08" e_name "\x00"
                td Boolean "false"
                td bool
            tr
                td
                td |
                td "\x08" e_name "\x01"
                td Boolean "true"
                td bool
            tr
                td
                td |
                td "\x09" e_name int64
                td UTC datetime(밀리초)
                td date
            tr
                td
                td |
                td "\x0A" e_name
                td Null
                td null
            tr
                td
                td |
                td "\x0B" e_name cstring cstring
                td
                    | 각각 정규표현식 패턴, 
                    span.hover-content(template-id='template-mongodb-bson-regex-option') 옵션(알파벳 순)
                td regex
            tr
                td
                td |
                td "\x0C" e_name string (byte*12)
                td Deprecated
                td dbPointer
            tr
                td
                td |
                td "\x0D" e_name string
                td JavaScript code
                td javascript
            tr
                td
                td |
                td "\x0E" e_name string
                td Deprecated
                td symbol
            tr
                td
                td |
                td "\x0F" e_name code_w_s
                td JavaScript code w/ scope
                td javascriptWithScope
            tr
                td
                td |
                td "\x10" e_name int32
                td 32-bit integer
                td int
            tr
                td
                td |
                td "\x11" e_name uint64
                td Timestamp
                td timestamp
            tr
                td
                td |
                td "\x12" e_name int64
                td
                td long
            tr
                td
                td |
                td "\x13" e_name decimal128
                td
                td decimal
            tr
                td
                td |
                td "\xFF" e_name
                td: span.hover-content(template-id='template-mongodb-min-key') Min key
                td minKey
            tr
                td
                td |
                td "\x7F" e_name
                td: span.hover-content(template-id='template-mongodb-max-key') Max key
                td maxKey
            tr
                td e_name
                td ::=
                td cstring
                td Key name
                td
            tr
                td string
                td ::=
                td int32 (byte*) "\x00"
                td UTF8 문자열. int32는 바이트 길이(\x00 포함)
                td
            tr
                td cstring
                td ::=
                td (byte*) "\x00"
                td Modified UTF8 문자열
                td
            tr
                td binary
                td ::=
                td int32 subtype (byte*)
                td int32는 (byte*) 바이트 길이
                td
            tr
                td subtype
                td ::=
                td "\x00"
                td Generic binary subtype
                td
            tr
                td
                td |
                td "\x01"
                td Function
                td
            tr
                td
                td |
                td "\x02"
                td Binary (Old)
                td
            tr
                td
                td |
                td "\x03"
                td UUID (Old)
                td
            tr
                td
                td |
                td "\x04"
                td UUID
                td
            tr
                td
                td |
                td "\x05"
                td MD5
                td
            tr
                td
                td |
                td "\x06"
                td Encrypted BSON value
                td
            tr
                td
                td |
                td "\x80"
                td User defined
                td
            tr
                td code_w_s
                td ::=
                td int32 string document
                td Code w/ scope
                td

    h2.marker mongo Shell
    ul
        li mongo
        p 기본 포트 27017
        +asCode('bash').
            mongo --port 28015
            mongo "mongodb://host:port"
            mongo --password "mongodb://username@host:port"
            mongo --ssl --host replA/mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017
            
            mongo localhost:27017 file.js
            > load("file.js")
        li find(), aggregate() 쿼리 결과는 기본 101개로 제한된다
        ol
            li find().batchSize(size)로 기본 배치 크기 변경 가능
            p 그러하더라도 배치 당 16MB 제한은 벗어날 수 없다
            li cursor.next() 호출로 자동으로 getMore 연산이 수행되어 나머지 결과도 가져온다
            li cursor.objsLeftInBatch()로 배치에 남은 문서 수 확인 가능
        li
            | 메서드 
            +asA('https://docs.mongodb.com/manual/reference/method/')
        li
            | 연산자 
            +asA('https://docs.mongodb.com/manual/reference/operator/query/')
        li
            | 트랜잭션 
            +asA('https://docs.mongodb.com/manual/core/transactions/')
        li
            | Aggregation variables 
            +asA('https://docs.mongodb.com/manual/reference/aggregation-variables/')

    h3.marker help
    table.no-sort
        tr
            td db.help()
            td db 메서드 목록
        tr
            td db.mycoll.help()
            td collection 메서드 목록
        tr
            td sh.help()
            td sharding 메서드 목록
        tr
            td rs.help()
            td replica set 메서드 목록
        +tds('', '')
        tr
            td help admin
            td 파일시스템 접근, 프로세스 실행 명령 목록
        tr
            td: span.hover-content(template-id='template-mongodb-help-connect') help connect
            td
        tr
            td: span.hover-content(template-id='template-mongodb-help-misc') help misc
            td
        tr
            td help mr
            td mapreduce
        +tds('', '')
        tr
            td show dbs // db.adminCommand('listDatabases')
            td DB 목록
        tr
            td show collections // db.getCollectionNames()
            td 현재 DB의 컬렉션 목록
        tr
            td show users // db.getUsers()
            td 현재 DB의 유저 목록
        tr
            td show logs // db.adminCommand({'getLog': '*'})
            td 로거 목록
        tr
            td show log [name] // db.adminCommand({'getLog': 'name'})
            td 로그 출력. name 기본값은 'global'
        +tds('', '')
        tr
            td db
            td 현재 사용 중인 DB
        tr
            td use dbName // db.getSiblingDB('dbName')
            td DB 선택
        tr
            td it // cursor = db.collName.find()
            td 직전 find() 이터레이터 참조
        tr
            td DBQuery.shellBatchSize = x
            td 한번에 표시할 항목 수 변경
        tr
            td print()
            td 콘솔 출력
        tr
            td printjson()
            td print(tojson(x))
        tr
            td edit functionName
            td 함수 편집
        tr
            td exit
            td

    h3.marker db.mycoll.find().help()
    h4.marker find([object predicate][, object projection])
    +asCode('javascript') let coll = db.myCollection;
    table.no-sort
        tr
            td coll.find()
            td select *
        tr
            td coll.find({lv: 1})
            td select * where lv = 1
        tr
            td coll.find({item: null})
            td item 속성이 null이거나 없으면 해당
        tr
            td coll.find({item: {$type: 10}})
            td item 속성이 BSON 타입 10(Null)이면 해당
        tr
            td coll.find({item: {$type: "array"}})
            td item 속성이 배열이면 해당
        tr
            td coll.find({item: {$exists: false}})
            td item 속성이 없으면 해당
        tr
            td coll.find({leaderCard.lv: 1})
            td select * where leaderCard.lv = 1
        tr
            td coll.find({tags: ["red", "blank"]})
            td 길이 및 원소 순서가 정확히 일치해야 함
        tr
            td coll.find({tags: {$all: ["red", "blank"]}})
            td 'red', 'blank' 두 개 모두 포함하기만 하면 됨
        tr
            td coll.find({arr: {$elemMatch: {$gt: 22, $lt: 30}}})
            td 배열 원소 하나라도 모든 조건을 충족하면 됨
        tr
            td coll.find({"arr.0": {$gt: 22}})
            td arr[0]이 모든 조건을 충족하면 됨
        tr
            td coll.find({arr: {$size: 3}})
            td arr.length == 3
        tr
            td coll.find({lv: {$gt: 1}})
            td select * where lv > 1
        tr
            td coll.find({$or: [{status: "A"}, {qty: {$lt: 30}}]})
            td select * where status = 'A' or qty &lt; 30
        tr
            td coll.find({status: {$in: ["A", "D"]}})
            td select * where status in ('A', 'D')
        tr
            td coll.find({}, {_id: 0})
            td Projection; _id 속성은 제외
        tr
            td coll.find({}, {'leaderCard.lv': 1})
            td Projection; 특정 내부 속성 포함
        tr
            td coll.find().sort({lv: 1})
            td 1(오름차순), -1(내림차순)
        tr
            td coll.find().limit(10)
            td
        tr
            td coll.findOne()
            td == limit(1)
        tr
            td coll.find().count()
            td limit(), skip() 무시
        tr
            td coll.find().size()
            td limit(), skip() 적용

    h4.marker Cursor methods
    p db.mycoll.find()는 이터레이터(Cursor)를 반환한다. 단, mongo 쉘에서 var 변수에 할당하지 않은 경우 자동으로 결과를 출력하고 끝냄에 유의.
    table.no-sort
        tr
            td cursor.forEach()
            td
        tr
            td cursor.toArray()
            td 커서를 모두 순회하고 메모리에 올린다.
        tr
            td cursor.noCursorTimeout()
            td 이 경우 커서를 모두 순회하거나, 수동으로 close()를 호출해야만 한다.

    h3.marker db.mycoll.help()
    +asCode('javascript') let coll = db.myCollection;
    table.no-sort
        tr
            td coll.insertOne() Since 3.2
            td 1개 추가
        tr
            td coll.insertMany() Since 3.2
            td 배열 요소 전부 추가
        tr
            td coll.insert()
            td document 하나 또는 배열
        tr
            td coll.updateOne(filter, update, options) Since 3.2
            td
                ul
                    li 1개 변경
                    +asCode('javascript').
                        updateOne({_id: 10}, {$set: {calc: 5}}) // update set calc = 5
                        {$inc: {calc: 5}} // set calc = calc + 5
                        {$currentDate: {updDate: true}} // set updDate = now()
                    li 옵션에 upsert: true가 있으면 없을 시 삽입
                    li Since 4.2 갱신 연산에서 Aggregation pipeline 및 aggregation variable 사용 가능
                    +asCode('javascript') {$set: {modified: "$$NOW"}}
                    +asCode('javascript').
                        {$set: {grade: {$switch: {
                            branches: [
                                { case: { $gte: [ "$avgScore", 90 ] }, then: "A" },
                                { case: { $gte: [ "$avgScore", 80 ] }, then: "B" }
                            ], default: "F"
                        }
                    +asCode('javascript') {$set: {myArr: {$concatArrays: ["$myArr", [8, 6]]}}}
        tr
            td coll.updateMany(filter, update, options) Since 3.2
            td 여러 개 변경
        tr
            td coll.replaceOne(filter, update, options) Since 3.2
            td 1개 대치. _id는 변경되지 않는다.
        tr
            td coll.deleteOne() Since 3.2
            td 1개 삭제
        tr
            td coll.deleteMany() Since 3.2
            td 여러 개 삭제
        tr
            td coll.drop()
            td 전부 삭제
        tr
            td: span.hover-content(template-id='template-mongodb-bulk-write') coll.bulkWrite()
            td insertOne, updateOne, updateMany, replaceOne, deleteOne, deleteMany 혼용.
        tr
            td coll.createIndex()
            td 인덱스가 없으면 생성.
        tr
            td db.getSiblingDB()
            td 현재 연결을 변경하지 않고 다른 DB 연결 획득.
        tr
            td coll.renameCollection('newName')
            td

    h2.marker Aggregation
    ul
        li: +asCode('javascript').
                db.mycoll.aggregate([
                    {$match: {grade: 'A'}},
                    {$group: {total: {$sum: "$amount"}}}
                ])
        li: +asCode('javascript') db.mycoll.mapReduce(mappingFunc, reduceFunc, {query: filterObj, out: "outName"})
        +asCode('javascript').
            db.mycoll.mapReduce(
                function() { emit(groupKey, value); },
                function(key, values) { return aggrValue; }
            )
        p 예 ↓
        +asCode('javascript').
            for(let i = 0; i &lt; 50; ++i) db.test.insertOne({num: i})
            db.test.mapReduce(
                function() { emit(this.num % 5, this.num); },
                function(key, values) { return Array.join(values); },
                { out: 'result' }
            ).find()
        +asCode('text').
            { "_id" : 0, "value" : "0,5,10,15,20,25,30,35,40,45" }
            { "_id" : 1, "value" : "1,6,11,16,21,26,31,36,41,46" }
            { "_id" : 2, "value" : "2,7,12,17,22,27,32,37,42,47" }
            { "_id" : 3, "value" : "3,8,13,18,23,28,33,38,43,48" }
            { "_id" : 4, "value" : "4,9,14,19,24,29,34,39,44,49" }
        li: +asCode('javascript') db.mycoll.estimatedDocumentCount()
        li: +asCode('javascript') db.mycoll.count()
        li: +asCode('javascript') db.mycoll.distinct([string field][, object query][, object options])

    +hoverTemplate()#template-mongodb-bson-regex-option
        table.no-sort
            tr
                td i
                td 대소문자 구별X
            tr
                td m
                td 여러 줄 매칭
            tr
                td x
                td verbose
            tr
                td l
                td 로캐일에 따른 \w, \W 등의 해석
            tr
                td s
                td '.'이 임의 문자 매칭
            tr
                td u
                td \w, \W 등이 유니코드에 따라 매칭
    +hoverTemplate()#template-mongodb-bson-array
        | 예. ['red', 'blue']는 {'0': 'red', '1': 'blue'}로 표현된다
    +hoverTemplate()#template-mongodb-min-key
        | 항상 다른 것보다 작다고 간주됨
    +hoverTemplate()#template-mongodb-max-key
        | 항상 다른 것보다 크다고 간주됨
    +hoverTemplate().as-code#template-mongodb-help-connect&attributes({lan: 'javascript'}).
        const mongo = new Mongo('host[:port]');
        const mydb = mongo.getDB('mydb');
        //  or
        const mydb2 = connect('host[:port]/mydb2');
    +hoverTemplate().as-code#template-mongodb-help-misc&attributes({lan: 'javascript'}).
        b = new BinData(subtype,base64str)  // new BSON BinData
        b = HexData(subtype,hexstr)         // BSON BinData from a hex string
        b = UUID(hexstr)                    // BSON BinData of UUID subtype
        b = MD5(hexstr)                     // BSON BinData of MD5 subtype
        b.subtype(), b.length(), b.hex(), b.base64(), b.toString()
        "hexstr"                            // 0x 접두 필요없이 [0-9a-fA-F]를 나열
        o = new ObjectId()                  // ObjectId
        o.getTimestamp(), o.isObjectId, o.toString(), o.equals(otherid)
        d = ISODate()                       // like Date() but behaves more intuitively when used
        d = ISODate('YYYY-MM-DD hh:mm:ss')  // without an explicit "new " prefix on construction        
    +hoverTemplate().as-code#template-mongodb-bulk-write&attributes({lan: 'javascript'}).
        coll.bulkWrite([
            {
                insertOne:
                    {
                        "document": { "_id": 4, "char": "Dithras", "class": "barbarian", "lvl": 4 }
                    }
            },
            {
                insertOne:
                    {
                        "document": { "_id": 5, "char": "Taeln", "class": "fighter", "lvl": 3 }
                    }
            },
            {
                updateOne:
                    {
                        "filter": { "char": "Eldon" },
                        "update": { $set: { "status": "Critical Injury" } }
                    }
            },
            {
                deleteOne:
                    { "filter": { "char": "Brisbane" } }
            },
            {
                replaceOne:
                    {
                        "filter": { "char": "Meldane" },
                        "replacement": { "char": "Tanys", "class": "oracle", "lvl": 4 }
                    }
            }
        ]);
