include ../../source/skeleton.jade
+post('Git', 'Git', 'Git 정리')
    h1 Git; https://git-scm.com/book/ko
    ul
        li Git은 각 버전 사이의 변경 사항을 기록하지 않는다.
        li.marker 커밋
        ul
            li 스테이지에 올라간 각 파일들은 해시값과 함께 blob 객체로 .git에 저장된다
            li 루트 디렉터리부터 각 서브 디렉터리들은 자식 노드들에 대한 포인터를 가지며, 해시값과 함께 tree 객체로 .git에 저장된다
            li 커밋 객체는 루트 디렉터리 tree 객체에 대한 포인터와 이전 커밋 객체(있다면)에 대한 포인터를 가지며, 해시값과 함께 .git에 저장된다
        li.marker 브랜치는 커밋 객체를 가리키는 포인터
        li HEAD는 현재 작업중인 브랜치를 가리키는 포인터(checkout으로 변경)
        li origin/ : 서버 브랜치

    h1 Git Server
    ul
        li 가능 프로토콜 : Local, SSH, Git, HTTP
        li Git 호스팅 업체 : https://git.wiki.kernel.org/index.php/GitHosting

    h1 Submodule
    ul
        li 관리하는 디렉터리 자체가 다른 git 저장소일 수 있다
        +asCode('shell').
            $ git submodule init
            $ git submodule update

    h1 Git Hook
    ul
        li 특정 이벤트 발생 시 실행될 스크립트들을 .git/hooks에 저장한다
        p 해당 디렉터리에는 예제 스크립트들이 존재한다
        li pre-commit : 클라이언트에서 커밋 메시지를 작성하기 전에 호출된다. 0으로 종료하지 않으면 커밋 취소
        p git commit --no-verify로 일시 생략 가능
        li prepare-commit-msg : 커밋 메시지를 생성한 뒤, 편집기를 실행하기 전에 실행
        li commit-msg : 커밋 메시지가 들어 있는 임시 파일의 경로를 인자로 받는다. 0으로 종료하지 않으면 커밋 취소
        li post-commit : 커밋 완료 후 실행
        li pre-receive : 서버에서 push 전에 실행되며, 0으로 종료하지 않으면 push 거절
        li post-receive : 서버에서 push 후에 실행
        li update : 브랜치마다 한 번씩 실행되는 것을 제외하면 pre-receive와 동일

    h1 GitHub Code scanning
    ul
        li
            | 링크 : 
            +asA('https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/enabling-code-scanning-for-a-repository')
        li 저장소 > Security > Code scanning 활성화
        li codeql-analysis.yml로 조정 가능

    h1: +asA('https://docs.github.com/en/free-pro-team@latest/actions', 'GitHub Action')
    div
        h2 개요
        ul
            li GitHub 저장소에서 즉시 테스트, 빌드, 배포 등 임의 workflow를 실행하는 서비스
            li 초보자를 위한 템플릿 제공 : 
                +asA('https://github.com/actions/starter-workflows')

        h2 주요 개념
        ul
            li Push 등 특정 event 발생 시, 해당 이벤트를 trigger로 등록한 모든 workflow를 실행한다
            ul
                li 각 event는 commit SHA, Git ref를 갖는다
                li 실행될 workflow는 해당 브랜치의 .github/workflows 디렉터리에 존재해야 한다
                li Workflow 실행 시, GITHUB_SHA, GITHUB_REF 환경변수가 기본으로 설정된다
            li Workflow는 job(들)을 갖는다
            p 각 Job은 그 안에 정의된 step 순서대로 명령을 실행한다

        h2 이벤트 종류
        div
            h3 Scheduled events
            table
                +ths('GITHUB_SHA', 'GITHUB_REF')
                +tds('기본 브랜치의 마지막 커밋', '기본 브랜치')
            p
                +asA('https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07', 'POSIX cron syntax')
                | 로 일치하는 UTC 시각에 실행시킬 수 있다. 설정할 수 있는 최소 간격은 매 5분마다 실행하는 것.
            +asCode('yaml', '예. 매 15분마다 실행').
                on:
                  schedule:
                    # * is a special character in YAML so you have to quote this string
                    - cron:  '*/15 * * * *'
