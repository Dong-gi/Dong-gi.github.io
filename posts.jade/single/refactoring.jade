include ../../source/skeleton.jade
+post('디자인 패턴 + 리팩터링', '디자인 패턴, 리팩터링', '디자인 패턴 + 리팩터링 정리')
    h1.marker 기술 부채
    ol
        li 기술 부채
        p 개발자가 임시방편을 선택하면 기술은 부채를 지게 된다. 누적된 기술 부채가 너무 커서 제품을 포기해야 하는 상황을 기술 파산이라고 한다.
        li 기술 부채 요소
        p 코드 부채, 설계 부채, 테스트 부채, 문서 부채

    h1.marker 소프트웨어 설계 원칙
    ol
        li 계층 원칙 : 계층적인 추상화 조직 생성
        li 캡슐화 원칙 : 관심사 분리, 정보 은닉
        li 단일 책임 원칙 : 클래스를 변경해야 하는 이유가 둘 이상이 되어서는 안 된다
        li 비순환 의존성 원칙
        li OCP; Open/Close Principle
        p 모듈은 확장에는 열려야 하지만, 변경에는 닫혀야 한다. 특히 모듈은 코드 변경 없이 새로운 요구 사항을 지원할 수 있어야 한다. 일단 타입 구현을 완료하면 타입은 버그 수정을 위해서만 변경 가능하다

    h1.marker 디자인 패턴
    ol
        li Abstract Factory
        p
            | 서로 관련 있는 여러 객체들에 대한 군집을 생성하는 인터페이스 제공.
            br
            | AbstractFactory : 군집 인스턴스 생성 연산 정의 → 구현 : ConcreteFactory
            br
            | AbstractProduct : 군집을 구성하는 각 객체 정의 → 구현 : ConcreteProduct
        li Builder
        p 복잡한 ─ 필드가 많지만, 인스턴스화에 모든 필드가 필요하지는 않은 ─ 객체 생성 로직을 별도 클래스로 분리.
        li Factory Method(Virtual Constructor)
        p 객체 생성 인터페이스를 정의. 구현을 어떻게 할 지는 각 서브클래스가 결정
        li Prototype
        p 견본이 되는 인스턴스를 복사하여 새로운 객체 생성. Prototype은 복제 연산을 가져야 한다.
        li Singleton
        p 단 하나의 클래스 인스턴스만 존재하며, 이를 공유
        li Adapter, Wrapper
        p 클래스의 인터페이스를 기대하는 다른 인터페이스로 변환
        li Facade
        p 서브시스템을 사용하기 쉽도록 상위 수준의 인터페이스 정의
        li Decorator
        p 동적으로 새로운 기능 추가
        +asCode('java', '예') class FilterInputStream extends InputStream {}
        li Proxy
        p 다른 객체에 대한 접근을 제어하는 대리자
        li Chain of Responsibility
        p 요청을 자신이 처리해야 한다면 처리, 아니라면 후속 처리자에게 전달
        li Iterator
        p 내부를 노출하지 않고 원소를 차례대로 접근하는 방법 제공
        li Mediator
        p 내부 객체들이 서로를 직접 참조하지 않고, Mediator를 통해 교류
        li Observer
        p 감시하는 객체의 상태가 변하면 의존하는 객체들이 통지받도록 한다
        li State
        p 객체 내부 상태에 따라 행동을 변경
        li Template Method
        p 부모 클래스(abstract)는 공통 메서드를 정의하고, 각 leaf 클래스는 제각각의 구현을 갖는다.
        li Strategy
        p 동일한 계열의 알고리즘들을 캡슐화하여 상호 교환할 수 있도록 한다
        li Scott Meyers : All non-leaf classes should be abstract

    h1.marker 리팩터링
    ol
        li 자주 쓰이지 않는 코드의 성능 향상에 얽매이지 말 것.
        li 주석을 적는 대신 주석이 설명하는 부분을 메서드로 추출
        li Extract Method
        p 코드들을 그룹으로 묶어도 좋겠다고 판단된다면, 목적이 드러나는 직관적인 이름의 메서드로 추출
        li Split Temporary Variable
        p 루프 변수나 누적용 임시 변수가 아닌 경우, 각 대입마다 새로운 임시변수를 사용하여 되도록 final 임시변수만 이용
        li Remove Assignments to Parameters
        p 매개변수는 되도록 final이 되도록 한다
        li Replace Method with Method Object
        p 지역변수로 메서드 추출이 어려운 아주 긴 메서드가 있을 때, 지역변수를 필드로 하는 객체를 만들고 메서드를 잘게 쪼갠다
        li Move Method
        p 메서드가 다른 클래스의 기능을 더 많이 이용할 때, 해당 클래스에 비슷한 내용의 메서드를 작성. 기존 메서드는 대리자로 변경하거나 삭제
        li Extract Class
        p 클래스가 2가지 이상의 책임을 가진 경우
        li Pull Up Field/Method/Constructor Body
        p 두 하위클래스의 같은 필드/메서드/생성자 코드는 상위클래스로. 반대로 특정 서브클래스에서만 이용하는 것은 하위클래스로.
        li Replace Inheritance with Delegation
        p 상위클래스의 일부만 이용하는 경우, 상위클래스 인스턴스를 필드로 갖고 메서드에서는 호출을 위임. 반대로, 클래스 전반에 걸쳐 위임이 도배되는 경우엔 차라리 상속으로 전환
