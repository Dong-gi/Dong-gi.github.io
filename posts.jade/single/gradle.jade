include ../../source/skeleton.jade
+post('Gradle', 'Gradle', 'Gradle 정리')
    h1.marker
        | Gradle 
        +asA('https://docs.gradle.org/current/userguide/userguide.html')
    ol
        li 스크립트를 이용해 유연한 빌드 자동화 툴
        p 스크립트는 Groovy, Kotlin으로 작성 가능
        li 변경이 없는 빌드 절차의 결과를 재사용하여 빠른 빌드 가능
        li CLI
        +asCode('shell').
            export GRADLE_OPTS="-Dfile.encoding=utf-8"
            $ gradle [option...] [task...]
            $ gradle --help                                   # 도움말 1
            $ gradle --daemon                                 # 그래들 데몬을 실행시켜둔다. 반복 빌드가 빨라진다.
            $ gradle -b new.gradle                            # 스크립트 파일 지정. 기본 build.gradle
            $ gradle             tasks                        # 작업 목록 출력
            $ gradle             help                         # 도움말 2
            $ gradle             help --task init             # init 작업 도움말 출력
            $ gradle             init --type java-application # 프로젝트 스켈레톤 생성
    div
        h2.marker build.gradle
        ol
            li.marker Task; 작업
            +asCode('gradle').
                def msg = 'hello world'
                task hello {
                    doLast {
                        println msg
                    }
                }
            
            li.marker Task dependencies; 작업 의존
            +asCode('gradle').
                def msg = 'hello world'
                task hello {
                    doLast {
                        println msg
                    }
                }
                task hello2 {
                    dependsOn hello
                    doFirst {
                        println "I need 'hello' task"
                    }
                    doLast {
                        println msg
                    }
                }
            
            li.marker Dynamic tasks; 동적 작업
            +asCode('gradle').
                [2, 4, 6].each {
                    def num = it
                    task "hello${num}" {
                        doLast {
                            println "${'hello?' * num}"
                        }
                    }
                }
                
            li.marker Groovy DSL shortcut notations; 그루비 축약 표현
            +asCode('gradle').
                task hello {}
                hello.doFirst { println 'doFirst' }
                hello.doLast  { println 'doLast1' }
                hello.doLast  { println 'doLast2' }
            +asCode().
                > Task :hello
                doFirst
                doLast1
                doLast2
                
                BUILD SUCCESSFUL in 7s
                1 actionable task: 1 executed
            
            li.marker Extra task properties; 사용자 정의 속성 정의
            +asCode('gradle').
                task _init { ext.author = 'Donggi Kim' }
                task about {
                    doLast {
                        println "Author is '${_init.author}'"
                    }
                }
            
            li.marker Using methods; 사용자 정의 메서드 이용
            +asCode('gradle').
                task _init { ext.author = 'Donggi Kim' }
                task about {
                    doLast {
                        println "Running dir is ${runningDir()}"
                        println "Project dir is ${projectDir()}"
                        println "Author is '${_init.author}'"
                    }
                }
                
                String runningDir() {
                    new File('').getAbsolutePath()
                }
                String projectDir() {
                    System.getProperty('user.dir')
                }
            +asCode().
                > Task :about
                Running dir is /root/.gradle/daemon/6.4
                Project dir is /workspace/donggi-github/Dong-gi.github.io/Repositories/Gradle/project-01
                Author is 'Donggi Kim'
                
                BUILD SUCCESSFUL in 7s
                1 actionable task: 1 executed

            li.marker Default tasks; 기본 실행 작업
            +asCode('gradle').
                defaultTasks 'hello'
                
                task hello {
                    doLast {
                        println 'hello world'
                    }
                }
                
            li.marker External dependencies; 스크립트에서 외부 패키지 사용
            +asCode('gradle').
                import org.apache.commons.codec.binary.Base64
                
                buildscript {
                    repositories {
                        mavenCentral()
                    }
                    dependencies {
                        // classpath group: 'commons-codec', name: 'commons-codec', version: '1.2'
                        classpath 'commons-codec:commons-codec:1.2'
                    }
                }
                
                task encode {
                    doLast {
                        def byte[] encodedString = new Base64().encode('hello world\n'.getBytes())
                        println new String(encodedString)
                    }
                }
            ol
                li
                    | buildscript() 메서드는 
                    +asA('https://docs.gradle.org/current/javadoc/org/gradle/api/initialization/dsl/ScriptHandler.html')
                    |  인스턴스를 구성한다.
                li 프로젝트의 buildscript()는 모든 서브 프로젝트에도 적용된다
            
            li.marker 작업 설명
            +asCode('gradle').
                task hello {
                    group = 'Core'
                    description = 'Say hello'
                    
                    doLast {
                        println 'hello world'
                    }
                }
            +asCode().
                $ gradle tasks
                ...
                Core tasks
                ----------
                hello - Say hello
                ...
                
        h2.marker 빌드 절차
        ol
            li.marker Initialization
            p
                | 어떤 프로젝트들을 빌드해야 하는지 결정하고, 
                +asA('https://docs.gradle.org/current/dsl/org.gradle.api.Project.html')
                |  인스턴스를 만든다.
                br
                | 루트 프로젝트에 존재하는 settings.gradle 스크립트가 실행된다.
                +codeBtn('/Repositories/Eclipse/annotation-processing3/settings.gradle', 'gradle')
                +asA('https://docs.gradle.org/current/userguide/multi_project_builds.html#multi_project_builds')
                br
                | -I 또는 --init-script 옵션을 지정하는 경우, 
                +asA('https://docs.gradle.org/current/userguide/init_scripts.html#init_scripts')
                | 를 실행한다
            li.marker Configuration
            p Project 인스턴스의 설정이 진행된다. 빌드될 각 프로젝트의 build.gradle 스크립트가 실행된다.
            li.marker Execution
            p 구성 단계에서 실행하기로 결정된 작업들을 실행한다.
            +asCode('gradle').
                task hello {}
                tasks.whenTaskAdded { task ->
                    task.ext.srcDir = 'src/main/java'
                }
                gradle.taskGraph.beforeTask { Task task ->
                    println "executing $task ..."
                }
                gradle.taskGraph.afterTask { Task task, TaskState state ->
                    if (state.failure)
                        println "${task} Failed"
                    else
                        println "${task} Succeeded"
                }
                gradle.afterProject { project ->
                    if (project.state.failure)
                        println "${project} Failed"
                    else
                        println "${project} Succeeded"
                }
                
        h2.marker
            | Gradle 성능 
            +asA('https://docs.gradle.org/current/userguide/organizing_gradle_projects.html#organizing_gradle_projects')
        ol
            li.marker Build scan
            p --scan 옵션으로 실행하면 된다
            +asCode('shell') $ gradle build --scan
            +w3img('/imgs/20200518_112155.png', 'Gradle build scan result example')
            
            li.marker 프로젝트에 항상 settings.gradle을 둘 것
            p 매 실행 시마다 settings.gradle이 있는지 찾으므로, 빈 파일이라도 만들어 두는 것이 좋다
            
            li.marker gradle.properties를 모든 프로젝트에 적용시키려는 경우
            p GRADLE_USER_HOME 디렉터리에 위치시키면 된다
            
            li.marker 각 작업의 출력 디렉터리는 혼자만 사용함이 바람직하다
            p 여러 작업이 동일한 출력 디렉터리를 이용하는 경우, 전체 빌드가 느려지고 빌드 캐시가 무용지물이 된다.
    
    h1.marker Gradle 플러그인
    ol
        li 플러그인은 Gradle 코어 기능을 확장하여 새로운 작업, 데이터 모델을 이용하게 한다
        li 플러그인은 프로젝트와 무관하게 사용 가능하다
        li
            | 플러그인의 적용
            +asA('https://docs.gradle.org/current/javadoc/org/gradle/api/Plugin.html#apply-T-')
            | 은 여러 번 호출해도 부작용이 없다
        li 사용할 플러그인 이름은 Fully qualified name이어야 하지만, Core Gradle 플러그인들은 짧은 이름을 사용할 수 있다.
        p 예. JavaPlugin → 'java'
    div
        h2.marker Binary plugin
        p
            +asA('https://docs.gradle.org/current/javadoc/org/gradle/api/Plugin.html')
            |  인터페이스를 구현한 임의 클래스를 플러그인으로 이용할 수 있다
        div
            h3.marker 플러그인 포함 및 적용
            p 'java' 플러그인은 Core Gradle의 일부이므로 적용한다고 선언만하면 되지만, 대개의 플러그인들은 클래스를 찾기 위해 jar를 포함시켜야 한다
            +asCode('gradle').
                plugins {
                    id 'java'
                }
            ol
                li
                    | 플러그인 포털
                    +asA('https://plugins.gradle.org/')
                    |  또는 사용자 지정 저장소로부터 포함
                ul
                    li 플러그인 포함 및 적용
                    +asCode('gradle').
                        plugins {
                            id 'com.jfrog.bintray' version '0.4.1'
                        }
                    li 서브 프로젝트만 적용하는 플러그인
                    +asCode('gradle').
                        // settings.gradle
                        include 'hello1', 'hello2', 'bye'
                        
                        // build.gradle
                        plugins {
                            id 'com.example.hello' version '1.0.0' apply false
                            id 'com.example.bye' version '1.0.0' apply false
                        }
                        subprojects {
                            if (name.startsWith('hello')) {
                                apply plugin: 'com.example.hello'
                            }
                        }
                        
                        // bye/build.gradle
                        plugins {
                            id 'com.example.bye'
                        }
                li 외부 jar 지정
                li buildSrc로 소스코드 포함(코드를 갖고 있지 않으면 외부에서 사용 불가)
                +asCode('gradle').
                    // buildSrc/build.gradle
                    plugins {
                        id 'java-gradle-plugin'
                    }
                    gradlePlugin {
                        plugins {
                            myPlugins {
                                id = 'my-plugin'
                                implementationClass = 'my.MyPlugin'
                            }
                        }
                    }
                li 스크립트 안의 클래스로 정의(스크립트 외부 사용은 불가)
                
        h2.marker base 플러그인
        +codeBtn('/Repositories/Gradle/project-01/build.gradle', 'gradle')
        div
            h3.marker Task
            ul
                li clean
                p
                    | 출력 디렉터리(기본값 build/)
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project:buildDir')
                    | 를 정리한다.
                
        
        h2.marker Java 플러그인
        div
            h3.marker Source set
            p 작업에 필요한 코드와 리소스를 묶은 단위. 입출력 경로를 지정.
            
            h3.marker Task
            ul
                li
                    | clean - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Delete.html')
                p build 디렉터리 제거
                li
                    | clean{TaskName} - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Delete.html')
                p 해당 작업 출력 제거
                li
                    | compileJava - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.JavaCompile.html')
                p Depends on : 컴파일 경로를 변경하는 모든 작업 + jar
                p 프로덕션(main 소스셋) .java 소스 코드 컴파일
                li
                    | processResources - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Copy.html')
                p 프로덕션(main 소스셋) 리소스를 지정 디렉터리로 복사
                li classes
                p Depends on : compileJava, processResources
                p 원한다면 추가 작업을 덧붙여도 된다.
                li
                    | jar - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html')
                p Depends on : classes
                p main 소스 셋의 클래스 및 리소스로 프로덕션용 jar 빌드
                li
                    | javadoc - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html')
                p Depends on : classes
                p API 문서 생성
                li
                    | compileTestJava - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.JavaCompile.html')
                p 테스트 .java 소스 코드 컴파일
                li
                    | processTestResources - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Copy.html')
                p 테스트 리소스를 지정 디렉터리로 복사
                li testClasses
                p Depends on : compileTestJava, processTestResources
                p 원한다면 추가 작업을 덧붙여도 된다.
                li
                    | test - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html')
                p Depends on : testClasses + test runtime classpath를 생성하는 작업들
                p JUnit 또는 TestNG로 단위 테스트 진행
            h3.marker SourceSet Task
            ul
                li
                    | compile{SourceSet}Java - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.JavaCompile.html')
                p Depends on : 해당 소스셋의 컴파일 경로를 변경하는 모든 작업
                li
                    | process{SourceSet}Resources - 
                    +asA('https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Copy.html')
                p 해당 소스셋의 리소스들을 복사
                li {sourceSet}Classes
                p Depends on : compile{SourceSet}Java, process{SourceSet}Resources
            h3.marker Project layout
            ul
                li 기본(default) 구조
                +asCode().
                    src/main/java      : 프로덕션 소스 코드
                    src/main/resources : 프로덕션 리소스
                    src/test/java      : 테스트 소스 코드
                    src/test/resources : 테스트 리소스
                    src/{sourceSet}/java
                    src/{sourceSet}/resources
                li 설정 변경
                +asCode('gradle').
                    sourceSets {
                        main {
                            java {
                                srcDirs = ['src/java']
                            }
                            resources {
                                srcDirs = ['src/resources']
                            }
                        }
                    }
            h3.marker SourceSet
            ul
                li 기본적으로 main, test 소스셋이 추가된다
                li 속성
                table
                    +ths('한정자', '타입', '이름', '설명')
                    +tds('readonly', 'String', 'name', '소스셋 이름')
                    +tds('readonly', 'SourceSetOutput', 'output', '출력 클래스 + 리소스 파일들')
                    +tds('readonly', 'FileCollection', 'output.classesDirs', '클래스 출력 경로, 기본값 {buildDir}/classes/java/{name}')
                    +tds('', 'File', 'output.resourcesDir', '리소스 출력 경로, 기본값 {buildDir}/resources/{name}')
                    +tds('', 'FileCollection', 'compileClasspath', '기본값 {name}CompileClasspath 설정')
                    +tds('', 'FileCollection', 'annotationProcessorPath', '기본값 {name}AnnotationProcessor 설정')
                    +tds('', 'FileCollection', 'runtimeClasspath', '기본값 {output} + {name}RuntimeClasspath 설정')
                    +tds('readonly', 'SourceDirectorySet', 'java', '.java 파일들')
                    +tds('', 'Set<File>', 'java.srcDirs', '자바 소스가 존재하는 경로들, 기본값 src/{name}/java')
                    +tds('', 'File', 'java.outputDir', '기본값 {buildDir}/classes/java/{name}')
                    +tds('readonly', 'SourceDirectorySet', 'resources', '.java를 제외한 리소스 파일들')
                    +tds('', '', '', '')
                    +tds('', '', '', '')
                    +tds('', '', '', '')
            h3.marker Contributed extension
            p
                | 가능한 버전은 다음 링크 참고 
                +asA('https://docs.gradle.org/current/javadoc/org/gradle/api/JavaVersion.html')
            +asCode('gradle').
                java {
                    sourceCompatibility = JavaVersion.VERSION_1_8 // 컴파일 버전
                    targetCompatibility = JavaVersion.VERSION_1_8 // 출력 버전
                }
            h3.marker Convention properties
            table
                +ths('한정자', '타입', '이름', '설명')
                +tds('', 'String', 'reporting.baseDir', '빌드 결과 출력 디렉터리 이름, 기본값 reports')
                +tds('readonly', 'File', 'reportsDir', '{buildDir}/{reporting.baseDir}')
                +tds('', 'String', 'testReportDirName', '테스트 결과 출력 디렉터리 이름, 기본값 tests')
                +tds('readonly', 'File', 'testReportDir', '{reportsDir}/{testReportDirName}')
                +tds('readonly', 'SourceSetContainer', 'sourceSets', '')
                +tds('', 'String', 'archivesBaseName', '기본값 {projectName}')
                +tds('', '', '', '')
        +asCode('gradle').
            clean {
                delete << 'src/main/tmp' // clean 작업 시 'src/main/tmp' 디렉터리도 정리
            }
                // 패키지 저장소 명시
                repositories {
                    mavenCentral()
                }
                dependencies {
                    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
                    
                    providedCompile '' // 빌드 시 사용 && 출력에 미포함
                    compile ''         // 빌드 시 사용 && 출력에 포함
                    testCompile ''     // 테스트에만 필요
                }
            

    h1.marker Gradle Wrapper; gradlew
    p Gradle이 설치되지 않았어도, 프로젝트가 필요로 하는 버전의 Gradle을 자동으로 설치해 이용한다.
