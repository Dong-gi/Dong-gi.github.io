html
    body
        script(src='/source/redirect.js?200226_1657')
        hr
        details
            summary .NET Framework 개요
            |     
            ul
                li 프레임워크
                |         제어 역전이 있는 대규모 라이브러리. 프로그램의 초기화부터 종료까지 직접 관리하며, 개발자는 일부분만 작성.
                |         
                li CLI; Common Language Infrastructure
                |         닷넷 표준 규약. 자바와 마찬가지로 CLI 사양을 준수한 구현체에서 동작하는 파일은 다른 구현체에서도 실행된다.
                |         
                ul
                    li CIL; Common Intermediate Language == IL. 중간 언어
                    |             IL은 자체 문법을 가지며 ILASM.EXE라는 전용 컴파일러도 있다.
                    |             
                    li CTS; Common Type System
                    |             닷넷 언어가 지켜야 할 타입의 표준. 전체를 구현하진 않아도 된다.
                    |             
                    li CLS; Common Language Specification
                    |             닷넷 언어가 지켜야 하는 최소 사양
                    |             
                    li 메타데이터
                    |             실행 파일(exe/dll)은 외부에서 리플렉션을 통해 접근할 수 있는 메타데이터를 제공한다.
                    |             
                    li 어셈블리
                    |             exe/dll 실행파일을 어셈블리라고 부른다.
                    |             
                    li 모듈
                    |             어셈블리는 1개 이상의 모듈로 구성되며, 하나의 모듈은 하나의 파일에 대응된다.
                    |             
                    li 매니페스트
                    |             여러 모듈이 하나의 어셈블리를 구성하는 경우, 모듈 중 하나는 모듈의 목록을 관리하는 매니페스트 데이터를 갖는다. 매니페스트를 포함하는 경우 확장자는 exe/dll, 그 외의 모듈은 보통
                    |             netmodule이지만, 일반적으로 모든 어셈블리는 1개의 파일로 구성된다.
                |         
                li 닷넷 구현체
                |         
                ul
                    li .NET Framework
                    |             CLR; Common Language Runtime + BCL; Base Class Library
                    br
                    |             CLR : CLI를 구현한 가상 머신. 중간 언어를 JIT 컴파일러를 이용해 기계어로 변환하고, GC를 운용한다.
                    |             
                    li .NET Core
                    |             CoreCLR + Core Library
                    br
                    |             윈도우, macOS, 리눅스에서 실행 가능
                    |             
                    li Mono
                    |             현재는 자마린에서 개발 중. 윈도우, macOS, 리눅스, 솔라리스, 안드로이드, 엑스박스 360 등에서 실행 가능
        hr
        details
            summary 개발 환경
            |     
            ol
                li 윈도우에는 기본적으로 닷넷 프레임워크가 설치돼있다. 또는 비주얼 스튜디오 설치 시 같이 설치된다.
                |         
                li C# 컴파일러 : C:\Windows\Microsoft.NET\...\csc.exe
                |         
                li 닷넷 역컴파일러 : .NET Reflector(유료), JustDecompile(무료) 등
                |         
                li
                    | IDE : Visual Studio, Visual Studio for Mac, Visual Studio Code, Xamarin Studio, Rider
        hr
        details
            summary 문법
            |     
            details
                summary 기본 자료형
                |         
                ul
                    li 정수형
                    |             
                    table
                        tr
                            td sbyte
                            |                     
                            td signed byte
                            |                     
                            td System.Sbyte
                        |                 
                        tr
                            td byte
                            |                     
                            td unsigned byte
                            |                     
                            td System.Byte
                        |                 
                        tr
                            td short
                            |                     
                            td signed 2bytes
                            |                     
                            td System.Int16
                        |                 
                        tr
                            td ushort
                            |                     
                            td unsigned short
                            |                     
                            td System.UInt16
                        |                 
                        tr
                            td int
                            |                     
                            td signed 4bytes
                            |                     
                            td System.Int32
                        |                 
                        tr
                            td uint
                            |                     
                            td unsigned int
                            |                     
                            td System.UInt32
                        |                 
                        tr
                            td long
                            |                     
                            td signed 8bytes
                            |                     
                            td System.Int64
                        |                 
                        tr
                            td ulong
                            |                     
                            td unsigned long
                            |                     
                            td System.UInt64
                    |             
                    li 실수형
                    |             
                    table
                        tr
                            td float
                            |                     
                            td 4바이트. 리터럴 접미사 f
                            |                     
                            td System.Single
                        |                 
                        tr
                            td double
                            |                     
                            td 8바이트
                            |                     
                            td System.Double
                        |                 
                        tr
                            td decimal
                            |                     
                            td 16바이트. 리터럴 접미사 m
                            |                     
                            td System.Decimal
                    |             
                    li 숫자 리터럴
                    |             16진수 표현 0xFFFF, 2진수 표현 0b1010, 구분 문자 '_' 사용 가능
                    |             
                    li 문자형
                    |             
                    table
                        tr
                            td char
                            |                     
                            td 2바이트(유니코드)
                            |                     
                            td System.Char
                        |                 
                        tr
                            td string
                            |                     
                            td 동적 크기. Indexer 구현
                            |                     
                            td System.String
                    |             
                    li 문자열 리터럴
                    |             
                    ul
                        li @"" : \ 이스케이프를 하지 않는다. ""로 일반 문자열의 \"를 대신할 수 있다
                        |                 
                        li
                            | $"" Since C# 6 : 간편한 포맷 문자열을 제공한다. {
                            i 표현식
                            | [, 
                            i alignment
                            | ][: 
                            i formatString
                            | ]}
                            |                     
                            button.btn-code(path='Repositories/VisualStudio/csharp_interpolated_string.cs', lan='java') 예시 코드 »
                        |                 
                        li Since C# 8 : @$"", $@"" 모두 유효. 이전에는 $@""만 가능
                    |             
                    li Boolean
                    |             
                    table
                        tr
                            td bool
                            |                     
                            td true or false
                            |                     
                            td System.Boolean
                    |             
                    li Boolean 연산 &&, ||는 Short-circuit
            |     
            details
                summary 배열
                |         
                ul
                    li 배열 초기화시 기본값으로 채워진다.
                    |             
                    li 다차원 배열 [,] : 배열 차원 고정. 메모리 상에서는 일차원 배열처럼 존재.
                    |             
                    li Jagged Array [][] : 배열의 차원이 가변적
                    pre.
                        \nint[] arr1 = new int[3];
                        int[] arr2 = new int[] { 1, 2, 3 };
                        int[] arr3 = { 1, 2, 3 };
                        int[,] arr4 = new int[2, 2];
                        int[,] arr5 = new int[,] { { 1, 2 }, { 3, 4 } };            
            |     
            details
                summary 형변환
                |         
                ul
                    li 암시적 형변환 : 보다 큰 정의의 자료형으로 자동 변환.
                    |             Boxing : Value type 데이터를 Reference type으로 변환. 컴파일러가 묵시적으로 수행.
                    |             
                    li 명시적 변환 : 괄호 이용.
                    |             Unboxing : Reference type 데이터를 Value type으로 변환. 캐스팅을 통해 명시적으로 수행.
                    |             
                    li if (o is Mammal m) { }
                    |             
                    li as 연산자를 이용한 명시적 변환은, null을 허용하는 참조 자료형만 가능하다.
            |     
            details
                summary 구문
                |         
                ul
                    li if ~ else if ~ else
                    |             
                    li switch
                    |             정수, bool, char, string, enum에 대해 동작. case문 다음이 빈 문장일 때만 break 생략 가능
                    br
                    |             Since C# 7.0 : null이 아닌 모든 표현식 가능
                    |             
                    li while, do ~ while
                    |             
                    li for(초기식; 조건식; 증감식)
                    |             
                    li foreach(var obj in IEnumerable)
                    |             
                    li 점프
                    |             break, continue, goto(관례상 레이블은 대문자로만), return, throw
                    |             
                    li checked/unchecked 블록
                    |             기본적으로는 프로그램 실행 시 오버플로/언더플로를 무시한다.
                    br
                    |             checked/unchecked 블록은 이를 각각 명시적인 예외로 처리/비처리 하도록 한다.
                    |             
                    button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/CheckedExample.cs', displayrange='[13, 39]', lan='cs') 예시 코드 »
                    |             
                    li 예외 처리
                    pre.
                        \nthrow e; // e는 System.Exception 및 파생 클래스의 인스턴스
                        try {} catch {} finally {}
                        try {} catch (ExceptionType) {}
                        try {} catch { throw; }
                        try {} catch (ExceptionType e) {}
                        try {} catch () when (!filePath.Contains(".tmp")) {} // when 필터를 사용하는 경우, 같은 타입을 여러 번 catch 가능
                        try {} finally { iDisposable.Dispose(); } // 다음과 동일 : using(var iDisposable = ~) { }
                                                
            |     
            details
                summary 네임스페이스
                pre.
                    \nnamespace MyProgram.Model { }
                    using System.Collections.Generic;
                    using static MyProgram.Model.Constants;          
        hr
        details
            summary 객체지향
            |     
            details
                summary 클래스
                |         
                ul
                    li
                        | 프로퍼티 → (히든) 필드에 대한 getter/setter 메서드
                        button.btn-code(path='Repositories/VisualStudio/csharp_property.cs', lan='java') ViewModel에서의 사용 예 »
                    |             
                    li 익명 객체 → new { PropertyName = value } : 생성 후 읽기만 가능
                    |             
                    li 정적 생성자 → static 클래스이름() { }
                    |             첫 번째 인스턴스가 만들어지거나 정적 멤버가 참조되기 전에 자동으로 호출된다.
                    |             
                    li partial class ClassName {} : 프로젝트 내 여러 파일에 걸쳐 클래스 작성 가능
                    |             
                    li
                        | 접근 제한자 → public, protected(파생 클래스까지), private, internal(같은 어셈블리), protected internal
                    |             
                    li 상속
                    |             
                    ul
                        li class SubClass : BaseClass
                        |                 
                        li is 연산자로 호환 여부 확인 가능
                        |                 
                        li
                            | this 키워드 : 클래스의 현재 인스턴스
                            br
                            |                     base 키워드 : 부모 클래스 메서드 또는 생성자 호출
                            |                     
                            button.btn-code(path='Repositories/VisualStudio/csharp_base_keyword.cs', lan='java') 예 »
                        |                 
                        li sealed 키워드 → 상속/재정의 불가
                        |                 
                        li 부모 클래스 인스턴스를 자식 클래스로 다운캐스팅 불가.
                        |                 
                        li
                            | 모든 자료형의 조상은 System.Object : ToString(), GetType(), Equals(), GetHashCode()
                            br
                            |                     모든 값 형식의 조상은 System.ValueType
                            br
                            |                     모든 배열의 조상은 System.Array : Sort(), BinarySearch<T>(), IndexOf(), ..., Length, Rank
                    |             
                    li 다형성
                    |             
                    ul
                        li virtual, override 키워드를 사용해 명시한다. virtual 메서드는 body를 정의해야 한다.
                        |                 
                        li new : 부모 메서드 숨기기. override와 달리 형 변환을 통해 부모 메서드에 접근 가능.
                        |                 
                        li
                            | abstract class : 인스턴스화 불가능
                            br
                            |                     abstract method : 서브 클래스에서 반드시 override
                        |                 
                        li 연산자 오버로딩
                        |                 public static 반환타입 operator 연산자(타입1 변수1, 타입2 변수2) {}
                        |                 
                        li 형 변환 정의
                        pre.
                            \npublic static implicit operator 타입2(타입1 변수1) {};
                            public static explicit operator 타입2(타입1 변수1) {};              
            |     
            details
                summary 델리게이트
                |         
                ul
                    li
                        | 메서드를 참조하는 자료형
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/DelegateExample.cs', displayrange='[12, 47]', lan='cs') 예시 »
                    |             
                    li 델리게이트로 변환될 수 있는 익명 메서드 생성
                    |             
                    ol
                        li delegate 연산자 → delegate (int a, int b) { return a + b; }
                        |                 
                        li 람다 Since C# 3 → (a, b) => a + b;
                    |             
                    li 델리게이트에는 BeginInvoke 및 EndInvoke 메서드가 자동으로 추가되며, 이를 통해 임의 메서드를 비동기 호출할 수 있다
                    |             
                    button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/DelegateExample.cs', displayrange='[12, 22, 49, 64]', lan='cs') 비동기 호출 예 »
                    |             
                    button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/DelegateExample.cs', displayrange='[12, 22, 66, 86]', lan='cs') 비동기 호출 대기 예 »
                    |             
                    li 델리게이트 체인
                    |             myDelegate += obj.Func;
                    br
                    |             myDelegate -= obj.Func;
                    |             
                    li Func
                    |             결과를 반환하는 메서드를 참조하는, 미리 정의된 델리게이트. 매개변수 0 ~ 16개, 총 17가지.
                    |             
                    li Action
                    |             void 리턴 메서드를 참조하는, 미리 정의된 델리게이트. 매개변수 0 ~ 16개, 총 17가지.
                    |             
                    li 이벤트
                    |             
                    ol
                        li 일반화된 델리게이트. 간단하게 구독/해지 가능. 클래스 밖에서 호출 불가.
                        |                 
                        li 이벤트의 첫 번째 인자는 이벤트 발생 객체. 두 번째 인자는 EventArgs 호환 객체.
                        |                 
                        li
                            | public event EventHandler SomeEvent = delegate { };
                            button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/EventExample.cs', lan='cs') 예시 코드 »
            |     
            details
                summary 인터페이스
                |         
                ol
                    li 인터페이스도 프로퍼티를 가질 수 있다(get/set 지정만 가능). 구현하는 클래스에서 프로퍼티를 구현한다.
                    |             
                    li class SubClass : BaseClass, Interface1, Interface2, ...
                    |             
                    li interface Interface1 : Interface2
            |     
            details
                summary 구조체 struct
                |         
                ol
                    li 사용자 정의 ValueType.
                    |             
                    li ValueType이므로 생성자 호출 없이 선언만으로 초기화가 진행된다. 사용되는 기본 생성자는 컴파일러가 자동으로 추가하며, 재정의할 수 없다.
                    |             
                    li
                        | 모든 타입은 Object의 파생 클래스이므로, 구조체도 new 키워드로 인스턴스를 생성할 수 있다. 인자를 받는 생성자는 모든 필드를 초기화해야 한다.
                    |             
                    li ValueType이므로 할당 시 깊은 복사가 이루어진다.
            |     
            details
                summary 열거형 enum
                |         
                ol
                    li 정수형을 상속받아 정의할 수 있는 ValueType. 기본 int
                    |             
                    li [Flags] // 열거형을 비트필드로 이용하는 애트리뷰트
                    pre.
                        \n[Flags] enum Authority { READ = 1, WRITE = 2, EXECUTE = 4 }
                        var authority = READ | WRITE;
                        Console.WriteLine(authority.HasFlag(WRITE));            
            |     
            details
                summary 제네릭
                |         
                ul
                    li Generic Method
                    |             public void Write<T>(T value) => OnWrite(value?.ToString() ?? "");
                    |             
                    li Generic Class
                    |             public class List<T> : IList<T>, ICollection<T>, IEnumerable<T>, (생략)
                    |             
                    li Type Bound
                    |             
                    ol
                        li where T : struct // 값 형식
                        |                 
                        li where T : class // 참조 형식
                        |                 
                        li where T : new() // 기본 생성자 보유
                        |                 
                        li where T : BaseClassName | InterfaceName | U // 호환 여부 검사. U는 다른 형식 매개 변수
                        |                 
                        li where T : A[, B[, C[...]]]
                        |                 class MyGenereic<T, U> where T : struct where U : class { }
                    |             
                    li 제네릭 별명
                    |             using Commands = System.Collections.Generic.Dictionary<string, System.Windows.Input.ICommand>;
        hr
        details
            summary 추가 기능 ~ C# 8.0 (2019. 02. 12)
            |     
            details
                summary 타입
                |         
                ol
                    li BigInteger : 크기 제한없는 정수. 연산자 오버로딩 덕에 편리
                    |             
                    li dynamic : 파이썬처럼 타입 검사를 런타임에 하여 Duck-typing을 가능하게 한다.
                    |             
                    li IntPtr : 32/64비트 프로그램에서 각각 4/8바이트. 포인터 외에 운영체제 핸들값을 저장하는 용도로도 사용.
                    |             
                    li var : 지역변수 초기화시 사용 가능한 자동형식
                    |             
                    li Nullable<T> : null을 허용하는 래퍼 클래스. int?는 Nullable<int>와 동일하다.
                |         
                details
                    summary 튜플 : System.ValueTuple
                    |             
                    ul
                        li 익명 튜플 : 멤버의 기본 이름은 Item1, Item2, ...
                        |                 var unnamed = ("one", "two");
                        |                 
                        li 명명 튜플 : 컴파일하면 멤버명은 Item*으로 변경된다
                        |                 var named = (first: "one", second: "two");
                        |                 
                        li 튜플 프로젝션 이니셜라이저 : 변수명을 자동으로 요소 이름으로 사용
                        |                 var accumulation = (count, sum);
                        |                 
                        li Since C# 7.3 ==, != 연산자 지원(short-circuit)
                        |                 
                        ul
                            li Nullable인 튜플이나 멤버에 대해 자동으로 변환을 수행한다
                            pre.
                                \nvar left = (a: 5, b: 10);
                                var right = (a: 5, b: 10);
                                (int a, int b)? nullableTuple = right;
                                Console.WriteLine(left == nullableTuple); // true                
                            pre.
                                \nvar left = (a: 5, b: 10);
                                (int? a, int? b) nullableMembers = (5, 10);
                                Console.WriteLine(left == nullableMembers); // true                
                            |                     
                            li 튜플 멤버에 대한 암시적 변환을 수행한다
                            pre.
                                \n(long a, int b) longFirst = (5, 10);
                                (int a, long b) longSecond = (5, 10);
                                Console.WriteLine(longFirst == longSecond); // true                
                        |                 
                        li 메서드 튜플 반환
                        pre.
                            \nstatic (int Count, double Sum, double SumOfSquares) ComputeSumAndSumOfSquares(IEnumerable<double> sequence) { }
                            static (int, double, double) ComputeSumAndSumOfSquares(IEnumerable<double> sequence) { }
                            
                            (int count, double sum, double sumOfSquares) = ComputeSumAndSumOfSquares(sequence);
                            (int count, var sum, var sumOfSquares) = ComputeSumAndSumOfSquares(sequence);
                            var (count, sum, sumOfSquares) = ComputeSumAndSumOfSquares(sequence);
                            var result = ComputeSumAndSumOfSquares(sequence);              
                        |                 
                        li 메서드 튜플 매개변수
                        pre.
                            \npublic void Print((int Count, double Sum, double SumOfSquares) data) { }
                            public void Print((int, double, double) data) { }              
                        |                 
                        li out 매개변수 튜플
                        pre.
                            \nvar dict = new Dictionary<int, (int, string)>();
                            dict.TryGetValue(2, out (int num, string place) pair);              
                        |                 
                        li 튜플 분해
                        pre.
                            \npublic class Rectangle
                            {
                                    public int X { get; set; }
                                    public int Y { get; set; }
                                    public int Width { get; set; }
                                    public int Height { get; set; }
                                    public void Deconstruct(out int x, out int y, out int width, out int height)
                                            => (x, y, width, height) = (X, Y, Width, Height);
                            }
                            
                            // 또는 다른 형식에 대한 확장 메서드를 작성하여 분해를 지원할 수 있다
                            public static void Deconstruct(this Rectangle rect, out int x, out int y, out int width, out int height)
                                    => (x, y, width, height) = (rect.X, rect.Y, rect.Width, rect.Height);
                            
                            var rect = new Rectangle(1, 2, 3, 4);
                            var (_, _, w, h) = rect;              
            |     
            details
                summary 연산자
                |         
                ul
                    li await : 피연산자가 나타내는 비동기 작업이 완료될 때까지 바깥쪽 비동기 메서드의 평가를 일시 중단
                    |             
                    li default(Type) : 타입에 대한 기본값/인스턴스 반환한다.
                    |             Since C# 7.1 : default 리터럴로 기본값을 표현할 수 있다.
                    |             
                    li nameof(Identifier) : 식별자 문자열 반환
                    |             
                    li
                        | Null 조건부 연산자 ?. 및 ?[]
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/NullableExample.cs', lan='cs') 예 »
                    |             
                    ul
                        li 피연산자가 null이 아니면 멤버 액세스 ?. 또는 요소 액세스 ?[] 연산을 적용한다.
                        |                 
                        li null이면 그대로 null 반환
                        |                 
                        li null 조건부 연산자를 연쇄적으로 이용할 때, 중간에서 null이 반환된 경우, 나머지는 처리되지 않는다.
                    |             
                    li
                        | stackalloc : 값 형식의 배열을 스택에 할당한다. fixed 문으로 고정하지 않아도 된다. 메서드 반환 시 자동 삭제된다; 임의 해제 불가
                    pre.
                        \nint* numbers = stackalloc int[100]; // 포인터는 unsafe 컨텍스트를 사용해야 한다
                        Span<int> numbers = stackalloc int[100]; // Since C# 7.2 : Span, ReadOnlySpan에 할당 가능
                        var idx = numbers.IndexOfAny(stackalloc[] { 1, 2, 3, 4 }); // Since C# 8.0 : 다른 식 내부에서 stackalloc 사용 가능            
                    |             
                    li ?? 연산자 : 좌측 피연산자가 null이면 우측 피연산자를 반환
                    |             
                    li ??= 연산자 Since C# 8.0 : 왼쪽 피연산자가 null로 평가되는 경우, 오른쪽 피연산자의 값을 대입
                    |             
                    li ^ 연산자 Since C# 8.0 : 끝부터 시작하는 인덱스
                    pre.
                        \n// 시퀀스 길이가 length인 경우, ^1은 마지막 요소, ^length는 첫번째 요소, ^n은 length - n번째 요소
                        int[] xs = new[] { 0, 10, 20, 30, 40 };
                        int last = xs[^1];            
                    |             
                    li 범위 연산자 .. Since C# 8.0 : start..end // [start, end)
                    |             
                    ul
                        li a.. == a..^0
                        |                 
                        li ..b == 0..b
                        |                 
                        li .. == 0..^0
                    pre.
                        \nConsole.WriteLine($"The last word is {words[^1]}");
                        var lazyDog = words[^2..^0];
                        var allWords = words[..]; // contains "The" through "dog".
                        var firstPhrase = words[..4]; // contains "The" through "fox"
                        var lastPhrase = words[6..]; // contains "the, "lazy" and "dog"
                        
                        Range phrase = 1..4;
                        var text = words[phrase];            
            |     
            details
                summary 한정자
                |         
                ul
                    li async : 메서드, 람다식, 익명 메서드(delegate 연산자)를 비동기로 지정.
                    |             
                    ul
                        li
                            | void 리턴 : await할 수 없으며, 따라서 예외를 catch할 수 없다
                            br
                        li Task, Task<TResult> : await 가능
                        |                 
                        li Since C# 7.0 : 액세스 가능한 GetAwaiter() 메서드가 있는 모든 형식 리턴 가능
                        |                 System.Threading.Tasks.ValueTask<TResult>은 패키지 System.Threading.Tasks.Extensions가 제공하는 구현
                    |             
                    li private protected : 동일 어셈블리 내의 클래스 및 파생 클래스에서 엑세스 가능
                    |             
                    li ref 매개변수 : 참조 전달. 호출자 스코프의 변수를 그대로 사용하는 효과. 참조가 존재하기 위해 호출 전에 초기화 필요
                    |             void Method(ref int refArgument)
                    |             
                    li
                        | ref 반환 : 참조 반환
                        br
                        |                 ref 지역 변수 : ref 반환값으로 초기화되는 지역 변수
                        br
                        |                 Since C# 7.3 : foreach 반복 변수는 ref 또는 ref readonly 지역 변수일 수 있다
                        br
                        |                 ref readonly 반환 : 반환된 참조에 대한 쓰기는 비허용
                    pre.
                        \npublic ref decimal GetCurrentPrice() {
                                // ...
                                return ref DecimalArray[0];
                        }
                        ref decimal estValue = ref GetCurrentPrice();
                        ref decimal copyValue = ref estValue;            
                    |             
                    li in 매개변수 : 참조 전달. 메서드에서 수정 불가
                    |             
                    li out 매개변수 : 참조 전달. 호출 전에 초기화되지 않아도 되지만, 반환 전에 할당돼야 한다
                    pre.
                        \n// 선언과 동시에 out 매개변수로 사용 가능
                        int.TryParse("12", out var result);
                        int.TryParse("21", out var _); // 출력 무시            
                    |             
                    li
                        | ref struct : 스택에 할당되는 struct. 클래스의 멤버가 될 수 없다. 인터페이스를 구현할 수 없다
                        br
                        |                 readonly struct : 모든 필드가 readonly인 struct
                    |             
                    li unsafe : unsafe로 한정한 타입, 메서드, 블록에서는 포인터를 사용할 수 있다.
                    |             컴파일 시 -unsafe 옵션을 지정해야 한다 : 비주얼 스튜디오는 "프로젝트 속성 - 빌드 - 안전하지 않은 코드 허용"
                    br
                    |             관련 클래스 : System.Runtime.InteropServices.Marshal
            |     
            details
                summary 메서드
                |         
                ol
                    li 매개변수 명시 : Divide(a: 10, b: 3, q: out q, r: out r);
                    |             
                    li 선택적 매개변수 : Method(int a = 0, int b = 0) {}
                    |             
                    li
                        | 가변 길이 매개변수 params 
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/ParamsExample.cs', displayrange='[11, 17]', lan='cs') 예 »
                    |             
                    li
                        | 확장 메서드 : 기존 클래스에 static method 추가됨.
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/ExtensionExample.cs', lan='cs') 예 »
                    |             
                    li 람다 식 사용 확장 : 생성자, 소멸자, 이벤트 add/remove, 속성 set, 인덱서 set
                    |             
                    li 메서드 안에 지역 함수 정의 가능
                    |             static 지역 함수로 선언하면 외부 변수 참조 불가
                    |             
                    li extern 메서드 : 메서드의 body가 없어도 컴파일 되도록 한다.
                    |             호출할 메서드가 있는 dll을 [DllImport] Attribute로 지정해주면 해당 메서드를 호출한다. http://www.pinvoke.net/
                    |             
                    li Caller information
                    pre.
                        \nstatic void Log(string text,
                                                        [CalleMemberName] string memberName = "",
                                                        [CallerFilePath] string filePath = "",
                                                        [CallerLineNumber] int lineNumber = 0) { }            
                    |             
                    li Main 메서드에 async 허용
            |     
            details
                summary 구문
                |         
                ol
                    li
                        | 인덱서 구문 : 하나 이상의 인수로 참조되는 속성을 반환. string, List<T> 등은 인덱서를 구현함. 
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/IndexerExample.cs', lan='cs') 예 »
                    |             
                    li switch case 필터 Since C# 7.0
                    pre.
                        \nswitch(item) {
                                case 100:
                                case null:
                                case DateTime dt:
                                case int i when i > 300:
                                case var i when i.어쩌구저쩌구():
                        }            
                    |             
                    li 전처리 지시문 #define, #undef, #if, #elif, #else, #endif, ..., #region, #endregion
                    |             
                    li fixed 문 : unsafe 컨텍스트에서, GC가 변수를 재배치하지 않도록 하여 포인터의 유효함을 보장한다
                |         
                details
                    summary yield 반복기
                    pre.
                        \npublic static IEnumerable<int> InfiniteSeries(int limit) {
                                var num = 0;
                                if(num <= limit)
                                        yield return ++start;
                                yield break;
                        }
                        
                        public class Galaxies
                        {
                                public IEnumerable<Galaxy> NextGalaxy
                                {
                                        get
                                        {
                                                yield return new Galaxy { Name = "Tadpole", MegaLightYears = 400 };
                                                yield return new Galaxy { Name = "Pinwheel", MegaLightYears = 25 };
                                                yield return new Galaxy { Name = "Milky Way", MegaLightYears = 0 };
                                                yield return new Galaxy { Name = "Andromeda", MegaLightYears = 3 };
                                        }
                                }
                        }            
                |         
                details
                    summary LINQ; Language INtegrated Query
                    |             
                    ol
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/LinqExample.cs', lan='cs') 예시 »
                        |                 
                        li MoreLinq 패키지에서 추가적인 편의성을 제공한다.
                        |                 
                        li from : LINQ query는 from으로 시작한다. from의 대상은 IEnumarable<T>
                        |                 LINQ query 결과도 IEnumerable<T>
                        |                 
                        li where + bool 판정식
                        |                 
                        li orderby + 정렬 기준 [(ascending) | descending]
                        |                 
                        li select + 결과
                        pre.
                            \nfrom mQuest in Get<MQuest>()
                            where mQuest.quest_group_id.Equals(mQuestGroup.quest_group_id)
                            orderby mQuest.quest_name
                            select mQuest              
                        |                 
                        li let : LINQ 내에서의 변수 선언; let x = 10
                        |                 
                        li 중첩 질의
                        pre.
                            \nfrom student in students
                            from score in student.Scores              
                        |                 
                        li Grouping : 결과는 IGrouping<T> 형식
                        pre.
                            \nfrom p in profiles
                            group p by p.Height < 160 into lowGroup
                            select new { Key = lowGroup.Key, Profiles = lowGroup };              
                        |                 
                        li Inner Join
                        pre.
                            \nfrom a in A
                            join b in B on a.X equals b.Y              
                        |                 
                        li Outer Join : inner join 결과를 임시 컬렉션으로 치환하고, 임시 컬렉션의 빈 항목을 기본 값으로
                        pre.
                            \nfrom profile in profiles
                            join product in products on profile.Name equals product.Name into result
                            from product in result.DefaultIfEmpty( new Product() { Title = "없음” } )
                            select new { Name = profile.Name, Work = product.Title };              
                        |                 
                        li Expression Tree : System.Linq.Expressions
                        pre.
                            \nvar const1 = Expression.Constant(1);
                            var param1 = Expression.Parameter(typeof(int), "x");
                            var exp = Expression.Add(const1, param1);
                            var lambda = Expression<Func<int, int>>.Lambda<Func<int, int>>(exp, new ParameterExpression[] { (ParameterExpression)param1 });
                            var compiledFunc = lambda.Compile();
                            Console.WriteLine(compiledFunc(3));              
            |     
            details
                summary Attribute
                |         
                ol
                    li
                        | 자바의 애너테이션처럼 요소를 장식한다.
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/AttributeExample.cs', lan='cs') AttributeExample.cs 전체 코드 »
                    |                 
                    li
                        | 사용자 정의 특성은 System.Attribute를 상속하여 만든다.
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/AttributeExample.cs', displayrange='[12, 19]', lan='cs') 예 »
                    |                 
                    li
                        | 명명시 Attribute를 접미하고, 실제 사용할 땐 생략 가능하다.
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/AttributeExample.cs', displayrange='[21, 24]', lan='cs') 예 »
                    |                 
                    li
                        | 특성 적용 대상 제한 : System.AttributeUsage 생성자에 AttributeTargets 전달. 생략시 기본값은 AttributeTargets.All
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/AttributeExample.cs', displayrange='[12, 13]', lan='cs') 예 »
                    |                 
                    li
                        | 적용 대상 명시 : assembly, module, type, method, property, field, event, param, return, typevar
                        button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/AttributeExample.cs', displayrange='[23, 24]', lan='cs') 예 »
            |     
            details
                summary App.config
                |         
                ol
                    li supportedRuntime
                    |             실행에 필요한 닷넷 버전 지정. 비주얼 스튜디오가 자동으로 추가해주는듯
                    |             
                    button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/App.config', lan='xml') App.config »
                    |             
                    li appSettings
                    |             
                    button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/App.config', lan='xml') App.config »
                    |             
                    button.btn-code(path='Repositories/VisualStudio/CSharp/Basic/Program.cs', lan='cs') Program.cs »
            |     
            details
                summary 디버그 모드
                |         
                ol
                    li 전처리 상수 #if DEBUG ... #endif
                    |             
                    li [Conditional("DEBUG")] 적용된 클래스, 메서드는 릴리스 빌드 시 포함되지 않는다
                    |             
                    li System.Diagnostics.Debug.WriteLine() : 디버그 출력
            |     
            details
                summary Reflection 리플렉션
                |         
                ul
                    li AppDomain → Assembly ← Module ← Type
                    |             AppDomain : EXE 프로세스 내에서 CLR에 의해 구현된 격리 공간. 최초 실행 시 기본적으로 1개 생성(AppDomain.CurrentDomain).
                    |             static 멤버들은 AppDomain 안에서 유일하다. 프로세스의 여러 AppDomain에서 동일한 클래스를 로드했다면 static 멤버들은 각 도메인마다 하나씩 존재
                    pre.
                        \nvar appDomain = AppDomain.CreateDomain("MyDomain");
                        ObjectHandle handle = appDomain.CreateInstanceFrom(dllPath, "Namespace.ClassName");
                        ...
                        AppDomain.Unload(appDomain);            
                    |             
                    li Object.getType() or typeof 연산자
                    |             
                    li Type :: GetConstructors(), GetEvents(), GetFields(), GetMethods(), ...
                    |             
                    li 동적 생성 : System.Activator.CreateInstance(Type);
                    |             
                    li 동적 타입 정의 : System.Reflection.Emit
                    |             
                    ol
                        li System.AppDomain.DefineDynamicAssembly()로 AssemblyBuilder 객체 획득
                        |                 
                        li AssemblyBuilder.DefineDynamicModule()로 ModuleBuilder 획득
                        |                 
                        li ModuleBuilder.DefineType()으로 클래스 생성(TypeBuilder)
                        |                 
                        li TypeBuilder.DefineMethod()로 MethodBuilder 획득
                        |                 
                        li MethodBuilder.GetILGenerator()로 ILGenerator 객체 획득
                        |                 
                        li ILGenerator.Emit()으로 메서드 내용 추가
                        |                 
                        li TypeBuilder.CrateType()으로 인스턴스 생성 가능
            |     
            details
                summary 재귀 패턴 매칭 Since C# 8.0
                pre.
                    \nint? x = null;
                    if (x is int n1)
                            Console.WriteLine(n1);
                    else
                            Console.WriteLine("Not a int");
                    
                    x = 3;
                    if (x is int n2)
                            Console.WriteLine(n2);          
                pre.
                    \nvar (a, b) = (1, 2);
                    switch(a, b)
                    {
                            case (0, _):
                                    Console.WriteLine("a is 0");
                                    break;
                            case (1, _):
                                    Console.WriteLine("a is 1");
                                    break;
                    }          
                pre.
                    \npublic static bool IsComplete(int n) =>
                            n switch
                            {
                                    6 => true,
                                    28 => true,
                                    496 => true,
                                    8128 => true,
                                    33550336 => true,
                                    _ => false
                            };          
                pre.
                    \npublic static bool IsComplete(int n) =>
                            n switch
                            {
                                    int x when new int[] { 6, 28, 496, 8128, 33550336 }.Contains(x) => true,
                                    _ => false
                            };          
                pre.
                    \nvar newState = (GetState(), action, hasKey) switch {
                            (DoorState.Closed, Action.Open, _) => DoorState.Opened,
                            (DoorState.Opened, Action.Close, _) => DoorState.Closed,
                            (DoorState.Closed, Action.Lock, true) => DoorState.Locked,
                            (DoorState.Locked, Action.Unlock, true) => DoorState.Closed,
                            (var state, _, _) => state };          
                pre.
                    \nvar msg = "Hello";
                    if (msg is string { Length: 5 } five)
                            Console.WriteLine($"Right. {msg} is a 5 length string");          
                pre.
                    \npublic static decimal ComputeSalesTax(Address location, decimal salePrice) =>
                            location switch {
                                    { State: "WA" } => salePrice * 0.06M,
                                    { State: "MI" } => salePrice * 0.05M,
                                    _ => 0M
                            };          
                pre.
                    \nstatic Quadrant GetQuadrant(Point point) => point switch {
                                    (0, 0) => Quadrant.Origin,
                                    var (x, y) when x > 0 && y > 0 => Quadrant.One,
                                    var (x, y) when x < 0 && y > 0 => Quadrant.Two,
                                    var (x, y) when x < 0 && y < 0 => Quadrant.Three,
                                    var (x, y) when x > 0 && y < 0 => Quadrant.Four,
                                    var (_, _) => Quadrant.OnBorder,
                                    _ => Quadrant.Unknown
                            };          
        hr
        details
            summary .NET 정규표현식
            |     
            ul
                | Java와 동일한 부분은 생략
                li \nn 또는 \nnn : 8진수 ASCII
                |         
                li \w : \p{L} | \p{Mn} | \p{Nd} | \p{Pc}
                |         
                li \Z : \z | (?=\n)
                |         
                li (?<name>X) == (?'name'X)
                |         
                ul
                    li \k'name'역참조 가능. replace에서 ${name}참조 가능, GroupCollection의 인덱서로 참조 가능
                    |             
                    li 그룹 오버로딩 가능 : (?<1>a)(?<1>\1b) // 스택처럼 정의가 쌓이며 '-name'으로 가장 최근 정의 삭제 가능
                |         
                li 균형 조정 그룹; Balancing group
                |         
                ul
                    li (?<name1-name2>X) == (?'name1-name2'X)
                    |             name1은 현재 그룹(Optional)이고, name2는 이전에 정의된 그룹. 균형 조정 그룹은 마지막(백트래킹) name2 정의를 삭제하고, name1에 name2와 name1 사이 간격을 저장한다.
                    pre.
                        \nvar html = "<html><body>Hello<p>World</p>olleH</body></html>Plain Text<script>console.log('hello world');</script>Plain Text<yes>Text</no>";
                        Console.WriteLine($"All text : {html}");
                        foreach (Match match in Regex.Matches(html, @"<(?'tag'\w+)>(.(?<!</\k<tag>>))*(?'-tag'</\k<tag>>)", RegexOptions.IgnoreCase))
                                Console.WriteLine($"HTML part : {match.Groups[0]}");
                        
                        // All text : <html><body>Hello<p>World</p>olleH</body></html>Plain Text<script>console.log('hello world');</script>Plain Text<yes>Text</no>
                        // HTML part : <html><body>Hello<p>World</p>olleH</body></html>
                        // HTML part : <script>console.log('hello world');</script>
                                                
                |         
                li 옵션
                |         
                ul
                    li (?imnsx-imnsx:X) // X 내에 옵션 적용/비적용. 이 자체는 캡처링 그룹이 아님
                    |             
                    li (?imnsx-imnsx) // 이후 식에 옵션 적용/비적용
                    |             
                    li System.Text.RegularExpressions.RegexOptions // Regex 생성자 또는 정적 메서드에 전체 옵션 지정
                    |             
                    table
                        tr
                            td IgnoreCase
                            td i
                            td 대소문자 구별X
                        |                 
                        tr
                            td Multiline
                            td m
                            td ^, $이 \n에서도 동작
                        |                 
                        tr
                            td ExplicitCapture
                            td n
                            td 명명된 캡처링 그룹만 유효
                        |                 
                        tr
                            td Singleline
                            td s
                            td .이 \n포함
                        |                 
                        tr
                            td IgnorePatternWhitespace
                            td x
                            td 이스케이프되지 않은 공백을 패턴에서 제거하고 주석을 #으로 표시 가능
                        |                 
                        tr
                            td Compiled
                            td
                            td 어셈블리로 컴파일
                        |                 
                        tr
                            td RightToLeft
                            td
                            td 우→좌 검색
                        |                 
                        tr
                            td ECMAScript
                            td
                            td
                        |                 
                        tr
                            td CultureInvariant
                            td
                            td
                        |                 
                        tr
                            td None
                            td
                            td 옵션 없음 명시
                |         
                li (?>X) : Non-backtracking
                |         
                li Replace 구문
                |         
                ul
                    li $n, ${name} : 캡처링 그룹
                    |             
                    li $& : 전체 매칭 문자열
                    |             
                    li $` : 매칭 문자열 앞부분
                    |             
                    li $' : 매칭 문자열 뒷부분
                    |             
                    li $+ : 마지막 캡처링 그룹
                    |             
                    li $_ : 전체 입력 문자열
                |         
                li 인라인 주석 : (?#comment)
            |     
            details
                summary 지원 Unicode class : \p{name} ↔ \P{name}
                |         
                table
                    tr
                        th Category
                        th Description
                    |             
                    tr
                        td Lu
                        td Letter, Uppercase
                    |             
                    tr
                        td Ll
                        td Letter, Lowercase
                    |             
                    tr
                        td Lt
                        td Letter, Titlecase
                    |             
                    tr
                        td Lm
                        td Letter, Modifier
                    |             
                    tr
                        td Lo
                        td Letter, Other
                    |             
                    tr
                        td L
                        td Lu + Ll + Lt + Lm + Lo
                    |             
                    tr
                        td Mn
                        td Mark, Nonspacing
                    |             
                    tr
                        td Mc
                        td Mark, Spacing Combining
                    |             
                    tr
                        td Me
                        td Mark, Enclosing
                    |             
                    tr
                        td M
                        td Mn + Mc + Me
                    |             
                    tr
                        td Nd
                        td Number, Decimal Digit
                    |             
                    tr
                        td Nl
                        td Number, Letter
                    |             
                    tr
                        td No
                        td Number, Other
                    |             
                    tr
                        td N
                        td Nd + Nl + No
                    |             
                    tr
                        td Pc
                        td Punctuation, Connector
                    |             
                    tr
                        td Pd
                        td Punctuation, Dash
                    |             
                    tr
                        td Ps
                        td Punctuation, Start[Open]
                    |             
                    tr
                        td Pe
                        td Punctuation, End[Close]
                    |             
                    tr
                        td Pi
                        td Punctuation, Initial quote
                    |             
                    tr
                        td Pf
                        td Punctuation, Final quote
                    |             
                    tr
                        td Po
                        td Punctuation, Other
                    |             
                    tr
                        td P
                        td Pc + Pd + Ps + Pe + Pi + Pf + Po
                    |             
                    tr
                        td Sm
                        td Symbol, Math
                    |             
                    tr
                        td Sc
                        td Symbol, Currency
                    |             
                    tr
                        td Sk
                        td Symbol, Modifier
                    |             
                    tr
                        td So
                        td Symbol, Other
                    |             
                    tr
                        td S
                        td Sm + Sc + Sk + So
                    |             
                    tr
                        td Zs
                        td Separator, Space
                    |             
                    tr
                        td Zl
                        td Separator, Line
                    |             
                    tr
                        td Zp
                        td Separator, Paragraph
                    |             
                    tr
                        td Z
                        td Zs + Zl + Zp
                    |             
                    tr
                        td Cc
                        td Other, Control
                    |             
                    tr
                        td Cf
                        td Other, Format
                    |             
                    tr
                        td Cs
                        td Other, Surrogate
                    |             
                    tr
                        td Co
                        td Other, Private Use
                    |             
                    tr
                        td Cn
                        td Other, Not Assigned
                    |             
                    tr
                        td C
                        td Cc + Cf + Cs + Co + Cn
                |         
                table
                    tr
                        th Code point range
                        th Block name
                    |             
                    tr
                        td 0000 - 007F
                        td IsBasicLatin
                    |             
                    tr
                        td 0080 - 00FF
                        td IsLatin-1Supplement
                    |             
                    tr
                        td 0100 - 017F
                        td IsLatinExtended-A
                    |             
                    tr
                        td 0180 - 024F
                        td IsLatinExtended-B
                    |             
                    tr
                        td 0250 - 02AF
                        td IsIPAExtensions
                    |             
                    tr
                        td 02B0 - 02FF
                        td IsSpacingModifierLetters
                    |             
                    tr
                        td 0300 - 036F
                        td IsCombiningDiacriticalMarks
                    |             
                    tr
                        td 0370 - 03FF
                        td IsGreek or IsGreekandCoptic
                    |             
                    tr
                        td 0400 - 04FF
                        td IsCyrillic
                    |             
                    tr
                        td 0500 - 052F
                        td IsCyrillicSupplement
                    |             
                    tr
                        td 0530 - 058F
                        td IsArmenian
                    |             
                    tr
                        td 0590 - 05FF
                        td IsHebrew
                    |             
                    tr
                        td 0600 - 06FF
                        td IsArabic
                    |             
                    tr
                        td 0700 - 074F
                        td IsSyriac
                    |             
                    tr
                        td 0780 - 07BF
                        td IsThaana
                    |             
                    tr
                        td 0900 - 097F
                        td IsDevanagari
                    |             
                    tr
                        td 0980 - 09FF
                        td IsBengali
                    |             
                    tr
                        td 0A00 - 0A7F
                        td IsGurmukhi
                    |             
                    tr
                        td 0A80 - 0AFF
                        td IsGujarati
                    |             
                    tr
                        td 0B00 - 0B7F
                        td IsOriya
                    |             
                    tr
                        td 0B80 - 0BFF
                        td IsTamil
                    |             
                    tr
                        td 0C00 - 0C7F
                        td IsTelugu
                    |             
                    tr
                        td 0C80 - 0CFF
                        td IsKannada
                    |             
                    tr
                        td 0D00 - 0D7F
                        td IsMalayalam
                    |             
                    tr
                        td 0D80 - 0DFF
                        td IsSinhala
                    |             
                    tr
                        td 0E00 - 0E7F
                        td IsThai
                    |             
                    tr
                        td 0E80 - 0EFF
                        td IsLao
                    |             
                    tr
                        td 0F00 - 0FFF
                        td IsTibetan
                    |             
                    tr
                        td 1000 - 109F
                        td IsMyanmar
                    |             
                    tr
                        td 10A0 - 10FF
                        td IsGeorgian
                    |             
                    tr
                        td 1100 - 11FF
                        td IsHangulJamo
                    |             
                    tr
                        td 1200 - 137F
                        td IsEthiopic
                    |             
                    tr
                        td 13A0 - 13FF
                        td IsCherokee
                    |             
                    tr
                        td 1400 - 167F
                        td IsUnifiedCanadianAboriginalSyllabics
                    |             
                    tr
                        td 1680 - 169F
                        td IsOgham
                    |             
                    tr
                        td 16A0 - 16FF
                        td IsRunic
                    |             
                    tr
                        td 1700 - 171F
                        td IsTagalog
                    |             
                    tr
                        td 1720 - 173F
                        td IsHanunoo
                    |             
                    tr
                        td 1740 - 175F
                        td IsBuhid
                    |             
                    tr
                        td 1760 - 177F
                        td IsTagbanwa
                    |             
                    tr
                        td 1780 - 17FF
                        td IsKhmer
                    |             
                    tr
                        td 1800 - 18AF
                        td IsMongolian
                    |             
                    tr
                        td 1900 - 194F
                        td IsLimbu
                    |             
                    tr
                        td 1950 - 197F
                        td IsTaiLe
                    |             
                    tr
                        td 19E0 - 19FF
                        td IsKhmerSymbols
                    |             
                    tr
                        td 1D00 - 1D7F
                        td IsPhoneticExtensions
                    |             
                    tr
                        td 1E00 - 1EFF
                        td IsLatinExtendedAdditional
                    |             
                    tr
                        td 1F00 - 1FFF
                        td IsGreekExtended
                    |             
                    tr
                        td 2000 - 206F
                        td IsGeneralPunctuation
                    |             
                    tr
                        td 2070 - 209F
                        td IsSuperscriptsandSubscripts
                    |             
                    tr
                        td 20A0 - 20CF
                        td IsCurrencySymbols
                    |             
                    tr
                        td 20D0 - 20FF
                        td IsCombiningDiacriticalMarksforSymbols or IsCombiningMarksforSymbols
                    |             
                    tr
                        td 2100 - 214F
                        td IsLetterlikeSymbols
                    |             
                    tr
                        td 2150 - 218F
                        td IsNumberForms
                    |             
                    tr
                        td 2190 - 21FF
                        td IsArrows
                    |             
                    tr
                        td 2200 - 22FF
                        td IsMathematicalOperators
                    |             
                    tr
                        td 2300 - 23FF
                        td IsMiscellaneousTechnical
                    |             
                    tr
                        td 2400 - 243F
                        td IsControlPictures
                    |             
                    tr
                        td 2440 - 245F
                        td IsOpticalCharacterRecognition
                    |             
                    tr
                        td 2460 - 24FF
                        td IsEnclosedAlphanumerics
                    |             
                    tr
                        td 2500 - 257F
                        td IsBoxDrawing
                    |             
                    tr
                        td 2580 - 259F
                        td IsBlockElements
                    |             
                    tr
                        td 25A0 - 25FF
                        td IsGeometricShapes
                    |             
                    tr
                        td 2600 - 26FF
                        td IsMiscellaneousSymbols
                    |             
                    tr
                        td 2700 - 27BF
                        td IsDingbats
                    |             
                    tr
                        td 27C0 - 27EF
                        td IsMiscellaneousMathematicalSymbols-A
                    |             
                    tr
                        td 27F0 - 27FF
                        td IsSupplementalArrows-A
                    |             
                    tr
                        td 2800 - 28FF
                        td IsBraillePatterns
                    |             
                    tr
                        td 2900 - 297F
                        td IsSupplementalArrows-B
                    |             
                    tr
                        td 2980 - 29FF
                        td IsMiscellaneousMathematicalSymbols-B
                    |             
                    tr
                        td 2A00 - 2AFF
                        td IsSupplementalMathematicalOperators
                    |             
                    tr
                        td 2B00 - 2BFF
                        td IsMiscellaneousSymbolsandArrows
                    |             
                    tr
                        td 2E80 - 2EFF
                        td IsCJKRadicalsSupplement
                    |             
                    tr
                        td 2F00 - 2FDF
                        td IsKangxiRadicals
                    |             
                    tr
                        td 2FF0 - 2FFF
                        td IsIdeographicDescriptionCharacters
                    |             
                    tr
                        td 3000 - 303F
                        td IsCJKSymbolsandPunctuation
                    |             
                    tr
                        td 3040 - 309F
                        td IsHiragana
                    |             
                    tr
                        td 30A0 - 30FF
                        td IsKatakana
                    |             
                    tr
                        td 3100 - 312F
                        td IsBopomofo
                    |             
                    tr
                        td 3130 - 318F
                        td IsHangulCompatibilityJamo
                    |             
                    tr
                        td 3190 - 319F
                        td IsKanbun
                    |             
                    tr
                        td 31A0 - 31BF
                        td IsBopomofoExtended
                    |             
                    tr
                        td 31F0 - 31FF
                        td IsKatakanaPhoneticExtensions
                    |             
                    tr
                        td 3200 - 32FF
                        td IsEnclosedCJKLettersandMonths
                    |             
                    tr
                        td 3300 - 33FF
                        td IsCJKCompatibility
                    |             
                    tr
                        td 3400 - 4DBF
                        td IsCJKUnifiedIdeographsExtensionA
                    |             
                    tr
                        td 4DC0 - 4DFF
                        td IsYijingHexagramSymbols
                    |             
                    tr
                        td 4E00 - 9FFF
                        td IsCJKUnifiedIdeographs
                    |             
                    tr
                        td A000 - A48F
                        td IsYiSyllables
                    |             
                    tr
                        td A490 - A4CF
                        td IsYiRadicals
                    |             
                    tr
                        td AC00 - D7AF
                        td IsHangulSyllables
                    |             
                    tr
                        td D800 - DB7F
                        td IsHighSurrogates
                    |             
                    tr
                        td DB80 - DBFF
                        td IsHighPrivateUseSurrogates
                    |             
                    tr
                        td DC00 - DFFF
                        td IsLowSurrogates
                    |             
                    tr
                        td E000 - F8FF
                        td IsPrivateUse or IsPrivateUseAreaIsPrivateUse or IsPrivateUseArea
                    |             
                    tr
                        td F900 - FAFF
                        td IsCJKCompatibilityIdeographs
                    |             
                    tr
                        td FB00 - FB4F
                        td IsAlphabeticPresentationForms
                    |             
                    tr
                        td FB50 - FDFF
                        td IsArabicPresentationForms-A
                    |             
                    tr
                        td FE00 - FE0F
                        td IsVariationSelectors
                    |             
                    tr
                        td FE20 - FE2F
                        td IsCombiningHalfMarks
                    |             
                    tr
                        td FE30 - FE4F
                        td IsCJKCompatibilityForms
                    |             
                    tr
                        td FE50 - FE6F
                        td IsSmallFormVariants
                    |             
                    tr
                        td FE70 - FEFF
                        td IsArabicPresentationForms-B
                    |             
                    tr
                        td FF00 - FFEF
                        td IsHalfwidthandFullwidthForms
                    |             
                    tr
                        td FFF0 - FFFF
                        td IsSpecials
        hr
