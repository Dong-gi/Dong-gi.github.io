html
    body
        script(src='/source/redirect.js?200226_1657')
        ul
            li 직접적인 약한 참조 생성이 불가능한 list, dict 등의 내장 자료형은 상속함으로써 약한 참조 가능하게 만들 수 있다
            li CPython : tuple, int 등은 상속해도 약한 참조 불가능하다
            li referent ::= 약한 참조가 참조하는 객체
        hr
        details
            summary class weakref.ref
            ul
                li class weakref.ref(object[, callback])
                ol
                    li object에 대한 약한 참조를 반환한다.
                    li object가 무효하게 되면 약한 참조는 None을 반환한다.
                    li callback이 제공된 경우, object가 해제될 때 호출된다.
                    li 동일 객체에 대해 여러 약한 참조가 만들어진 경우, callback은 최신 것부터 순서대로 호출된다
                    li object가 해시 가능하면 약한 참조도 그러하다.
                    |             object가 유효한 동안 약한 참조에 대해 hash()가 호출된 경우, 반환된 값은 object가 해제되도 유지된다
                    li 약한 참조 사이의 동등 비교가 가능하다.
                    |             referent가 해제된 경우엔 두 약한 참조의 referent가 동일한 경우에만 True
                    li 이 클래스는 상속 가능하다
                li __callback__ Since 3.4
                |         읽기 전용 속성
        hr
        details
            summary class weakref.WeakKeyDictionary + WeakValueDictionary
            ul
                li class weakref.WeakKeyDictionary([dict])
                ol
                    li key를 약하게 참조하는 Mapping 클래스
                    li key가 무효하게 되면 해당 entry는 제거된다
                    li WeakKeyDictionary 순회 중 매핑 크기가 변경되는 경우 엔트리가 사라지는 마법이 발생할 수 있다
                li WeakKeyDictionary.keyrefs()
                li WeakValueDictionary.valuerefs()
        hr
        details
            summary class weakref.WeakSet
            ul
                li class weakref.WeakSet([elements])
                ol
                    li 원소를 약하게 참조하는 Set 클래스
                    li 원소가 무효하게 되면 집합에서 제거된다
        hr
        details
            summary class weakref.WeakMethod Since 3.4
            ul
                li class weakref.WeakMethod(method)
                ol
                    li 인스턴스 메서드를 위한 weakref.ref 서브클래스
                    li 반환된 약한 참조를 호출하면 method가 반환된다
        hr
        details
            summary class weakref.finalize
            ul
                li class weakref.finalize(obj, func, *args, **kwargs)
                ol
                    li obj가 쓰레기 수집되면 호출될 소멸자를 반환한다
                    |             따라서 func, args, kwargs는 obj의 참조를 갖지 않아야 한다
                    li 소멸자는 단 한번만 호출 가능하며, 결과로 func(*args, **kwargs)를 반환한다. 그 외엔 None
                li alive
                |         소멸자의 유효 여부.
                li __call__()
                |         수동 호출. alive가 True면 False로 설정하고 func(*args, **kwargs) 반환. 그 외엔 None
                li detach()
                |         alive가 True면 False로 설정하고 (obj, func, args, kwargs) 반환. 그 외엔 None
                li peek()
                |         alive가 True면 (obj, func, args, kwargs) 반환. 그 외엔 None
                li atexit Since 3.4
                |         쓰기 가능 boolean 속성. true인 경우 프로그램 정상 종료 시 호출된다.
        hr
        details
            summary 모듈 속성, 함수
            ul
                li weakref.proxy(object[, callback])
                ol
                    li object에 대한 프록시를 반환한다. callback은 weakref.ref의 것과 동일한 의미다
                    li 참조 시마다 object를 가져오는 weakref.ref와 다르게, 프록시는 그 자체로써 취급되며, 따라서 확장이 용이하다
                    li object가 callable인지 여부에 따라 반환되는 프록시의 타입은 CallableProxyType, ProxyType 둘 중 하나가 된다
                li weakref.getweakrefcount(object)
                |         object에 대한 약한 참조, 프록시의 개수를 반환
                li weakref.getweakrefs(object)
                |         object에 대한 약한 참조, 프록시들을 list로 반환
                li weakref.ReferenceType : 약한 참조 객체임을 나타내는 타입
                li weakref.ProxyType : Non callable 객체에 대한 프록시 객체임을 나타내는 타입
                li weakref.CallableProxyType : Callable 객체에 대한 프록시 객체임을 나타내는 타입
                li weakref.ProxyTypes : 가능한 모든 프록시 타입을 포함한 Sequence
        hr
