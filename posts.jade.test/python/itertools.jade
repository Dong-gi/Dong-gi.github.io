html
  body
    script(src='/source/redirect.js?200226_1657')
    ul
      li starmap(function, iterable)
      |     (function(*args) for args in iterable)과 의미상 동일
      |     
      |     
      li accumulate(iterable[, func, *, initial=None]) Since 3.2
      |     연산을 누적하여 최종 결과를 반환한다. 기본 연산은 +
      |     
      |     
      li chain(*iterables)
      |     전체 iterables를 순서대로 순회하는 Iterator 반환
      |     
      |     
      li chain.from_iterable(iterable)
      |     iterable은 Iterable로 구성된 Iterable. 기능은 chain()과 동일
      |     
      |     
      li tee(iterable, n=2)
      |     iterable의 요소를 순회하는 n개의 독립적인 Iterator 반환
      |     
      |     
      li zip_longest(*iterables, fillvalue=None)
      |     내장함수 zip()과 다르게 모든 iterables의 순회가 끝날때까지 순회. 값이 없는 경우 fillvalue 사용
      |     
      |     
      li combinations(iterable, r)
      |     iterable 요소로 구성할 수 있는 크기 r의 조합(비복원 추출)을 순회하는 Iterator 반환. 실제 값이 같지만 위치가 다른 두 요소를 다르다고 간주함에 유의.
      |     
      |     
      li combinations_with_replacement(iterable, r)
      |     iterable 요소로 구성할 수 있는 크기 r의 조합(복원 추출)을 순회하는 Iterator 반환. 실제 값이 같지만 위치가 다른 두 요소를 다르다고 간주함에 유의.
      |     
      |     
      li permutations(iterable, r=None)
      |     iterable 요소로 구성할 수 있는 크기 r(기본값 len(iterable))의 순열(비복원 추출). 실제 값이 같지만 위치가 다른 두 요소를 다르다고 간주함에 유의.
      |     
      |     
      li count(start=0, step=1)
      |     step씩 증가하는 무한 등차수열
      |     
      |     
      li cycle(iterable)
      |     iterable 요소를 무한히 반복하는 Iterator 반환.
      |     
      |     
      li repeat(object[, times])
      |     object를 times번 순회하는 Iterator 반환. times가 지정되지 않은 경우 무한 반복. 불필요한 동일 객체를 여러번 만들지 않게 해준다.
      |     
      |     
      li product(*iterables, repeat=1)
      |     순서쌍을 순회하는 Iterator 반환. 예를 들어 product(i1, i2) == ((x, y) for x in i1 for y in i2)
      |     
      |     
      li
        | islice(iterable, stop)
        br
        |         islice(iterable, start, stop[, step])
      |     
      ol
        li 지정된 범위에 속하는 요소들만 순회하는 Iterator 반환.
        |         
        li 일반적인 슬라이스와 달리 음수 인덱싱을 지원하지 않는다.
        |         
        li stop이 None이면 iterable 끝까지 평가
      |     
      |     
      li dropwhile(predicate, iterable)
      |     predicate을 만족하지 않는 선두 요소들은 순회 생략
      |     
      |     
      li takewhile(predicate, iterable)
      |     predicate을 만족하는 선두 요소들만 순회
      |     
      |     
      li filterfalse(predicate, iterable)
      |     predicate을 만족하지 않는 요소들만 순회
      |     
      |     
      li compress(data, selectors)
      |     의미상 (d for d, s in zip(data, selectors) if s)과 동일
      |     
      |     
      li groupby(iterable, key=None)
      |     
      ul
        li key : 각 요소에 대해 그루핑 키를 계산하는 함수. 없으면 lambda x: x가 이용된다
        |         
        li iterable이 key에 대해 정렬되어 있다면, SQL의 group by와 같은 효과를 얻을 수 있다
        |         
        li groupby로 반환되는 객체는 (group_key, group_iterable)을 순회하는 Iterator
        |         >>> [(x[0], [y for y in x[1]]) for x in itertools.groupby([1, 2, 2, 3, 3, 3, 1, 1, 1, 1])]
        br
        |         [(1, [1]), (2, [2, 2]), (3, [3, 3, 3]), (1, [1, 1, 1, 1])]
        br
        |         >>> [(x[0], [y for y in x[1]]) for x in itertools.groupby([1, 2, 2, 3, 3, 3, 1, 1, 1, 1], key=lambda x: x%2)]
        br
        |         [(1, [1]), (0, [2, 2]), (1, [3, 3, 3, 1, 1, 1, 1])]
