html
    body
        script(src='/source/redirect.js?200226_1657')
        hr
        details
            summary Constants
            |     
            ul
                li string.ascii_letters # ascii_lowercase + ascii_uppercase
                |         
                li string.ascii_lowercase # 'abcdefghijklmnopqrstuvwxyz'
                |         
                li string.ascii_uppercase # 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                |         
                li string.digits # '0123456789'
                |         
                li string.hexdigits # '0123456789abcdefABCDEF'
                |         
                li string.octdigits # '01234567'
                |         
                li string.punctuation # '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
                |         
                li string.whitespace # ' \t\n\r\x0b\x0c'
                |         
                li string.printable # digits + ascii_letters + punctuation + whitespace
        hr
        details
            summary Format String Syntax
            |     
            ul
                li replacement_field ::= "{" [field_name] ["!" conversion] [":" format_spec] "}"
                |         
                li field_name ::= arg_name ("." attribute_name | "[" element_index "]")*
                |         .attribute_name → getattr(), [element_index] → __getitem__()
                |         
                li arg_name ::= [identifier | digit+]
                |         identifier → 키워드 인자 참조, digit → positional 인자 참조
                |         
                button.btn-code(path='Repositories/Python/Basic/format_example.py', displayrange='[1,7]', lan='python') 예 »
                |         
                li attribute_name ::= identifier
                |         
                li element_index ::= digit+ | index_string
                |         
                li index_string ::= <any source character except "]"> +
                |         
                li conversion ::= "r" | "s" | "a" # 각각 repr(), str(), ascii() 호출
                |         
                li
                    | format_spec ::= [[fill]align][sign][#][0][width][grouping_option][.precision][type]
                |         
                li fill ::= <any character>
                |         
                li align ::= "<" | ">" | "=" | "^"
                |         
                li sign ::= "+" | "-" | " "
                |         
                li '#' 옵션이 있으면 2, 8, 16진수 앞에 '0b', '0o', '0x'를 각각 붙인다.
                |         
                li width ::= digit+
                |         
                li grouping_option "_" Since 3.6 | "," Since 3.1 // 십진수 1000단위 구분, 그외 4자리 구분
                |         
                li precision ::= digit+
                |         
                li
                    | type ::= "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"
                |         type이 주어지지 않은(None) 경우 문자열은 's', 정수는 'd', 실수는 'g'로 간주
        hr
        details
            summary class string.Template(template)
            pre.
                \nfrom string import Template
                s = Template('$who likes $what')
                s.substitute(who='tim', what='kung pao')    # 'tim likes kung pao'
                
                Template('Give $who $100').substitute(dict(who='tim'))
                # ValueError: Invalid placeholder in string: line 1, col 11
                # $를 출력하고 싶을 땐 $$를 이용하면 된다.
                
                Template('$who likes $what').substitute(dict(who='tim'))        # KeyError: 'what'
                Template('$who likes $what').safe_substitute(dict(who='tim'))   # 'tim likes $what'        
        hr
        details
            summary Helper functions
            |     
            ul
                li string.capwords(s, sep=None)
                pre.
                    \nif sep is None:
                            sep = ' '
                    sep.join([word.capitalize() for word in s.split(sep=sep)])          
        hr
