html
    body
        script(src='/source/redirect.js?200226_1657')
        hr
        details
            summary 시작하기
            |     
            details
                summary Hello World
                |         
                ol
                    li 기본 설정대로 프로젝트를 생성하면 아래의 4개 주요 파일을 볼 수 있다.
                    |             
                    li MainActivity.java
                    |             앱을 실행하면 이 클래스의 인스턴스가 실행되고 layout을 로드한다.
                    |             
                    button.btn-code(path='Repositories/Android/Project01/app/src/main/java/io/github/donggi/project01/MainActivity.java', lan='java') MainActivity.java »
                    |             
                    li activity_main.xml
                    |             액티비티의 UI를 정의한다.
                    |             
                    button.btn-code(path='Repositories/Android/Project01/app/src/main/res/layout/activity_main.xml', lan='xml') activity_main.xml »
                    |             
                    li AndroidManifest.xml
                    |             앱의 기본적인 특성을 기술하고, 각 컴포넌트를 정의한다.
                    |             
                    button.btn-code(path='Repositories/Android/Project01/app/src/main/AndroidManifest.xml', lan='xml') AndroidManifest.xml »
                    |             
                    li build.gradle
                    |             앱의 컴파일과 빌드에 관한 구성 설정.
                    |             
                    button.btn-code(path='Repositories/Android/Project01/build.gradle', lan='text') Project Gradle »
                    |             
                    button.btn-code(path='Repositories/Android/Project01/app/build.gradle', lan='text') "app" module Gradle »
            |     
            details
                summary 앱 컴포넌트
                |         
                ol
                    li Activity : UI가 있는 단일 화면. 액티비티는 한 번에 하나만 실행할 수 있다.
                    |             Project window » 우클릭 » New » Activity : 자동으로 매니페스트에도 추가된다.
                    br
                    |             액티비티 시작 : startActivity() or startActivityForResult()
                    br
                    |             액티비티 생애주기 : onCreate(인스턴스 생성 시), onRestart(재시작), onStart(onCreate, onRestart 후), onResume(포그라운드), onPause(백그라운드), onStop(비가시영역 진입), onDestroy(소멸)
                    br
                    |             xml에서 saveEnabled 속성을 true로 하면 onSaveInstanceState, onRestoreInstanceState 메서드를 재정의하여 사용할 수 있다.
                    |             
                    li Service : 백그라운드에서 실행되는 요소.
                    |             서비스 시작 : startService() or bindService()
                    |             
                    li ContentProvider : 외부로 공유하는 데이터 집합 관리.
                    |             ContentProvider 이용 : ContentResolver.query()
                    |             
                    li BroadcastReceiver : 각 브로드캐스트는 Intent 객체로 전달된다.
                    |             브로드캐스트 송신 : sendBroadcast(), sendOrderedBroadcast(), sendStickyBroadcast()
                    |             
                    li Intent : 컴포넌트 간의 데이터 전달.
                    |             
                    ul
                        li
                            | Activity, Service, BroadcastReceiver는 Intent로 활성화되고, ContentProvider는 ContentResolver의 요청으로 활성화된다.
                        |                 
                        li
                            | public Intent(Context packageContext, Class
                            | cls)
                        |                 
                        li Intent putExtra(String name, ? value)
                        |                 
                        li 명시적 인텐트 : 수신 클래스 지정
                        |                 
                        li 암시적 인텐트 : 작업을 처리할 수 있는 컴포넌트로 안드로이드가 연결
                        |                 
                        li 브로드캐스트 인텐트 : 브로드캐스트 리시버로 등록된 모든 수신자에게 전송
                    |             
                    li Fragment : Deprecated in API level 28
            |     
            details
                summary 매니페스트
                |         
                ol
                    li 구성 요소 선언, 요구 권한 식별, 최소 API 레벨 선언 등
                    |             <activity>, <service>, <receiver>, <provider>
                    br
                    |             BroadcastReceiver는 registerReceiver()를 통해 동적으로 등록할 수 있다.
                    |             
                    li 다른 앱의 intent에 응답하기 위해 <intent-filter>요소를 해당 요소의 하위에 추가한다.
                    |             
                    li 요구사항 선언
                    |             
                    ul
                        li 예. 카메라 없으면 구글 플레이에서 설치 불가
                        |                 <uses-feature android:name="android.hardware.camera.any" android:required="true"/>
                        br
                        |                 http://developer.android.com/guide/topics/manifest/uses-feature-element.html#features-reference
                        |                 
                        li API 7이상
                        |                 <uses-sdk android:minSdkVersion="7" android:targetSdkVersion="19" />
                        |                 
                        li application 엘리먼트
                        |                 많은 메모리를 필요로 하는 경우에만 android:largeHeap 속성 이용
                        |                 
                        li 컴포넌트 엘리먼트
                        |                 설정이 완료되기 전까지 기능을 제한하려는 경우, android:enabled 속성을 이용해 Activity, Service, BroadcastReceiver의 동작을 막을 수 있다.
                        pre.
                            \nPackageManager manager = getPackageManager();
                            manager.setComponentEnabledSetting(
                                    new ComponentName(this, MainActivity.class),
                                    PackageManager.COMPONENT_ENABLED_STATE_ENABLED,
                                    PackageManager.DONT_KILL_APP
                            );              
                        |                 
                        li 인텐트 필터링 예
                        pre.
                            \n<activity ~>
                                    <intent-filter>
                                            <action android:name="android.intent.action.VIEW"/>
                                            <category android:name="android.intent.category.DEFAULT"/>
                                            <data android:mimeType="video/*"/>
                                    </intent-filter>
                            </activity>              
            |     
            details
                summary UI
                |         
                ol
                    li 안드로이드 UI는 layout(ViewGroup 객체)들과 widget(View 객체)들의 계층으로 이루어진다.
                    |             
                    li 길이 단위
                    |             
                    ul
                        li px : 픽셀. 장치마다 밀도가 달라 제각기로 표현된다.
                        |                 
                        li dp : Density-independent pixels. 160dp는 밀도와 관계없이 1인치로 표시된다.
                        |                 
                        li mm : 밀리미터
                        |                 
                        li in : 인치
                        |                 
                        li pt : 포인트 = 1/72 인치
                    |             
                    li View
                    |             
                    ul
                        li 버튼, 텍스트 박스 등의 UI 요소
                        |                 TextView, EditText, Button, ImageView, Switch, ...
                        |                 
                        button.btn-code(path='Repositories/Android/Project04/app/src/main/res/layout/activity_main2.xml', lan='xml') 예 »
                        |                 
                        li id 속성 : @[+]id/ID
                        |                 ID를 할당할 때는 +를 앞에 붙여 R 클래스의 상수로 등록되도록 한다.
                        |                 
                        li layout_width, layout_height : 너비, 높이
                        |                 match_parent : 부모 요소의 크기만큼 할당, wrap_content : 내용물만큼 할당, 상수 지정 : 크기 고정
                        |                 
                        li background : 배경. 지정하지 않으면 각 뷰의 기본값이 사용된다
                        |                 
                        li visibility : 가시성. visible | invisible | gone
                        |                 
                        li padding, layout_margin
                    |             
                    li ViewGroup
                    |             
                    ul
                        li 자식 요소들을 어디에 위치시킬 지 조정한다.
                        |                 
                        li ConstraintLayout
                        |                 형제 요소들과 부모 레이아웃에 대한 거리를 통해 뷰를 조정한다.
                        |                 여러 요소들을 선택하여 우클릭한 뒤 chain으로 연결하면 한 번에 가로/세로로 배치할 수 있다.
                        |                 
                        li LinearLayout
                        |                 orientation 속성으로 horizontal | vertical 지정
                        br
                        |                 gravity 속성으로 정렬 가능. center_horizontal(0x01), left(0x03), right(0x05), fill_horizontal(0x07), center_vertical(0x10), top(0x30), bottom(0x50), fill_vertical(0x70), center(0x11), fill(0x77)
                        br
                        |                 baselineAligned 속성으로 요소들의 아래 줄을 일치시킬 지 여부를 지정할 수 있다
                        br
                        |                 요소의 layout_weight 속성으로 너비/높이를 일정 비율씩 나눠가질 수 있다.
                        |                 
                        button.btn-code(path='Repositories/Android/Project04/app/src/main/res/layout/activity_main.xml', lan='xml') 예 »
                        |                 
                        li GridLayout
                        |                 화면의 가로/세로(columnCount/rowCount)를 잘라 만든 격자를 이용해 배치.
                    |             
                    li UI를 업데이트할 때엔 새 Runnable을 생성해 activity.runOnUiThread() 호출
                    |             
                    li EventListener
                    |             
                    button.btn-code(path='Repositories/Android/Project04/app/src/main/res/layout/activity_main3.xml', lan='xml') xml »
                    |             
                    button.btn-code(path='Repositories/Android/Project04/app/src/main/java/io/github/donggi/project04/Main3Activity.java', lan='java') java »
                    |             
                    li 테마 적용 예
                    |             
                    button.btn-code(path='Repositories/Android/Project05/app/src/main/AndroidManifest.xml', lan='xml') AndroidManifest.xml »
                    |             
                    button.btn-code(path='Repositories/Android/Project05/app/src/main/res/layout/activity_main.xml', lan='xml') activity_main.xml »
                    |             
                    button.btn-code(path='Repositories/Android/Project05/app/src/main/java/io/github/donggi/project05/MainActivity.java', lan='java') MainActivity.java »
                    |             
                    li BottomNavigationView
                    |             com.google.android.material:material 포함.
                    |             
                    button.btn-code(path='Repositories/Android/Project04/app/build.gradle', lan='text') "app" module Gradle »
                    |             
                    button.btn-code(path='Repositories/Android/Project04/app/src/main/res/layout/activity_main4.xml', lan='xml') activity xml »
                    |             
                    button.btn-code(path='Repositories/Android/Project04/app/src/main/res/layout/navigator.xml', lan='xml') navigator xml »
                    |             
                    button.btn-code(path='Repositories/Android/Project04/app/src/main/res/menu/navigation.xml', lan='xml') navigation xml »
                    br
                    |             Used icons made by 
                    a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://www.flaticon.com/authors/smashicons') Smashicons
                    |  from 
                    a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='https://www.flaticon.com/') www.flaticon.com
                    |  is licensed by 
                    a.w3-btn.w3-round.w3-round-xxlarge.w3-small.w3-green(target='_blank', href='http://creativecommons.org/licenses/by/3.0/') CC 3.0 BY
        hr
        details
            summary SQLite
            |     
            ol
                li https://developer.android.com/jetpack/androidx/releases/room
                |         
                li https://developer.android.com/training/data-storage/room
                |         
                button.btn-code(path='Repositories/Android/Project06/app/build.gradle', lan='text') "app" module Gradle »
                |         
                button.btn-code(path='Repositories/Android/Project06/app/src/main/java/io/github/donggi/project06/dto/User.java', lan='java') User.java »
                |         
                button.btn-code(path='Repositories/Android/Project06/app/src/main/java/io/github/donggi/project06/dao/UserDao.java', lan='java') UserDao.java »
                |         
                button.btn-code(path='Repositories/Android/Project06/app/src/main/java/io/github/donggi/project06/DB.java', lan='java') DB.java »
                |         
                button.btn-code(path='Repositories/Android/Project06/app/src/main/java/io/github/donggi/project06/MainActivity.java', lan='java') MainActivity.java »
        hr
        details
            summary 권한 요청
            |     
            button.btn-code(path='Repositories/Android/Project03/app/src/main/java/io/github/donggi/project03/MainActivity.java', lan='java') MainActivity.java »
            |     
            button.btn-code(path='Repositories/Android/Project03/app/src/main/AndroidManifest.xml', lan='xml') AndroidManifest.xml »
        hr
        details
            summary 알림 보내기
            |     매니페스트 설정 불필요
            |     
            button.btn-code(path='Repositories/Android/Project02/app/src/main/res/layout/activity_main.xml', lan='xml') activity_main.xml »
            |     
            button.btn-code(path='Repositories/Android/Project02/app/src/main/java/io/github/donggi/project02/MainActivity.java', lan='java') MainActivity.java »
        hr
        details
            summary SensorManager
            |     
            ul
                li https://developer.android.com/guide/topics/sensors/sensors_overview.html?hl=ko
                |         
                li SensorManager, Sensor, SensorEvent, SensorEventListener
                |         
                button.btn-code(path='Repositories/Android/Project07/app/src/main/java/io/github/donggi/project07/example/ListAllSensorsExample.java', lan='java') ListAllSensorsExample.java »
                |         
                button.btn-code(path='Repositories/Android/Project07/app/src/main/java/io/github/donggi/project07/example/AccelerometerExample.java', lan='java') AccelerometerExample.java »
                |         
                li 걸음 감지 예
                pre.
                    \nfor(int i = 0; i < 3; ++i)
                            innerProduct += linearAccelValue[i] * accelValue[i];
                    float projection = innerProduct / 9.8f;
                    //LogManager.log(TAG, "중력 방향 가속도 : " + projection + "m/s^2");
                    // 왕복 운동의 한쪽만 카운트(양의 가속도)
                    if(projection >= thresh) {
                            lastDetected = System.currentTimeMillis();
                    }          
        hr
        details
            summary Location Manager
            |     
            ul
                li
                    | <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
                    br
                    |             <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
                |         
                li 위치 소스 provider
                |         
                ol
                    li
                        | GPS : LocationManager.GPS_PROVIDER, 오차 ~수십 미터, 배터리 소모 많음, 긴 TTFF(Time To First Fix). ACCESS_FINE_LOCATION 권한 필요
                    |             
                    li
                        | 기지국 : LocationManager.NETWORK_PROVIDER, 오차 ~수백 미터, 짧은 TTFF, 적은 배터리 소모. ACCESS_COARSE_LOCATION 권한 필요
                    |             
                    li
                        | LocationManager.PASSIVE_PROVIDER : 다른 앱이 요청한 위치 정보를 사용, ACCESS_FINE_LOCATION 권한 필요
            |     
            details
                summary LocationManager
                |         
                ol
                    li List<String> getProviders (boolean enabledOnly)
                    |             
                    li
                        | void requestLocationUpdates(String provider, long minTime, float minDistance, LocationListener listener) + removeUpdates
                    |             minTime : 업데이트 간 최소 시간(ms), minDistance : 업데이트 간 최소 거리(m)
                    |             
                    button.btn-code(path='Repositories/Android/Project07/app/src/main/java/io/github/donggi/project07/example/LocationExample.java', lan='java') LocationExample.java »
                    |             
                    li void requestSingleUpdate (String provider, PendingIntent intent)
                    |             
                    li
                        | void addProximityAlert (double latitude, double longitude, float radius, long expiration, PendingIntent intent) + removeProximityAlert
                    |             근접 경보. 등록한 영역에 들어가거나 나갈 때 인텐트로 알림. ACCESS_FINE_LOCATION 권한 필요
                    |             
                    button.btn-code(path='Repositories/Android/Project07/app/src/main/java/io/github/donggi/project07/example/ProximityAlertExample.java', lan='java') ProximityAlertExample.java »
                    br
                    |             expiration : 기한 내에 도착하지 못하면 알림 취소. -1이면 무기한.
                    br
                    | 			intent로 KEY_PROXIMITY_ENTERING이라는 boolean 값 전달. true면 들어가는 것, false면 나가는 것.
            |     
            details
                summary LocationListener
                |         
                ol
                    li void onLocationChanged(Location location)
                    |             
                    li void onProviderEnabled(String provider) + onProviderDisabled
                    |             사용자가 위치 설정의 ON/OFF를 변경할 때
                    |             
                    li void onStatusChanged(String provider, int status, Bundle extras)
                    |             Deprecated Since 29 : 절대 호출되지 않는다.
                    br
                    |             GPS를 이용하도록 설정했음에도 신호가 수신되지 않는 경우 등.
                    br
                    |             status : LocationProvider.OUT_OF_SERVICE, LocationProvider.TEMPORARILY_UNAVAILABLE, LocationProvider.AVAILABLE
        hr
        details
            summary 백그라운드, 절전 모드에서의 실행
            |     
            ol
                li CPU 항상 켜기 필요 권한 : android.permission.WAKE_LOCK
                pre.
                    \nPowerManager manager = (PowerManager)getSystemService(Context.POWER_SERVICE);
                    PowerManager.WakeLock lock = manager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "TAG_FOR_DEBUG");
                    lock.acquire();
                    // business login
                    lock.release();          
                |         
                li 화면 항상 켜기
                |         xml : android:keepScreenOn="true" 또는
                br
                |         java : getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
                |         
                li 주기적인 백그라운드 알람
                pre.
                    \nAlarmManager manager = (AlarmManager)getSystemService(ALARM_SERVICE);
                    // 1회 알람 : set(int type, long triggerAtMillis, PendingIntent operation)
                    // 1회 정시 알람 : setExact(int type, long triggerAtMillis, PendingIntent operation) + 오버로딩
                    manager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime()+5000, pendingIntent);
                    // 반복 알람 : setRepeating(int type, long triggerAtMillis, long intervalMillis, PendingIntent operation)
                    // Since 19 : 모든 반복 알람은 부정확하다.          
                |         
                details
                    summary 알람 type
                    |             
                    ol
                        li RTC : System#currentTimeMillis로 얻어지는 시각 기준
                        |                 
                        li ELAPSED_REALTIME : SystemClock#elapsedRealtime로 얻어지는, 부팅 후 경과 시간 기준
                        |                 
                        li RTC_WAKEUP, ELAPSED_REALTIME_WAKEUP : *_WAKEUP 타입은 기기가 자고 있으면 깨워서 실행시킨다
                |         
                li Doze 모드 Since 23
                |         네트워크 액세스 정지. WAKE_LOCK 무시. AlarmManager 경보 무시. Wi-Fi 검색 X, JobScheduler 실행 X, AbstractThreadedSyncAdapter 실행 X
                |         
                ul
                    li AlarmManager#setAndAllowWhileIdle, setExactAndAllowWhileIdle를 사용해야 한다
                    |             
                    li
                        | AlarmManager#setAlarmClock으로 설정된 경보는 정상적으로 실행되며, 실행 직전에 doze 모드가 종료된다.
                |         
                li AsyncTask
                |         onPreExecute(), onProgressUpdate, onPostExecute : 메인 스레드에서 실행된다
                |         
                li Application 객체를 통한 공유
                |         안드로이드 애플리케이션은 항상 Application 컴포넌트를 하나 갖고 있으며, Context#getApplication로 접근 가능하다
                br
                |         사용자 정의 Application을 사용하는 경우, 매니페스트의 name 속성을 변경해주고, getApplication() 결과를 캐스팅해야 한다.
        hr
        details
            summary ProGuard
            |     
            ol
                li 코드 최적화 및 난독화
                |         
                li build.gradle의 안드로이드 영역에 아래를 추가
                pre.
                    \nbuildTypes {
                            release {
                                    runProguard true
                                    proguardFile getDefaultProguardFile('proguard-android.txt')
                            }
                    }          
        hr
        details
            summary 최적화
            |     https://developer.android.com/topic/performance
        hr
