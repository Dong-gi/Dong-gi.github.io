html
  body
    script(src='/source/redirect.js?200226_1657')
    hr
    details
      summary 참고 자료
      |     
      ol
        li
          | https://docs.oracle.com/en/java/javase/12/docs/api/java.compiler/javax/annotation/processing/package-summary.html
        |         
        li https://cloudogu.com/en/blog/Java-Annotation-Processors_1-Intro
        |         
        li https://www.baeldung.com/java-annotation-processing-builder
        |         
        li
          | https://medium.com/@iammert/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657
        |         
        li https://pluu.github.io/blog/android/2015/12/24/annotation-processing-api/
    ol
      li
        | 컴파일러가 소스 파일에서 발견한 각 annotated element들에 대해 적절한(@SupportedAnnotationTypes) 프로세서를 호출한다
      |     애너테이션 프로세서들은 미리 컴파일러에 알려져야 한다.
      |     
      li 위 과정을 하나의 라운드라고 부르며, 각 라운드에서 출력된 새로운 소스 파일들은 다음 라운드의 입력이 된다
      |     
      li 라운드에서 더 이상 새로운 소스 파일 생성이 없다면 애너테이션 처리는 종료된다.
    details
      summary
        | @Documented @Target(TYPE) @Retention(RUNTIME) @interface SupportedAnnotationTypes Since 1.6
      |     String[] value : 지원하는 애너테이션 타입들의 목록. 와일드카드 * 사용 가능. 모듈을 지정하려면 "module_name/"를 앞에 붙이면 된다
    hr
    ol
      li 애너테이션 처리 과정에서, 연관 정보가 담긴 객체들을 넘겨 받는다
    details
      summary interface ProcessingEnvironment Since 1.6
      |     
      ol
        li Map<String,String> getOptions() : 프로세서에 특정된 옵션들
        |         
        li Messager getMessager() : 에러, 경고, 알림을 보고할 메신저
        |         
        li Filer getFiler() : 새로운 소스 파일을 만들기 위한 파일러
        |         
        li SourceVersion getSourceVersion()
        |         
        li Locale getLocale()
        |         
        li Elements getElementUtils() + getTypeUtils
    details
      summary interface RoundEnvironmnent Since 1.6
      |     
      ol
        li boolean processingOver() :이번 라운드의 결과가 다음 라운드로 넘어갈 것인지 여부
        |         
        li boolean errorRaised() : 이전 라운드에서 에러가 발생했는지 여부
        |         
        li Set<? extends Element> getRootElements()
        |         
        li Set<? extends Element> getElementsAnnotatedWith(TypeElement a)
        |         + 오버로딩 + getElementsAnnotatedWithAny Since 9
    hr
    details(open='')
      summary interface Processor Since 1.6
      |     
      ol
        li 서브클래스는 외부에서 생성하기 위한 기본 생성자를 하나 가져야 한다
        |         
        li 생성된 후, init 메서드를 통해 적절한 ProcessingEnvironment를 제공받는다
        |         
        li
          | 이후 getSupportedAnnotationTypes, getSupportedOptions, getSupportedSourceVersion이 한번씩 호출된다
        |         
        li 대상을 찾은 경우 process 메서드를 호출한다; Processor 인스턴스는 전체 라운드에서 한 번만 생성된다
        |         
        li
          | boolean process(Set<? extends TypeElement> annotations, RoundEnvironmnent roundEnv)
        |         처리하는 애너테이션이 설정된 요소들을 받아 처리한다. 처리했다면 true를 반환하고, 이번 라운드에서 해당 요소들은 더 이상 다른 프로세서들이 처리할 수 없다.
        br
        |         모든 애터네이션(*)을 처리할 수 있다고 했지만, 애너테이션된 요소를 발견하지 못한 경우에만 annotations가 비어있을 수 있다
    details
      summary abstract class AbstractProcessor implements Processor Since 1.6
      |     
      ol
        li protected ProcessingEnvironment processingEnv
        |         
        li Set<String> getSupportedOptions() : @SupportedOptions가 있다면 해당 값 반환. 없으면 빈 집합
        |         
        li
          | Set<String> getSupportedAnnotationTypes() : @SupportedAnnotationTypes가 있다면 해당 값 반환. 없으면 빈 집합. 9 미만이면 모듈 prefix는 제거된다
        |         
        li
          | SourceVersion getSupportedSourceVersion() : @SupportedSourceVersion이 있다면 해당 값 반환. 없으면 RELEASE_6
        |         
        li protected boolean isInitialized() : 초기화 됐다면 true
    hr
    details
      summary IDE에서 애너테이션 프로세싱 켜기
      |     
      ol
        li Eclipse : 프로젝트 설정 변경
        |         
        img.w3-round(src='imgs/20191128_134424.png')
        |         
        img.w3-round(src='imgs/20191128_134459.png')
        |         
        li Android Studio : 안드로이드 스튜디오(프로젝트 X) 설정 변경
        |         
        img.w3-round(src='imgs/20191128_133722.png')
    details
      summary javac -processor 이용 예
      |     
      ol
        li
          | 애너테이션 정의 : 
          button.btn-code(path='Repositories/Eclipse/annotation-processing1/src/main/java/io/github/donggi/annotation/MyTarget.java', lan='java') MyTarget »
        |         
        li
          | 애너테이션 프로세서 정의 : 
          button.btn-code(path='Repositories/Eclipse/annotation-processing1/src/main/java/io/github/donggi/annotation/processor/MyTargetProcessor.java', lan='java') MyTargetProcessor »
        |         
        li 애너테이션 컴파일
        |         D:\>javac -encoding UTF-8 io/github/donggi/annotation/MyTarget.java
        |         
        li 애너테이션 프로세서 컴파일
        |         D:\>javac -encoding UTF-8 io/github/donggi/annotation/processor/MyTargetProcessor.java
        |         
        li
          | 애너테이션 프로세서 지정하여 컴파일 
          button.btn-code(path='Repositories/Eclipse/annotation-processing1/src/main/java/io/github/donggi/annotation/test/MyTargetTest.java', lan='java') MyTargetTest »
        pre.
          \nD:\>javac -encoding UTF-8 -processor io.github.donggi.annotation.processor.MyTargetProcessor io/github/donggi/annotation/test/MyTargetTest.java
          Note: [ROUND  1] It's my turn.
          io\github\donggi\annotation\test\MyTargetTest.java:6: Note:
          public class MyTargetTest {
                 ^
          Note: Annotation 'io.github.donggi.annotation.MyTarget' found at 'io.github.donggi.annotation.test.MyTargetTest'
          Note: Annotation value : Hello MyTargetTest
          Note: Creating 'io.github.donggi.annotation.test.MyTargetTest' -> 'io.github.donggi.annotation.test.MyTargetTestGenerated'
          Note: [ROUND  2] It's my turn.
          D:\io\github\donggi\annotation\test\MyTargetTestGenerated.java:6: Note:
          public class MyTargetTestGenerated {
                 ^
          Note: Annotation 'io.github.donggi.annotation.MyTarget' found at 'io.github.donggi.annotation.test.MyTargetTestGenerated'
          Note: Annotation value :
          Note: Skipping generated file 'io.github.donggi.annotation.test.MyTargetTestGenerated'
          Note: [ROUND  3] It's my turn.          
    details
      summary javac -cp 이용 예
      |     
      ol
        li 위 "javac -processor 이용 예" 프로젝트 그대로 jar 빌드
        |         
        li
          | META-INF/services/javax.annotation.processing.Processor 파일에 애너테이션 프로세서 클래스 
          button.btn-code(path='Repositories/Eclipse/annotation-processing1/src/main/resources/META-INF/services/javax.annotation.processing.Processor', lan='text') 명시 »
        |         
        img.w3-round(src='imgs/20191128_164401.png')
        |         
        img.w3-round(src='imgs/20191128_164656.png')
        |         
        li jar 포함하여 컴파일
        pre.
          \nD:\>javac -encoding UTF-8 -cp annotation-processing1-1.0.jar io/github/donggi/annotation/test/MyTargetTest.java
          Note: [ROUND  1] It's my turn.
          // 이하 생략          
    details
      summary Eclipse에서 프로세서 jar 이용 예
      |     
      ol
        li 위 "javac -cp 이용 예" jar 그대로 이용.
        |         
        li 위 "IDE에서 애너테이션 프로세싱 켜기"와 같이 애너테이션 프로세싱 허용하고 jar 등록
        |         
        li 소스 작성에 따라 자동적으로 호출되고, Error Log 뷰에 아래와 같이 표시된다
        |         
        img.w3-round(src='imgs/20191128_170023.png')
    details
      summary Eclipse Gradle 프로젝트 예
      |     
      ol
        li 프로젝트 구성
        |         
        table
          tbody
            tr
              th annotation-processing3
              td 루트 프로젝트
            |                 
            tr
              th annotation-processing3-definition
              td 애너테이션 정의 프로젝트
            |                 
            tr
              th annotation-processing3-processor
              td 프로세서 프로젝트
            |                 
            tr
              th annotation-processing3-test
              td 테스트 프로젝트
        |         
        button.btn-code(path='Repositories/Eclipse/annotation-processing3/settings.gradle', lan='text') 루트 settings.gradle »
        |         
        button.btn-code(path='Repositories/Eclipse/annotation-processing3/build.gradle', lan='text') 루트 build.gradle »
        |         
        button.btn-code(path='Repositories/Eclipse/annotation-processing3/annotation-processing3-processor/build.gradle', lan='text') processor build.gradle »
        |         
        button.btn-code(path='Repositories/Eclipse/annotation-processing3/annotation-processing3-test/build.gradle', lan='text') test build.gradle »
        |         
        li 프로세서 프로젝트는 위 "javac -cp 이용 예"와 마찬가지로 javax.annotation.processing.Processor를 포함한다
        |         
        img.w3-round(src='imgs/20191128_180107.png')
        |         
        li Gradle 빌드
        pre.
          \nD:\annotation-processing3>set GRADLE_OPTS=-Dfile.encoding=UTF-8
          
          D:\annotation-processing3>gradle annotation-processing3-test:compileJava
          
          > Task :annotation-processing3-test:compileJava
          Note: [ROUND  1] It's my turn.
          D:\annotation-processing3\annotation-processing3-test\src\main\java\io\github\donggi\annotation\test\MyTargetTest.java:6: Note:
          public class MyTargetTest {}
                 ^
          Note: Annotation 'io.github.donggi.annotation.MyTarget' found at 'io.github.donggi.annotation.test.MyTargetTest'
          Note: Annotation value : Hello MyTargetTest
          Note: Creating 'io.github.donggi.annotation.test.MyTargetTest' -> 'io.github.donggi.annotation.test.MyTargetTestGenerated'
          Note: [ROUND  2] It's my turn.
          D:\annotation-processing3\annotation-processing3-test\build\generated\sources\annotationProcessor\java\main\io\github\donggi\annotation\test\MyTargetTestGenerated.java:6: Note:
          public class MyTargetTestGenerated {
                 ^
          Note: Annotation 'io.github.donggi.annotation.MyTarget' found at 'io.github.donggi.annotation.test.MyTargetTestGenerated'
          Note: Annotation value :
          Note: Skipping generated file 'io.github.donggi.annotation.test.MyTargetTestGenerated'
          Note: [ROUND  3] It's my turn.
          Note: [ROUND  4] It's my turn.
          
          BUILD SUCCESSFUL in 3s
          6 actionable tasks: 6 executed          
    hr
