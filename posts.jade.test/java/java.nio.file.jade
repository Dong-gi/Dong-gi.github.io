html
  body
    script(src='/source/redirect.js?200226_1657')
    hr
    details
      summary 파일 감시 관련
      |     
      details
        summary interface Watchable Since 1.7
        |         
        ol
          li
            | WatchService에 등록되어 그 변화나 이벤트가 감시될 수 있는 객체. 정의된 register 메서드는 등록되었음을 WatchKey 객체로 반환한다.
          |             
          li WatchKey register(WatchService watcher, WatchEvent.Kind<?>... events) + 오버로딩
      |     
      details
        summary interface WatchEvent<T> Since 1.7
        |         
        details
          summary static interface WatchEvent.Kind<T> Since 1.7
          |             
          ol
            li 식별을 위한 이벤트 종류
            |                 
            li String name()
            |                 
            li Class<T> type()
        |         
        details
          summary static interface WatchEvent.Modifier Since 1.7
          |             
          ol
            li Watchable 객체가 어떻게 등록되었는지
            |                 
            li String name()
        |         
        ol
          li WatchEvent.Kind<T> kind()
          |             
          li int count() : 1보다 크면 반복 이벤트
          |             
          li T context()
      |     
      details
        summary final class StandardWatchEventKinds Since 1.7
        |         
        ol
          li public static final WatchEvent.Kind<Object> OVERFLOW : 자리가 없어 이벤트가 버려짐.
          |             
          li
            | public static final WatchEvent.Kind<Path> ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY : 디렉터리 생성/삭제/변경
      |     
      details
        summary interface WatchKey Since 1.7
        |         
        ol
          li WatchService에 Watchable 객체가 등록되었음을 표현하는 토큰.
          |             
          li
            | 처음 생성되면 ready 상태. 이벤트를 감지하면 reset()되기 전까지 signalled 상태가 되고, WatchService 큐에 진입하여 처리된다. reset()되면 다시 ready.
          |             
          li boolean isValid() : 취소되거나 서비스가 닫힐 때까지 유효
          |             
          li List<WatchEvent<?>> pollEvents() : 대기 중인 이벤트들을 제거하고 반환
          |             
          li boolean reset()
          |             
          li void cancel()
          |             
          li Watchable watchable()
      |     
      details
        summary interface WatchService extends Closeable Since 1.7
        |         
        ol
          li 스레드-안전. FileSystem#newWatchService 메서드로 획득한다
          |             
          li WatchKey poll() : 다음 WatchKey를 제거. 없으면 null.
          |             
          li
            | WatchKey poll(long timeout, TimeUnit unit) : 다음 WatchKey를 제거. 없으면 대기. timeout 후에도 없으면 null.
          |             
          li WatchKey take() : 다음 WatchKey를 제거. 없으면 대기.
    hr
    details
      summary 파일 순회 관련
      |     
      details
        summary interface DirectoryStream<T> extends Closeable, Iterable<T> Since 1.7
        |         
        ol
          li Files#newDirectoryStream 메서드로 획득
          |             
          li 일회용 이터러블이다. 2번째 호출부터는 IllegalStateException 발생
        |         
        details(open='')
          summary @FunctionalInterface static interface DirectoryStream.Filter<T> Since 1.7
          |             boolean accept(T entry)
      |     
      details
        summary interface SecureDirectoryStream<T> extends DirectoryStream<T> Since 1.7
        |         
        ol
          li 열린 디렉터리에 대한 상대 경로를 이용한 연산들을 추가로 지원한다
          |             
          li
            | OS에서 이를 지원한다면, Files#newDirectoryStream 메서드로 획득한 DirectoryStream은 SecureDirectoryStream이다
          |             
          li SecureDirectoryStream<T> newDirectoryStream(T path, LinkOption... options)
          |             path가 절대 경로면 Files#newDirectoryStream과 동일.
          |             
          li
            | SeekableByteChannel newByteChannel(T path, Set<? extends OpenOption> options, FileAttribute<?>... attrs)
          |             path가 절대 경로면 Files#newByteChannel과 동일. path에 해당하는 파일을 열거나 만든 뒤, 파일에 대한 채널을 반환한다
          |             
          li void deleteFile(T path)
          |             Files#delete와 다르게 path가 디렉터리인지 확인하지 않는다. 이로써 디렉터리가 실제로 지워지는 지는 시스템에 의존적이다. 심볼릭 링크의 경우 링크 자체만 지운다.
          |             
          li void deleteDirectory(T path)
          |             Files#delete와 다르게 path가 디렉터리인지 확인하지 않는다. 이로써 일반 파일이 지워지는 지는 시스템에 의존적이다.
          |             
          li void move(T srcpath, SecureDirectoryStream<T> targetdir, T targetpath)
          |             ATOMIC_MOVE 옵션이 적용된 Files#move와 비슷하게 작업한다. 현재 디렉터리를 기준으로, 파일 하나를 다른 디렉터리에 대한 상대경로가 지정하는 위치에 원자적으로 옮긴다
          |             
          li <V extends FileAttributeView> V getFileAttributeView(Class<V> type)
          |             현재 디렉터리에 대한 FileAttributeView를 반환한다. BasicFileAttributeView를 요청하면 항상 BasicFileAttributeView 인스턴스를 반환한다.
          |             
          li
            | <V extends FileAttributeView> V getFileAttributeView(T path, Class<V> type, LinkOption... options)
          |             현재 디렉터리 내부 파일 하나에 대한 FileAttributeView를 반환한다. BasicFileAttributeView를 요청하면 항상 BasicFileAttributeView 인스턴스를 반환한다.
      |     
      details
        summary interface FileVisitor<T> Since 1.7
        |         
        ol
          li Files#walkFileTree 메서드에 사용
          |             
          li FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs)
          |             디렉터리 방문 시, 내부 요소들을 처리하기 전에 해당 디렉터리에 대한 처리를 담당
          |             
          li FileVisitResult visitFile(T file, BasicFileAttributes attrs)
          |             
          li FileVisitResult visitFileFailed(T file, IOException exc)
          |             
          li FileVisitResult postVisitDirectory(T dir, IOException exc)
          |             디렉터리 방문 시, 내부 요소들을 모두 처리한 뒤 해당 디렉터리에 대한 처리를 담당
      |     
      details
        summary class SimpleFileVisitor<T> implements FileVisitor<T> SInce 1.7
        |         
        ol
          li preVisitDirectory  : CONTINUE 반환
          |             
          li visitFile : CONTINUE 반환
          |             
          li visitFileFailed : rethrow
          |             
          li postVisitDirectory : 예외없으면 CONTINUE, 있으면 rethrows
      |     
      details
        summary enum FileVisitResult Since 1.7
        |         
        ol
          li CONTINUE : 순회 계속.
          |             
          li TERMINATE : 순회 종료
          |             
          li SKIP_SUBTREE : FileVIsitor#preVisitDirectory에서 반환된 경우, 하위 레벨 트리는 순회하지 않는다
          |             
          li SKIP_SIBLINGS : 현재 요소가 포함된 디렉터리 내부에서, 현재 요소와 동일한 레벨의 요소들은 더 이상 순회하지 않는다.
          |             FileVIsitor#preVisitDirectory에서 반환된 경우, 현재 디렉터리의 내부 요소들과 postVisitDirectory 모두 건너뛴다
    hr
    details
      summary 옵션 관련
      |     
      details
        summary interface CopyCption Since 1.7
      |     
      details
        summary enum StandardCopyOption implements CopyOption Since 1.7
        |         REPLACE_EXISTING, COPY_ATTRIBUTES, ATOMIC_MOVE
      |     
      details
        summary interface OpenOption Since 1.7
      |     
      details
        summary enum StandardOpenOption implements OpenOption Since 1.7
        |         
        ol
          li READ : 읽기
          |             
          li WRITE : 쓰기
          |             
          li APPEND : TRUNCATE_EXISTING 옵션이 있거나 읽기 전용일 때는 적용되지 않는다
          |             
          li TRUNCATE_EXISTING : 파일을 열 때 크기를 0바이트로 줄인다. 읽기 전용으로 열 때는 적용되지 않는다.
          |             
          li CREATE : 기존 파일이 존재하면 열고, 없으면 새로 생성한다.
          |             
          li CREATE_NEW : 신규 파일을 생성한다. 기존 파일이 존재하면 실패한다.
          |             
          li DELETE_ON_CLOSE : close() 호출 시 파일을 지운다(best effort)
          |             
          li SPARSE : 파일이 sparse임을 OS에 알려준다. 신규 파일을 생성하는 경우에만 유효하다.
          |             
          li SYNC : 파일 내용 및 메타데이터의 변경을 동기적으로 물리 장치에 기록한다
          |             
          li DSYNC : 파일 내용 변경을 동기적으로 물리 장치에 기록한다
      |     
      details
        summary enum FileVisitOption Since 1.7
        |         FOLLOW_LINKS : 심볼릭 링크를 따라 들어가는 경우
      |     
      details
        summary enum LinkOption implements OpenOption, CopyOption Since 1.7
        |         NOFOLLOW_LINKS : 심볼릭 링크를 따라 들어가지 않는 경우
    hr
    details
      summary 파일 시스템 관련
      |     
      details
        summary interface Path extends Comparable<Path>, Iterable<Path>, Watchable Since 1.7
        |         
        ol
          li
            | 파일 경로를 가리킨다. 사용자 정의 파일 시스템을 개발하기 위해 만들어짐.
            button.btn-code(path='Repositories/Eclipse/JavaSE/src/nio/PathTest.java', lan='java') 예시 코드 »
          |             
          li static Path of(String first, String... more) Since 11
          |             예. of("/foo", "bar", "gus") → "/foo/bar/gus" // FileSystem#getSeparator == "/"
          |             
          li static Path of(URI uri) Since 11 ↔ toUri
          |             
          li FileSystem getFileSystem() : 이 Path를 만든 FileSystem 반환
          |             
          li Path getRoot()
          |             getFileName, getParent, getNameCount, getName, subpath, toAbsolutePath, toRealPath
          |             
          li Path normalize() : 불필요한 ".", ".." 제거
          |             
          li Path resolve(Path other) + 오버로딩
          |             호출한 path를 기준 디렉터리로 하여, other가 가리키는 지점을 단일 Path로 반환한다.
          |             
          li default Path resolveSibling(Path other) + 오버로딩
          |             (getParent() == null) ? other : getParent().resolve(other);
          |             
          li Path relativize(Path other)
          |             호출한 path를 기준으로, other에 도달하는 상대경로를 반환한다
          |             
          li boolean isAbsolute() + startsWith, endsWith
          |             
          li default File toFile()
      |     
      details
        summary @FunctionalInterface interface PathMatcher Since 1.7
        |         boolean matches(Path path)
      |     
      details
        summary final class Files Since 1.7
        |         
        ol
          li static InputStream newInputStream(Path path, OpenOption... options)
          |             + newOutputStream, newByteChannel, newBufferedReader, newBufferedWriter
          |             
          li static DirectoryStream<Path> newDirectoryStream(Path dir, String glob) + 오버로딩
          |             예. Files.newDirectoryStream(dir, "*.java")); Files.newDirectoryStream(dir, "*.{c,h,cpp,hpp,java}"));
          |             
          li static Path createFile(Path path, FileAttribute<?>... attrs)
          |             + createDirectory, createDirectories(경로 상의 모든 디렉터리 생성), createTempFile, createTempDirectory, createSymbolicLink, createLink(하드 링크)
          |             
          li static void delete(Path path)
          |             + deleteIfExists, copy, move
          |             
          li static Path readSymbolicLink(Path link)
          |             
          li static FileStore getFileStore(Path path)
          |             
          li static bolean isSameFile(Path path, Path path2)
          |             
          li static long mismatch(Path path, Path path2) Since 12
          |             두 파일이 불일치하는 최초의 바이트 위치를 반환한다. 같으면 -1L.
          |             
          li
            | static byte[] readAllBytes(Path path) + readString Since 11, lines, readAllLines Since 1.8
          |             
          li
            | static Path write(Path path, Iterable<? extends CharSequence> lines, OpenOption... options) Since 1.8 + 오버로딩
          |             
          li
            | static Path writeString(Path path, CharSequence csq, Charset cs, OpenOption... options) Since 11 + 오버로딩
          |             
          li static boolean isHidden(Path path)
          |             + isDirectory, isSymbolicLink, isRegularFile, exists, notExists, isReadable, isWritable, isExecutable
          |             
          li static String probeContentType(Path path)
          |             + getFileAttributeView, readAttributes, getAttribute, setAttribute, getLastModifiedTime, setLastModifiedTime, size
          |             
          li
            | static Set<PosixFilePermission> getPosixFilePermissions(Path path, LinkOption... options)
          |             + setPosixFilePermissions, getOwner, setOwner
          |             
          li static Stream<Path> list(Path dir) Since 1.8
          |             
          li
            | static Stream<Path> walk(Path start, int maxDepth, FIleVisitOption... options) Since 1.8 + 오버로딩 + walkFileTree
          |             
          li
            | static Stream<Path> find(Path start, int maxDepth, BiPredicate<Path, BasicFileAttributes> matcher, FIleVisitOption... options) Since 1.8
      |     
      details
        summary abstract class FileStore Since 1.7
        |         
        ol
          li abstract String name()
          |             + type, isReadonly, getTotalSpace, getUsableSpace, getBlockSize, getUnallocatedSpace, supportsFileAttributeView, getFileStoreAttributeView, getAttribute
      |     
      details
        summary abstract class FileSystem implements Closeable Since 1.7
        |         
        ol
          li abstract FileSystemProvider provider()
          |             
          li abstract boolean isOpen()
          |             
          li abstract boolean isReadOnly()
          |             
          li abstract String getSeparator()
          |             
          li abstract Iterable<Path> getRootDirectories()
          |             
          li abstract Iterable<FileStore> getFileStores()
          |             
          li abstract Set<String> supportedFIleAttributeViews()
          |             
          li abstract Path getPath(String first, String... more)
          |             
          li abstract PathMatcher getPathMatcher(String syntaxAndPattern)
          |             
          li abstract UserprincipalLookupService getUserPrincipalLookupService()
          |             
          li abstract WatchService newWatchService()
      |     
      details
        summary final class FileSystems Since 1.7
        |         
        ol
          li FileSystem 팩터리
          |             
          li static FileSystem getDefault()
          |             
          li static FileSystem getFileSystem(URI uri) + 오버로딩
          |             
          li static FileSystem newFileSystem(Path path, ClassLoader loader)
    hr
