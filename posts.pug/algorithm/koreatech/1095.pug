include ../../../source/skeleton.pug

+post('1095 풀이', 'algorithm, judge.koreatech, 1095', 'judge.koreatech.ac.kr 1095 문제 풀이')
    h1 1095: 자연스러운 정렬
    div
        h2 풀이
        +codeBtn('/Repositories/Single/koreatech/Main1095.java', 'java')
        +asCode('javascript', '$-10,000.00 같은 표기까지 고려한 JavaScript 코드').
            /**
             * Do natural string compare
             */
            static compareString(str1, str2) {
                if (str1 === str2)
                    return 0
                let ori1 = str1
                let ori2 = str2
                /* Cases when treat a positive/negative sign followed by digits as Number; 부호 붙은 숫자를 수로 간주하는 경우
                   1. The sign is the first character of string; 부호 자체가 문자열 시작
                   2. The sign has a space ahead; 부호 앞에 공백이 존재하여 별개 파트로 간주 가능
                   3. The sign has a currency sign ahead; 부호 앞에 화폐 기호 [$¥£₡₱€₩₭฿]가 존재 */
                let numPartRegex1 = /(((^|[\s$¥£₡₱€₩₭฿])[+-])?(\d+(,\d+)*(\.\d+)?)|(\d?\.\d+)|(\d+))/
                let numPartRegex2 = /(([\s$¥£₡₱€₩₭฿][+-])?(\d+(,\d+)*(\.\d+)?)|(\d?\.\d+)|(\d+))/
                let startWithNumberRegex1 = new RegExp(`^${numPartRegex1.source}`)
                let startWithNumberRegex2 = new RegExp(`^${numPartRegex2.source}`)
                let strPartRegex1 = new RegExp(`^((?!${numPartRegex1.source})[\\d\\D])+`, 'm')
                let strPartRegex2 = new RegExp(`^((?!${numPartRegex2.source})[\\d\\D])+`, 'm')
                while (true) {
                    if (str1.length * str2.length == 0)
                        return str1.length - str2.length
                    let isStr1StartWithNumber = ((str1 === ori1) ? startWithNumberRegex1 : startWithNumberRegex2).test(str1)
                    let isStr2StartWithNumber = ((str2 === ori2) ? startWithNumberRegex1 : startWithNumberRegex2).test(str2)
                    if (isStr1StartWithNumber && isStr2StartWithNumber) {
                        let num1 = parseFloat(str1.match(((str1 === ori1) ? startWithNumberRegex1 : startWithNumberRegex2))[0].replace(/[^\-\d\.]/g, ''))
                        let num2 = parseFloat(str2.match(((str2 === ori2) ? startWithNumberRegex1 : startWithNumberRegex2))[0].replace(/[^\-\d\.]/g, ''))
                        if (Math.abs(num1 - num2) >= Number.EPSILON)
                            return num1 - num2
                        str1 = str1.replace(((str1 === ori1) ? startWithNumberRegex1 : startWithNumberRegex2), '')
                        str2 = str2.replace(((str2 === ori2) ? startWithNumberRegex1 : startWithNumberRegex2), '')
                        continue
                    }
                    if (isStr1StartWithNumber)
                        return -1
                    if (isStr2StartWithNumber)
                        return 1
                    let text1 = str1.match(((str1 === ori1) ? strPartRegex1 : strPartRegex2))[0]
                    let text2 = str2.match(((str2 === ori2) ? strPartRegex1 : strPartRegex2))[0]
                    let result = text1.localeCompare(text2)
                    if (result !== 0)
                        return result
                    str1 = str1.replace(((str1 === ori1) ? strPartRegex1 : strPartRegex2), '')
                    str2 = str2.replace(((str2 === ori2) ? strPartRegex1 : strPartRegex2), '')
                }
            }
