include ../../source/skeleton.pug
+post('Redis', 'Redis', 'Redis 정리')
    h1 참고자료
    ul
        li: +asA('https://redis.io/documentation', '공식 문서')
        li: +asA('http://redisgate.kr/', '레디스 엔터프라이즈 버전')
        li: +asA('https://github.com/redis-essentials/book', 'Redis Essentials')

    h1 Redis
    ul
        li 인메모리 저장소 + 물리 장치 백업
        li 메시지 브로커 기능 보유 : Pub/Sub
        li BSD 라이선스
    div
        h2 redis-server/redis-cli
        ol
            li 서버 실행
            +asCode('shell') $ redis-server --port 27017
            li 서버 접속
            +asCode('shell') $ redis-cli -p 27017
            li help
            +asCode('shell').
                > help
                > help @&lt;group>
                > help &lt;command>

        h2 Data type
        ol
            li Binary-safe string : 임의 이진 문자열(최대 512MB)
            li List : 순서가 있는 string 목록
            li Set : 순서 없는 string 집합
            li Sorted set : 각 원소는 score라 불리는 가중치(정렬키)를 가짐
            li Hash : field -&gt; value 매핑. field, value 모두 string 타입
            li Bit array : string을 비트열로 다룰 수 있다
            li HyperLogLog : 집합 크기 추정에 이용되는 확률 자료형
            li Stream : append만 가능한 유사 맵

        h2: +asA('https://redis.io/commands')
        p Redis 명령어들은 연관성에 따라 그룹에 묶여있다
        div
            h3 Key
            table
                +ths('명령','사용','설명')
                tr
                    td.marker COPY since 6.2.0
                    td COPY source destination [DB destination-db] [REPLACE]
                    td: ul
                        li source 키의 값을 destination 키로 복사
                        li 복사됐으면 1, 아니면 0 반환
                tr
                    td.marker DEL since 1.0.0
                    td DEL key [key ...]
                    td: ul
                        li 키, 값 모두 동기적으로 삭제
                        li 삭제된 수 반환
                tr
                    td.marker DUMP since 2.6.0
                    td DUMP key
                    td: ul
                        li 값을 Redis 포맷으로 직렬화하여 반환
                        p expire time은 포함되지 않음
                        li RESTORE로 역직렬화 가능
                tr
                    td.marker EXISTS since 1.0.0
                    td EXISTS key [key ...]
                    td 존재하는 키의 개수 반환
                tr
                    td.marker EXPIRE since 1.0.0
                    td EXPIRE key seconds
                    td: ul
                        li 지정 시간(초) 후 키 삭제
                        li 설정됐으면 1, 아니면 0반환
                        li INCR, RENAME 명령은 만료 시각 정보가 유지됨에 유의
                tr
                    td.marker EXPIREAT since 1.2.0
                    td EXPIREAT key timestamp
                    td: ul
                        li 지정 시각 이후 키 삭제
                        li 설정됐으면 1, 아니면 0반환
                        li INCR, RENAME 명령은 만료 시각 정보가 유지됨에 유의
                tr
                    td.marker KEYS since 1.0.0
                    td KEYS pattern
                    td
                        span.hover-content(template-id='glob-style-pattern') pattern(GLOB style)
                        | 에 일치하는 키 목록 반환
                tr
                    td.marker MIGRATE since 2.6.0
                    td MIGRATE host port key|"" destination-db timeout [COPY] [REPLACE] [AUTH password] [KEYS key [key ...]]
                    td: ul
                        li 데이터를 다른 서버로 옮긴다
                        li COPY : 원본을 지우지 않는다
                        li KEYS since 3.0.6 : 여러 개를 이동할 때, 앞부분 key를 ""로 하고 사용
                tr
                    td.marker MOVE since 1.0.0
                    td MOVE key db
                    td 데이터를 다른 db로 옮긴다. 기본 0 ~ 15번 db가 존재하며, 이미 key가 존재하면 옮기지 않는다.
                        +asCode('shell').
                            127.0.0.1:6379> get key1
                            "hello"
                            127.0.0.1:6379> move key1 1
                            (integer) 1
                            127.0.0.1:6379> get key1
                            (nil)
                            127.0.0.1:6379> select 1
                            OK
                            127.0.0.1:6379[1]> get key1
                            "hello"
                tr
                    td.marker OBJECT since 2.2.3
                    td OBJECT subcommand [arguments [arguments ...]]
                    td: ul
                        li 키에 대한 정보 획득
                        li OBJECT HELP
                        li OBJECT ENCODING key : 상세 데이터 타입
                        li OBJECT IDLETIME key : 사용하지 않은 시간(초)
                tr
                    td.marker PERSIST since 2.2.0
                    td PERSIST key
                    td: ul
                        li expire time 삭제
                        li 삭제했으면 1, 아니면 0 반환
                tr
                    td.marker PEXPIRE since 2.6.0
                    td PEXPIRE key milliseconds
                    td: ul
                        li 밀리초 단위 EXPIRE
                        li 설정됐으면 1, 아니면 0 반환
                tr
                    td.marker PEXPIREAT since 2.6.0
                    td PEXPIREAT key milliseconds-timestamp
                    td: ul
                        li 밀리초 단위 EXPIREAT
                        li 설정됐으면 1, 아니면 0 반환
                tr
                    td.marker PTTL since 2.6.0
                    td PTTL key
                    td 밀리초 단위 TTL
                tr
                    td.marker RANDOMKEY since 1.0.0
                    td RANDOMKEY
                    td 임의 키 반환
                tr
                    td.marker RENAME since 1.0.0
                    td RENAME key newkey
                    td key를 변경한다. 기존 newkey는 덮어씌어진다
                tr
                    td.marker RENAMENX since 1.0.0
                    td RENAMENX key newkey
                    td: ul
                        li newkey가 존재하지 않는 경우만 RENAME
                        li 성공했으면 1, 아니면 0 반환
                tr
                    td.marker RESTORE since 2.6.0
                    td RESTORE key ttl serialized-value [REPLACE] [ABSTTL] [IDLETIME seconds] [FREQ frequency]
                    td: ul
                        li Redis 포맷 문자열로부터 역직렬화
                        li ttl은 밀리초 단위로, 0이면 무기한
                        li ABSTTL : 설정한 경우, ttl을 timestamp로 해석한다
                        li IDLETIME, FREQ : OBJECT 명령과 관계된 초기값 설정
                tr
                    td.marker SCAN since 2.8.0
                    td SCAN cursor [MATCH pattern] [COUNT count] [TYPE type]
                    td: ul
                        li
                            span.hover-content(template-id='glob-style-pattern') pattern(GLOB style)
                            | 에 일치하는 키 목록을 count(기본 10)개씩 잘랐을 때, cursor번째 페이지 반환
                        li TYPE since 6.0 : 값이 type에 해당하는 키만 검색
                tr
                    td.marker SORT since 1.0.0
                    td SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]
                    td: ul
                        li list, set, sorted set 데이터를 정렬하여 획득한다
                        li ALPHA : 정렬 대상이 문자열인 경우
                        li DESC : 내림차순 정렬
                        li GET pattern : RDBMS의 조인과 유사
                        +asCode('shell').
                            # 학생 이름 5개 저장
                            127.0.0.1:6379> sadd student-name name5 name1 name2 name3 name4
                            (integer) 5
                            # 점수 저장
                            127.0.0.1:6379> mset name5-score 3 name1-score 10 name2-score 0 name3-score 7
                            OK
                            # 각 학생의 점수 획득(이름순)
                            127.0.0.1:6379> sort student-name get *-score alpha
                            1) "10"
                            2) "0"
                            3) "7"
                            4) (nil)
                            5) "3"
                        li GET # : 원소 자체도 반환
                        +asCode('shell').
                            # 각 학생의 점수 획득(이름순)
                            127.0.0.1:6379> sort student-name get # get *-score alpha
                             1) "name1"
                             2) "10"
                             3) "name2"
                             4) "0"
                             5) "name3"
                             6) "7"
                             7) "name4"
                             8) (nil)
                             9) "name5"
                            10) "3"
                        li BY pattern : 지정한 키의 값으로 정렬
                        +asCode('shell').
                            # 각 학생의 점수 획득(점수순)
                            127.0.0.1:6379> sort student-name by *-score get # get *-score desc
                             1) "name1"
                             2) "10"
                             3) "name3"
                             4) "7"
                             5) "name5"
                             6) "3"
                             7) "name4"
                             8) (nil)
                             9) "name2"
                            10) "0"
                        li GET pattern GET pattern
                        +asCode('shell').
                            127.0.0.1:6379> mset name1-age 11 name5-age 55 name3-age 33
                            OK
                            127.0.0.1:6379> sort student-name get # get *-score get *-age alpha
                             1) "name1"
                             2) "10"
                             3) "11"
                             4) "name2"
                             5) "0"
                             6) (nil)
                             7) "name3"
                             8) "7"
                             9) "33"
                            10) "name4"
                            11) (nil)
                            12) (nil)
                            13) "name5"
                            14) "3"
                            15) "55"
                tr
                    td.marker TOUCH since 3.2.1
                    td TOUCH key [key ...]
                    td: ul
                        li 마지막 접근 시각을 현재로 설정
                        li 설정한 개수 반환
                tr
                    td.marker TTL since 1.0.0
                    td TTL key
                    td 남은 유효 시간(초) 반환. 삭제됐으면 -2, 제한 없으면 -1
                tr
                    td.marker TYPE since 1.0.0
                    td TYPE key
                    td 데이터 타입 반환; string, list, set, zset, hash, stream, none
                tr
                    td.marker UNLINK since 4.0.0
                    td UNLINK key [key ...]
                    td DEL과 달리 값을 백그라운드 스레드에서 삭제. 개수가 많을수록 UNLINK가 더 빠르다
                tr
                    td.marker WAIT since 3.0.0
                    td WAIT numreplicas timeout
                    td: ul
                        li 이전 모든 write 명령이 numreplicas개의 복제본에 도달하기까지 최대 timeout 밀리초 대기
                        li 도달한 복제본 개수 반환

            h3 String
            table
                +ths('명령','사용','설명')
                tr
                    td.marker APPEND since 2.0.0
                    td APPEND key value
                    td 키가 이미 존재하면 append, 없으면 set. 연산 후의 문자열 길이 반환.
                tr
                    td.marker BITCOUNT since 2.6.0
                    td BITCOUNT key [start end]
                    td: ul
                        li 문자열 내 set bit 개수 반환
                        li Closed range [start, end] 인덱스로 음수 가능
                tr
                    td.marker BITFIELD since 3.2.0
                    td BITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]
                    td
                        ul
                            li 문자열을 비트 배열로 간주하여 GET, SET, INCRBY 연산들을 수행한다
                            li type : 부호 있는 64비트, 부호 없는 63비트까지 가능.
                            p 예. i5(부호 있는 5비트), u4(부호 없는 4비트)
                            li offset : 시작 위치. 정수만 이용하는 경우 bit단위, #를 붙이면 type 크기 단위
                            li OVERFLOW : WRAP(default, 오버/언더플로우 비트 무시), SAT(오버/언더플로우 시 최대/최소값으로), FAIL(실패, NULL 반환)
                            p OVERFLOW 이후 등장하는 INCRBY 명령에만 영향을 미침에 주의
                            li 반환 : SET(이전 값), GET(현재 값), INCRBY(신규 값)
                        +asCode('shell').
                            127.0.0.1:27017> set time ''
                            OK
                            127.0.0.1:27017> bitfield time SET u6 #0 11 SET u6 #1 33 SET u6 #2 55 GET u6 #0 GET u6 #1 GET u6 #2 INCRBY u6 #0 1 INCRBY u6 #1 1 INCRBY u6 #2 1
                            1) (integer) 0
                            2) (integer) 0
                            3) (integer) 0
                            4) (integer) 11
                            5) (integer) 33
                            6) (integer) 55
                            7) (integer) 12
                            8) (integer) 34
                            9) (integer) 56
                tr
                    td.marker BITOP since 2.6.0
                    td BITOP operation destkey key [key ...]
                    td 소스 키들의 값에 대한 AND, OR, XOR, NOT 결과를 destkey에 저장한다
                tr
                    td.marker BITPOS since 2.8.7
                    td BITPOS key bit [start] [end]
                    td bit와 일치하는 인덱스를 [start, end] 사이(음수 인덱스 가능)에서 구한다. 없는 경우 -1 반환
                tr
                    td.marker DECR since 1.0.0
                    td DECR key
                    td 주어진 키의 정수 1 감소. 없으면 0. 값은 signed 64bit. 연산 후의 값 반환.
                tr
                    td.marker DECRBY since 1.0.0
                    td DECRBY key decrement
                    td 주어진 키의 정수 decrement 감소. 없으면 0. 값은 signed 64bit. 연산 후의 값 반환.
                tr
                    td.marker GET since 1.0.0
                    td GET key
                    td key에 대한 값을 반환한다. 없으면 nil
                tr
                    td.marker GETBIT since 2.2.0
                    td GETBIT key offset
                    td offset번째 비트를 반환.
                tr
                    td.marker GETDEL since 6.2.0
                    td GETDEL key
                    td GET 실행 후 DEL(IFF key가 존재하고, 값이 string일 경우에만)
                tr
                    td.marker GETEX since 6.2.0
                    td GETEX key [EX seconds|PX milliseconds|EXAT timestamp|PXAT milliseconds-timestamp|PERSIST]
                    td GET 실행 후, 
                        +goto('키 수명')
                        |  변경
                tr
                    td.marker GETRANGE since 2.4.0
                    td GETRANGE key start end
                    td key에 대하여, 문자열의 [start, end] 만큼 반환한다. 음수 인덱스 가능
                tr
                    td.marker GETSET since 1.0.0
                    td GETSET key value
                    td SET 실행 후, 이전 값 반환
                tr
                    td.marker INCR since 1.0.0
                    td INCR key
                    td 주어진 키의 정수 1 증가. 없으면 0. 값은 signed 64bit. 연산 후의 값 반환.
                tr
                    td.marker INCRBY since 1.0.0
                    td INCRBY key increment
                    td 주어진 키의 정수 increment 증가. 없으면 0. 값은 signed 64bit. 연산 후의 값 반환.
                tr
                    td.marker INCRBYFLOAT since 2.6.0
                    td INCRBYFLOAT key increment
                    td 주어진 키의 실수 increment(음수 가능) 만큼 변경. 없으면 0. 값은 double. 연산 후의 값 문자열로 반환.
                tr
                    td.marker MGET since 1.0.0
                    td MGET key [key ...]
                    td 각 키에 대해 get 하여 배열로 반환.
                        +asCode('shell').
                            127.0.0.1:27017> mget k1 k2 not_exists_key
                            1) "v1"
                            2) "v2"
                            3) (nil)
                tr
                    td.marker MSET since 1.0.1
                    td MSET key value [key value ...]
                    td 원자적으로 주어진 키-값 쌍들을 모두 설정한다.
                tr
                    td.marker MSETNX since 1.0.1
                    td MSETNX key value [key value ...]
                    td 모든 키가 신규인 경우 mset 실행하고 1 반환. 그 외엔 0 반환
                tr
                    td.marker PSETEX since 2.6.0
                    td PSETEX key milliseconds value
                    td 밀리초 단위 SETEX
                tr
                    td.marker SET since 1.0.0
                    td SET key value [EX seconds|PX milliseconds|EXAT timestamp|PXAT milliseconds-timestamp|KEEPTTL] [NX|XX] [GET]
                    td: ul
                        li 원자적으로 key에 대하여 value를 할당한다. 이전에 설정한 값, 유효 기간을 덮어쓴다.
                        +pos('키 수명')
                        li EX seconds : 유효 기간(s)
                        li PX milliseconds : 유효 기간(ms)
                        li EXAT timestamp-seconds : 만료 시각(s)
                        li PXAT timestamp-milliseconds : 만료 시각(ms)
                        li NX : 신규 키일 때만 설정 // 이를 이용해 잠금 구현 가능
                        li XX : 중복 키일 때만 설정
                        li KEEPTTL : 이전 유효 기간을 유지
                        li GET : 이전 값 반환(없으면 nil)
                tr
                    td.marker SETBIT since 2.2.0
                    td SETBIT key offset value
                    td offset번째 비트를 value(0 | 1)로 변경. 이전 비트값 반환.
                tr
                    td.marker SETEX since 2.0.0
                    td SETEX key seconds value
                    td == SET key value EX seconds
                tr
                    td.marker SETNX since 1.0.0
                    td SETNX key value
                    td: ul
                        li key가 존재하지 않을 경우에만 value 설정
                        li 설정했으면 1, 아니면 0 반환
                tr
                    td.marker SETRANGE since 2.2.0
                    td SETRANGE key offset value
                    td key에 대하여, offset(>=0) 위치부터 value로 덮어쓴다. 빈 자리는 \x00으로 채워지며, 설정 후 문자열 길이를 반환한다.
                        +asCode('shell').
                            127.0.0.1:27017> set msg hello
                            OK
                            127.0.0.1:27017> setrange msg 8 hello
                            (integer) 13
                            127.0.0.1:27017> get msg
                            "hello\x00\x00\x00hello"
                tr
                    td.marker STRALGO since 6.0.0
                    td STRALGO algo-name arg [arg ...]
                    td
                        ol
                            li STRALGO LCS [KEYS ...] [STRINGS ...] [LEN] since 6.0.0
                            p 두 문자열의 공통 시퀀스를 구한다.
                            +asCode('shell').
                                > stralgo lcs strings humble-bundle bundle-humble
                                "ble-ule"
                tr
                    td.marker STRLEN since 2.2.0
                    td STRLEN key
                    td 문자열 길이 반환. 값이 없어도 0
                        +asCode('shell').
                            127.0.0.1:27017> strlen not_exists_key
                            (integer) 0

            h3 List
            p 값은 입력된 순서대로 저장되고, 값이 하나도 없으면 키가 삭제된다
            table
                +ths('명령','사용','설명')
                tr
                    td.marker LPUSH
                    td LPUSH key element [element ...]
                    td 왼쪽에 값 추가. 이후 리스트 크기 반환
                tr
                    td.marker RPUSH
                    td RPUSH key element [element ...]
                    td 오른쪽에 값 추가. 이후 리스트 크기 반환
                tr
                    td.marker LPUSHX
                    td LPUSHX key element [element ...]
                    td 리스트가 존재하면 왼쪽에 값 추가. 이후 리스트 크기 반환
                tr
                    td.marker RPUSHX
                    td RPUSHX key element [element ...]
                    td 리스트가 존재하면 오른쪽에 값 추가. 이후 리스트 크기 반환
                tr
                    td.marker LPOP
                    td LPOP key
                    td 리스트 왼쪽 값 삭제 후 반환
                tr
                    td.marker RPOP
                    td RPOP key
                    td 리스트 오른쪽 값 삭제 후 반환
                tr
                    td.marker BLPOP
                    td BLPOP key [key ...] timeout
                    td 지정한 리스트들을 순회하여, 최초로 발견된 왼쪽 값 삭제 후 반환. 없으면 timeout(초)만큼 대기.
                tr
                    td.marker BRPOP
                    td BRPOP key [key ...] timeout
                    td 지정한 리스트들을 순회하여, 최초로 발견된 오른쪽 값 삭제 후 반환. 없으면 timeout(초)만큼 대기.
                tr
                    td.marker LINDEX
                    td LINDEX key index
                    td index(음수 가능) 번째 값 반환
                tr
                    td.marker LRANGE
                    td LRANGE key start stop
                    td [start, stop] 범위의 값 반환(음수 인덱스 가능)
                tr
                    td.marker LSET
                    td LSET key index element
                    td index(음수 가능) 번째 값을 element로 교체
                tr
                    td.marker LINSERT
                    td LINSERT key BEFORE|AFTER pivot element
                    td pivot 전/후에 element를 삽입
                tr
                    td.marker LLEN
                    td LLEN key
                    td 리스트 크기 반환
                tr
                    td.marker LREM
                    td LREM key count element
                    td element를 count개 삭제, count == 0이면 전부 삭제, count &lt; 0이면 오른쪽부터 삭제
                tr
                    td.marker LTRIM
                    td LTRIM key start stop
                    td [start, stop] 범위(음수 인덱스 가능)만 남기고 나머지 삭제
                tr
                    td.marker RPOPLPUSH
                    td RPOPLPUSH source destination
                    td 원자적으로 rpop + lpush 실행
                tr
                    td.marker BRPOPLPUSH
                    td BRPOPLPUSH source destination timeout
                    td 리스트에 값이 있으면 rpoplpush 실행, 없으면 timeout(초)만큼 대기

            h3 Set
            table
                +ths('명령','사용','설명')
                tr
                    td.marker SADD
                    td SADD key member [member ...]
                    td 집합에 원소 추가. 실제 추가된 개수 반환
                tr
                    td.marker SREM
                    td SREM key member [member ...]
                    td 집합에서 원소 삭제. 실제 제거된 개수 반환
                tr
                    td.marker SISMEMBER
                    td SISMEMBER key member
                    td 집합에 포함되면 1, 아니면 0
                tr
                    td.marker SCARD
                    td SCARD key
                    td 집합 크기 반환
                tr
                    td.marker SMEMBERS
                    td SMEMBERS key
                    td 전체 원소 반환. 집합이 클수록 느려진다
                tr
                    td.marker SSCAN
                    td SSCAN key cursor [MATCH pattern] [COUNT count]
                    td 집합이 큰 경우, 조회를 작은 단위(cursor)로 나누어 수행한다.
                        span.hover-content(template-id='glob-style-pattern') pattern(GLOB style)
                        | 이 있다면 일치하는 원소만 반환
                tr
                    td.marker SRANDMEMBER
                    td SRANDMEMBER key [count]
                    td 무작위로 count(default 1)개 반환
                tr
                    td.marker SPOP
                    td SPOP key [count]
                    td 무작위로 count(default 1)개 삭제 후 반환
                tr
                    td.marker SUNION
                    td SUNION key [key ...]
                    td 합집합 반환
                tr
                    td.marker SINTER
                    td SINTER key [key ...]
                    td 교집합 반환
                tr
                    td.marker SDIFF
                    td SDIFF key [key ...]
                    td 차집합 반환
                tr
                    td.marker SUNIONSTORE
                    td SUNIONSTORE destination key [key ...]
                    td sunion 결과 저장
                tr
                    td.marker SINTERSTORE
                    td SINTERSTORE destination key [key ...]
                    td sinter 결과 저장
                tr
                    td.marker SDIFFSTORE
                    td SDIFFSTORE destination key [key ...]
                    td sdiff 결과 저장
                tr
                    td.marker SMOVE
                    td SMOVE source destination member
                    td member가 source에 포함된다면 destination으로 이동하고 1 반환. 아니면 0

            h3 Sorted Set
            p key-value 관계에 정렬을 위한 score가 추가된다. key-(score, value), 같은 score 사이에서는 value를 기준으로 정렬된다
            table
                +ths('명령','사용','설명')
                tr
                    td.marker ZADD
                    td ZADD key [NX|XX] [CH] [INCR] score member [score member ...]
                    td
                        ul
                            li NX : 멤버가 존재하면 스킵, XX : 멤버가 존재하면 score 갱신
                            li INCR : score를 덮어쓰지 않고, 값만큼 증가
                            li 리턴 : 신규로 추가된 원소 개수만(기본), score 갱신된 개수도 포함(CH)
                tr
                    td.marker ZINCRBY
                    td ZINCRBY key increment member
                    td 스코어를 increment만큼 증가한 뒤 반환
                tr
                    td.marker ZSCORE
                    td ZSCORE key member
                    td 원소의 스코어 반환
                tr
                    td.marker ZRANK
                    td ZRANK key member
                    td 원소의 index(오름차순) 반환
                tr
                    td.marker ZREVRANK
                    td ZREVRANK key member
                    td 원소의 index(내림차순) 반환
                tr
                    td.marker ZCARD
                    td ZCARD key
                    td 집합 크기 반환
                tr
                    td.marker ZCOUNT
                    td ZCOUNT key min max
                    td 스코어가 [min, max]에 포함되는 원소 개수 반환. 모두 가져오려면 -inf, +inf 이용
                tr
                    td.marker ZLEXCOUNT
                    td ZLEXCOUNT key min max
                    td 동일 스코어 상에서, 값을 기준으로 범위 안에 있는 원소 개수 반환.
                        br
                        |  min, max 앞에 [ 또는 (를 명시해야하며, 모두 가져오려면 -, + 이용
                tr
                    td.marker ZRANGE
                    td ZRANGE key start stop [WITHSCORES]
                    td 작은 것부터 [start, stop] 범위(음수 인덱스 가능) 원소 반환
                tr
                    td.marker ZRANGEBYLEX
                    td ZRANGEBYLEX key min max [LIMIT offset count]
                    td 동일 스코어 상에서, 값을 기준으로 작은 것부터 반환. min, max 앞에 [ 또는 (를 명시해야하며, 모두 가져오려면 -, + 이용
                tr
                    td.marker ZRANGEBYSCORE
                    td ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
                    td 스코어가 작은 것부터 [min, max]에 포함되는 원소 반환. 모두 가져오려면 -inf, +inf 이용. 경계값 미포함하려면 (min, (max 이용
                tr
                    td.marker ZREVRANGE
                    td ZREVRANGE key start stop [WITHSCORES]
                    td 큰 것부터 [start, stop] 범위(음수 인덱스 가능) 원소 반환
                tr
                    td.marker ZREVRANGEBYLEX
                    td ZREVRANGEBYLEX key max min [LIMIT offset count]
                    td 동일 스코어 상에서, 값을 기준으로 큰 것부터 반환. min, max 앞에 [ 또는 (를 명시해야하며, 모두 가져오려면 -, + 이용
                tr
                    td.marker ZREVRANGEBYSCORE
                    td ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]
                    td 스코어가 큰 것부터 [min, max]에 포함되는 원소 반환. 모두 가져오려면 [-inf, +inf] 이용. 경계값 미포함하려면 (min, (max 이용
                tr
                    td.marker ZREM
                    td ZREM key member [member ...]
                    td 원소 삭제. 삭제된 개수 반환
                tr
                    td.marker ZREMRANGEBYLEX
                    td ZREMRANGEBYLEX key min max
                    td 동일 스코어 상에서, 값 기준으로 원소 삭제
                tr
                    td.marker ZREMRANGEBYRANK
                    td ZREMRANGEBYRANK key start stop
                    td 인덱스(음수 가능) 기준으로 원소 삭제
                tr
                    td.marker ZREMRANGEBYSCORE
                    td ZREMRANGEBYSCORE key min max
                    td 스코어 기준으로 원소 삭제
                tr
                    td.marker ZUNIONSTORE
                    td ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
                    td
                        ul
                            li 합집합 저장
                            li WEIGHTS : 각 스코어에 곱할 가중치
                            li AGGREGATE : SUM(스코어 합), MIN(스코어 평균), MAX(최대 스코어)
                tr
                    td.marker ZINTERSTORE
                    td ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
                    td
                        ul
                            li 교집합 저장
                            li WEIGHTS : 각 스코어에 곱할 가중치
                            li AGGREGATE : SUM(스코어 합), MIN(스코어 평균), MAX(최대 스코어)
                tr
                    td.marker ZSCAN
                    td ZSCAN key cursor [MATCH pattern] [COUNT count]
                    td 집합이 큰 경우, 조회를 작은 단위(cursor)로 나누어 수행한다.
                        span.hover-content(template-id='glob-style-pattern') pattern(GLOB style)
                        | 이 있다면 일치하는 원소만 반환
                tr
                    td.marker ZPOPMAX
                    td ZPOPMAX key [count]
                    td 큰 원소부터 pop
                tr
                    td.marker ZPOPMIN
                    td ZPOPMIN key [count]
                    td 작은 원소부터 pop
                tr
                    td.marker BZPOPMAX
                    td BZPOPMAX key [key ...] timeout
                    td 큰 원소부터 pop. 없으면 timeout(초)만큼 대기
                tr
                    td.marker BZPOPMIN
                    td BZPOPMIN key [key ...] timeout
                    td 작은 원소부터 pop. 없으면 timeout(초)만큼 대기

            h3 Hash
            p 하나의 key에 대해 여러(40억개) field-value 쌍을 가질 수 있다
            table
                +ths('명령','사용','설명')
                tr
                    td.marker HSET
                    td HSET key field value [field value ...]
                    td key에 대해 field-value 쌍 추가. 기존 value는 덮어씌어진다. 추가된 쌍의 개수 반환
                tr
                    td.marker HSETNX
                    td HSETNX key field value
                    td field가 없는 경우에만 field-value 쌍 추가. 추가된 쌍의 개수 반환
                tr
                    td.marker HGET
                    td HGET key field
                    td 지정한 field에 대해 value 반환. 없으면 nil
                tr
                    td.marker HMGET
                    td HMGET key field [field ...]
                    td 지정한 field들에 대해 value 반환. 없으면 nil
                tr
                    td.marker HDEL
                    td HDEL key field [field ...]
                    td 지정한 field들에 대해 field-value 쌍 제거. 제거된 개수 반환.
                tr
                    td.marker HLEN
                    td HLEN key
                    td field-value 쌍 개수
                tr
                    td.marker HKEYS
                    td HKEYS key
                    td field 목록 반환
                tr
                    td.marker HVALS
                    td HVALS key
                    td value 목록 반환
                tr
                    td.marker HGETALL
                    td HGETALL key
                    td field-value 목록 반환
                tr
                    td.marker HSCAN
                    td HSCAN key cursor [MATCH pattern] [COUNT count]
                    td 일정 개수(count)씩 field-value 목록 조회.
                        span.hover-content(template-id='glob-style-pattern') pattern(GLOB style)
                        | 이 지정된 경우 field에 적용된다.
                tr
                    td.marker HEXISTS
                    td HEXISTS key field
                    td field를 포함하는지 여부 반환(0, 1)
                tr
                    td.marker HINCRBY
                    td HINCRBY key field increment
                    td value += increment, 이전 값이 없으면 value = increment
                tr
                    td.marker HINCRBYFLOAT
                    td HINCRBYFLOAT key field increment
                    td value += increment, 이전 값이 없으면 value = increment
                tr
                    td.marker HSTRLEN
                    td HSTRLEN key field
                    td value의 바이트 길이 반환

            h3 Stream since 5.0
            p 스트림 : 온도, Memory, Log 등 동종 데이터의 연속적인 발생. 이전 값을 수정하지 않고, 새로 추가되기만 한다.
            ul
                li 동종 : key로 구분한다
                li 새로 추가 : 데이터의 선후 관계는 ID로 구분한다. ID가 이전보다 작으면 추가 실패. ID를 *로 지정하는 경우, 서버에서 자동으로 millisecondsTime-sequenceNumber로 할당
            table
                +ths('명령','사용','설명')
                tr
                    td.marker XADD
                    td XADD key ID field value [field value ...]
                    td key에 대해 field-value 쌍 추가.
                        +asCode('shell', '예. 센서 데이터 추가. 최대 길이는 10').
                            xadd sensor-1 maxlen 10 * temperature 36.5
                tr
                    td.marker XREAD
                    td XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]
                    td 지정한 id보다 큰 데이터를 count개(default 1) 반환.
                tr
                    td.marker XDEL
                    td XDEL key ID [ID ...]
                    td 지정한 ID의 엔트리 삭제
                tr
                    td.marker XLEN
                    td XLEN key
                    td 엔트리(field-value 쌍) 개수 반환. key가 없어도 0
                tr
                    td.marker XRANGE
                    td XRANGE key start end [COUNT count]
                    td ID가 [start, end] 내에 있는 엔트리 반환. 전체를 가져오려면 -, + 이용.
                tr
                    td.marker XREVRANGE
                    td XREVRANGE key end start [COUNT count]
                    td XRANGE의 역순
                tr
                    td.marker XTRIM
                    td XTRIM key MAXLEN [~] count
                    td 최대 count개의 엔트리만 남기고 오래된 것부터 삭제. ~를 지정한 경우, 다른 입출력에 지장이 없는 한도로 작업
                tr
                    td.marker XGROUP
                    td XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]
                    td: ul
                        li CREATE : 소비자그룹 생성
                        p id를 지정한 경우 다음 엔트리부터, $를 지정한 경우 그룹 생성 직후 엔트리부터 소비
                        li DESTROY : 소비자그룹 삭제
                        li DELCONSUMER : 소비자 삭제
                        li SETID : 소비 기준 ID 재설정
                tr
                    td.marker XREADGROUP
                    td XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]
                    td 소비자로써 엔트리 소비. ID 지정 대신 '>'를 이용하면 알아서 다음 엔트리를 소비한다.
                tr
                    td.marker XACK
                    td XACK key group ID [ID ...]
                    td 소비 완료 표시
                tr
                    td.marker XPENDING
                    td XPENDING key group [start end count] [consumer]
                    td 소비중인 엔트리 반환
                tr
                    td.marker XCLAIM
                    td XCLAIM key group consumer min-idle-time ID [ID ...] [IDLE ms] [TIME ms-unix-time] [RETRYCOUNT count] [FORCE] [JUSTID]
                    td: ul
                        li min-idle-time(밀리초) 이상 소비중인 엔트리를 consumer가 처리
                        li 기본값으로 IDLE 0이며, 따라서 동일 명령으로 다른 소비자가 동일 엔트리를 가져가지 못하게 된다
                        li 처리 후 XACK로 표시해야 한다
                tr
                    td.marker XINFO
                    td XINFO [CONSUMERS key groupname] [GROUPS key] [STREAM key] [HELP]
                    td:ul
                        li XINFO STREAM key [FULL [COUNT count]] : 스트림 정보
                        li XINFO CONSUMERS key group : 소비자 정보
                        li XINFO GROUPS key : 소비자그룹 정보
                        li XINFO HELP : 도움말

        +asCode().
            cluster > CLUSTER ADDSLOTS slot [slot ...]
            cluster > CLUSTER BUMPEPOCH
            cluster > CLUSTER COUNT-FAILURE-REPORTS node-id
            cluster > CLUSTER COUNTKEYSINSLOT slot
            cluster > CLUSTER DELSLOTS slot [slot ...]
            cluster > CLUSTER FAILOVER [FORCE|TAKEOVER]
            cluster > CLUSTER FLUSHSLOTS
            cluster > CLUSTER FORGET node-id
            cluster > CLUSTER GETKEYSINSLOT slot count
            cluster > CLUSTER INFO
            cluster > CLUSTER KEYSLOT key
            cluster > CLUSTER MEET ip port
            cluster > CLUSTER MYID
            cluster > CLUSTER NODES
            cluster > CLUSTER REPLICAS node-id
            cluster > CLUSTER REPLICATE node-id
            cluster > CLUSTER RESET [HARD|SOFT]
            cluster > CLUSTER SAVECONFIG
            cluster > CLUSTER SET-CONFIG-EPOCH config-epoch
            cluster > CLUSTER SETSLOT slot IMPORTING|MIGRATING|STABLE|NODE [node-id]
            cluster > CLUSTER SLAVES node-id
            cluster > CLUSTER SLOTS
            cluster > READONLY
            cluster > READWRITE
        +asCode().
            connection > AUTH password
            connection > CLIENT CACHING YES|NO
            connection > CLIENT GETNAME
            connection > CLIENT GETREDIR
            connection > CLIENT ID
            connection > CLIENT KILL [ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [ADDR ip:port] [SKIPME yes/no]
            connection > CLIENT LIST [TYPE normal|master|replica|pubsub]
            connection > CLIENT PAUSE timeout
            connection > CLIENT REPLY ON|OFF|SKIP
            connection > CLIENT SETNAME connection-name
            connection > CLIENT TRACKING ON|OFF [REDIRECT client-id] [PREFIX prefix] [BCAST] [OPTIN] [OPTOUT] [NOLOOP]
            connection > CLIENT UNBLOCK client-id [TIMEOUT|ERROR]
            connection > ECHO message
            connection > HELLO protover [AUTH username password] [SETNAME clientname]
            connection > PING [message]
            connection > QUIT
            connection > SELECT index
        +asCode().
            geo > GEOADD key longitude latitude member [longitude latitude member ...]
            geo > GEODIST key member1 member2 [m|km|ft|mi]
            geo > GEOHASH key member [member ...]
            geo > GEOPOS key member [member ...]
            geo > GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]
            geo > GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]
        +asCode().
            hyperloglog > PFADD key element [element ...]
            hyperloglog > PFCOUNT key [key ...]
            hyperloglog > PFMERGE destkey sourcekey [sourcekey ...]
        +asCode().
            pubsub > PSUBSCRIBE pattern [pattern ...]
            pubsub > PUBLISH channel message
            pubsub > PUBSUB subcommand [argument [argument ...]]
            pubsub > PUNSUBSCRIBE [pattern [pattern ...]]
            pubsub > SUBSCRIBE channel [channel ...]
            pubsub > UNSUBSCRIBE [channel [channel ...]]
        +asCode().
            scripting > EVAL script numkeys key [key ...] arg [arg ...]
            scripting > EVALSHA sha1 numkeys key [key ...] arg [arg ...]
            scripting > SCRIPT DEBUG YES|SYNC|NO
            scripting > SCRIPT EXISTS sha1 [sha1 ...]
            scripting > SCRIPT FLUSH
            scripting > SCRIPT KILL
            scripting > SCRIPT LOAD script
        +asCode().
            server > ACL CAT [categoryname]
            server > ACL DELUSER username [username ...]
            server > ACL GENPASS [bits]
            server > ACL LIST
            server > ACL LOAD
            server > ACL LOG [count or RESET]
            server > ACL SAVE
            server > ACL SETUSER rule [rule ...]
            server > ACL USERS
            server > ACL WHOAMI
            server > BGREWRITEAOF
            server > BGSAVE [SCHEDULE]
            server > COMMAND
            server > COMMAND COUNT
            server > COMMAND GETKEYS
            server > COMMAND INFO command-name [command-name ...]
            server > CONFIG GET parameter
            server > CONFIG RESETSTAT
            server > CONFIG REWRITE
            server > CONFIG SET parameter value
            server > DBSIZE
            server > DEBUG OBJECT key
            server > DEBUG SEGFAULT
            server > FLUSHALL [ASYNC]
            server > FLUSHDB [ASYNC]
            server > INFO [section]
            server > LASTSAVE
            server > LATENCY DOCTOR
            server > LATENCY GRAPH event
            server > LATENCY HELP
            server > LATENCY HISTORY event
            server > LATENCY LATEST
            server > LATENCY RESET [event]
            server > LOLWUT [VERSION version]
            server > MEMORY DOCTOR
            server > MEMORY HELP
            server > MEMORY MALLOC-STATS
            server > MEMORY PURGE
            server > MEMORY STATS
            server > MEMORY USAGE key [SAMPLES count]
            server > MODULE LIST
            server > MODULE LOAD path [ arg [arg ...]]
            server > MODULE UNLOAD name
            server > MONITOR
            server > PSYNC replicationid offset
            server > REPLICAOF host port
            server > ROLE
            server > SAVE
            server > SHUTDOWN [NOSAVE|SAVE]
            server > SLAVEOF host port
            server > SLOWLOG subcommand [argument]
            server > SWAPDB index1 index2
            server > SYNC
            server > TIME
        +asCode().
            transactions > DISCARD
            transactions > EXEC
            transactions > MULTI
            transactions > UNWATCH
            transactions > WATCH key [key ...]
    +hoverTemplate()#glob-style-pattern
        ul
            li * : 임의 길이 임의 문자열
            li ? : 임의 문자 1개
            li [abc] : 문자 집합 중 1글자
            li [^abc] : 여집합 중 1글자
            li [a-z] : 문자 집합 중 1글자