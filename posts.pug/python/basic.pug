include ../../source/skeleton.pug
+post('Python 3.8 시작하기', 'Python', 'Python 3.8 정리')
    h1 설치
    ol
        li: +asA('https://www.python.org/')
        li 설치경로(예. C:\Program Files\Python36, /usr/local/bin/python3.7)를 path 환경변수에 추가
        li Python Shell은 각 문장을 대화식 인터프리터가 해석하여 결과를 바로 출력해준다.
        li 모듈 실행
        +asCode('shell') python -m module [arg] ...
        p 인자는 sys 모듈의 argv 변수에 저장된다. -m module이 사용되면 sys.argv[0]은 모듈의 절대경로
        li 소스 코드 인코딩
        p 기본 UTF-8. 변경하려면 파일 첫 줄에 주석 추가.
            br
            | 예. # -*- coding: cp1252 -*-
            br
            | 단, 유닉스 셔뱅 줄(#!/usr/bin/env python3)이 있는 경우엔 2번째 줄에 들어간다.

    h1 자료형
    ul
        li 파이썬 변수는 동적 자료형(실행중 변경 가능)으로, type() 함수를 통해 자료형을 확인할 수 있다.
        li 변수 선언이 따로 필요없으며, 식별자만 있으면 변수로써 이용할 수 있다.
    div
        h2 bool
        ol
            li True, False
            li bool 연산 : and, or, not
            li False로 간주되는 값 : None, 0, 0.0, '', [], (), {}, set()

        h2 int
        ol
            li 모든 정수는 int형이며, 크기 제한은 없다.
            li 정수는 0으로 시작할 수 없다.
            li 리터럴 : 2진수 0b, 8진수 0o, 16진수 0x
            li / : 부동소수 몫, // : 정수 몫, divmod() : (정수 몫, 나머지)
            li ** : 거듭제곱
            li int() : 형변환, 소수점이나 지수가 표현된 문자열은 정수로 변환 불가
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[1,9]')

        h2 float
        ol
            li 부동소수도 +, -, *, /, //, **, %, divmod() 모두 가능하다.
            li float 정밀도는 그대로 가진다.
            li float() : 형변환, 소수점이나 지수가 표현된 문자열은 정수로 변환 불가
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[12,17]')

        h2 complex
        p 복소수 a + bj

        h2 str
        ol
            li 파이썬 문자열은 상수(불변)다. 리터럴로 ''와 ""모두 사용 가능하다.
            li + : 문자열 결합 연산자
                br
                | * : 문자열 복제 연산자
                br
                | 문자열 리터럴은 단순히 공백을 기준으로 나열만 해도 연결된다.
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[20,22]')
            li ''' 또는 """로 열고 닫음으로써 여러 줄의 문자열 리터럴을 작성할 수 있다. 이진 문자열도 가능하다.
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[23,26]')
            li r'' → Raw String 리터럴. 이스케이프하지 않는다
            li str() : 사람이 읽기 편한 형태로 객체의 문자열 표현 반환
                br
                | repr() : 개발자를 위한 형태로 객체의 문자열 표현 반환. repr() 그대로 객체를 복원할 수 있도록 하자.
            li str은 시퀀스이므로 슬라이싱
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[28,33]') 가능
                |  , len() 이용
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[35,35]') 가능
            li split() : 분리. 기본은 공백 문자
                br
                | join() : 문자열 접합
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[37,40]')
            li strip() : 앞뒤 문자열 제거. 기본은 공백 제거
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[42,43]')
            li 정렬
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[45,50]')
            li replace() : 부분 문자열 대체
                +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[52,53]')

        h2 Formatted string literal(aka. f-string) Since 3.6
        ul
            li f_string ::= (
                i literal_char
                |  | "{{" | "}}" |
                i replacement_field
                |  )*
            p {{, }}는 각각 {, }를 표시하기 위한 리터럴
            li replacement_field ::= "{"
                i f_expression
                |  [!
                i conversion
                | ] [:
                i format_spec
                | ] "}"
            li f_expression : 값을 산출하는 표현식
                +codeBtn('/Repositories/Python/Basic/f_string.py', 'python', '[1,2]')
            li conversion ::= "s" | "r" | "a"
                +codeBtn('/Repositories/Python/Basic/f_string.py', 'python', '[4,11]')
            p 각각 해당하는 함수를 호출한다 : !s → str(), !r → repr(), !a → ascii()
            li f_expression이 산출한 값이 conversion을 거쳐 __format__(format_spec)으로 포매팅된다
            li format_spec ::= [[
                i fill
                | ]
                i align
                | ][
                i sign
                | ][#][0][
                i width
                | ][
                i grouping_option
                | ][.
                i precision
                | ][
                i type
                | ]
            li fill ::= 임의_문자
            li align ::= "&lt;" | ">" | "=" | "^"
                +codeBtn('/Repositories/Python/Basic/f_string.py', 'python', '[13,17]')
            li sign ::= "+" | "-" | " "
            li '#' 옵션이 있으면 2, 8, 16진수 앞에 '0b', '0o', '0x'를 각각 붙인다.
            li width ::= digit+
            li grouping_option ::= "_" | ","
            li precision ::= digit+
            li type ::= "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

        h2 list
        p 가변 시퀀스
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[56,57]') 생성 : [], list()
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[59,61]') 슬라이스
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[63,66]') 리스트 병합 : +, extend()
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[68,80]') 요소 추가/삭제
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[82,85]') 검색
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[87,91]') 정렬
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[93,109]') 복사

        h2 tuple
        p 불변 시퀀스. 불변이므로 딕셔너리의 키로 사용 가능.
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[112,116]') 생성, 병합
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[118,121,191,198]') 튜플 패킹/언패킹

        h2 collections.namedtuple
        p collections.namedtuple(typename, field_names, verbose=False, rename=False)
            br
            | 각 필드를 주어진 이름으로 접근할 수 있는 tuple의 서브클래스를 반환한다. DTO 작성에 유용.
            br
            | _fields, _make(iterable), _asdict()

        h2 set
        p
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[124,131]') 생성, 요소 추가
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[133,143]') 원소 포함 여부
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[145,158]') 집합 연산

        h2 dict
        p
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[161,178]') 생성, 병합
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[180,183]') 키-값 얻기
            +codeBtn('/Repositories/Python/Basic/type_example.py', 'python', '[185,189]') 복사

    h1 구문
    p
        +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[1,2]') 라인 유지 \
        +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[4,10]') if ~ elif ~ else
        +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[12,20]') while
        +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[22,27]') for
    ol
        li for
        p for문은 순회 객체에 대하여 iter()를 호출한다. iter()는 __next__() 메서드를 정의한 iterator 객체를 반환하며, __next__()가 전달하는 값을 하나씩 루프에 사용한다.
        p 더 이상 요소가 없을 때 __next__()는 StopIteration 예외를 발생시키고, for 루프는 종료된다. 클래스 자체에 __next__()가 정의되어 있다면, iter()는 self를 반환하는 것으로 충분하다.
        li 콤마로 구분된 값들을 자동으로 튜플로 구성하여 다중 할당, 다중 반환이 가능하다.
        p
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[29,34]') 다중 할당 예시 : 피보나치 수열 »
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[37,46]') 다중 반환 예시 : 최대공약수/최소공배수 »
        li else
        ul
            li for/else : break로 멈추지 않고, for 루프가 완전히 실행된 후에 else 블록이 실행된다.
            li while/else : break로 멈추지 않고, 조건식이 거짓이 되어 while 루프를 빠져나온 후에 else 블록이 실행
            li try/else : try 블록에서 예외가 발생하지 않은 경우 else 블록 실행
        li 순회 대상 생성
        ul
            li 수열 생성 : range([start,] stop[, step])
            p start 기본값 0. step 기본값 1. stop 자체는 미포함
            li 여러 시퀀스 동시 순회 : zip()
            p 같은 오프셋의 요소들로 튜플을 생성. 시퀀스가 하나라도 끝나면 순회 종료.
                +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[48,49]')
                br
                | 길이가 긴 시퀀스를 기준으로 하는 itertools.zip_longest()도 존재
            li comprehension : 순회를 통해 리스트, 딕셔너리, 셋 등 생성
                +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[52,89]')
            p 파이썬 3에서 comprehension은 함수처럼 고유한 지역 범위를 가진다.
        li Monkey patching
        p 소스 코드를 건드리지 않고 런타임에 클래스나 모듈을 변경하는 행위

    h1 함수
    ol
        li 파이썬의 함수는 일급 객체다.
        li 함수 정의 def
            i func_name
            | ():
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[91,100]')
        +asCode('python') def func(a, b, *, c = None):
        p * 뒷부분은 키워드 인자로만 보낼 수 있다
        li return이 없으면 호출자는 None을 얻는다. None 검사 : is None
        li docstring : 함수 body 첫 줄에 문자열로 함수 설명. help()로 출력된다.
        li 함수 외부 scope에 접근할 수 있다.
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[102,105]')
        li 디폴트 매개변수, 키워드 매개변수, 매개변수 타입 바운딩
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[107,119]')
        li * : 인자를 튜플로. ** : 인자를 딕셔너리로.
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[121,131]')
        li 함수 내부에 함수 정의 가능
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[133,138]')
        li 람다 함수 : lambda
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[133,136,140,141]')
        li Generator
        p 자료를 순회할 때마다 다음 항목 반환. __iter__()와 __next__()를 자동으로 생성하고, StopIteration 예외도 자동으로 발생시킨다. cf. range() : 미리 모든 값을 생성한다.
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[143,150]')
        p 다중 반복을 지원하려면 동일 객체에 대해 iter()를 호출할 때마다 독립적인 반복자가 새로 만들어져야 한다. 이를 파이썬스럽게 구현하려면 새로운 Iterator 인스턴스 대신 제너레이터(특히 Generator Comprehension)를 반환하면 된다.
        li Decorator
        p 매개변수를 받는 데커레이터가 필요한 경우, 인자를 받아 데커레이터를 반환하는 팩터리 함수를 만들어 호출하면 된다. 
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[153,169]') 함수 데커레이터
            +codeBtn('/Repositories/Python/Basic/syntax.py', 'python', '[171,184]') 클래스 데커레이터

    h1 namespace
    ol
        li 네임스페이스 : "속성 이름 - 객체 이름" 매핑
        li 메인 프로그램은 전역 네임스페이스를 정의
        p globals() : 전역 네임스페이스 정보를 담은 딕셔너리
        li 함수는 지역 네임스페이스를 정의
        p locals() : 지역 네임스페이스 정보를 담은 딕셔너리
            +codeBtn('/Repositories/Python/Basic/scope_example.py', 'python', '[31, 45]') nonlocal을 이용한 클로저 »
        li global 키워드로 전역 변수 접근
        p
            +codeBtn('/Repositories/Python/Basic/scope_example.py', 'python', '[1, 29]')
            |  출처 : 
            +asA('https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example')

    h1 예외
    p
        +codeBtn('/Repositories/Python/Basic/try_except.py', 'python', '[1,5]') try: ~ except:
        +codeBtn('/Repositories/Python/Basic/try_except.py', 'python', '[7,11]') except ExceptionType as name:
        +codeBtn('/Repositories/Python/Basic/try_except.py', 'python', '[13,20]') raise MyException("Don't Worry")

    h1 모듈
    ol
        li 모듈 : 파이썬 파일 하나
        li 패키지 : __init__.py 파일을 포함하는 디렉터리
        li import
        ul
            li [from package] import module1, module2
            li from module import variable, function
            li import module as alias
            li from module import *
        li del module
        li reload(module)
        li 처음 실행되는 모듈의 __name__ 속성은 "__main__"이다.
            +codeBtn('/Repositories/Python/Basic/fibonacci_example.py', 'python') fibonacci_example.py »
        li 모듈 탐색 경로 추가 sys.path.append('/usr/me/some_directory')
        li dir()을 이용해 모듈에 정의된 것들을 확인할 수 있다.

    h1 pass
    ol
        li 빈 루프를 표현할 때 이용
        li 빈 클래스를 표현할 때 이용
        li 빈 함수를 표현할 때 이용

    h1 클래스
    p
        +codeBtn('/Repositories/Python/Basic/class_example.py', 'python', '[1,8]') 클래스 예
        +codeBtn('/Repositories/Python/Basic/class_example.py', 'python', '[10,12]') 속성 삭제 del
        +codeBtn('/Repositories/Python/Basic/class_example.py', 'python', '[25,30]') 속성 추가
    ol
        li 객체 메서드를 표현하는 객체도 속성들을 갖는다.
            +codeBtn('/Repositories/Python/Basic/class_example.py', 'python', '[15,22]')
        li Name mangling : 파이썬은 기본적으로 접근 한정자가 없다. 다른 언어의 private과 같은 사용과 함께 이름 충돌을 회피하기 위해 2개 이상의 '_'로 시작하는 식별자는 내부적으로 앞에 '_classname'이 덧붙여 구분된다.
            +codeBtn('/Repositories/Python/Basic/class_example.py', 'python', '[33,48,51,67]')
        li 다중 상속
        p 메서드 결정 순서(Method Resolution Order)는 __mro__ 속성을 따른다.

    h1 가상 환경
    ol
        li 서로 다른 프로젝트들이 서로 다른 버전의 패키지 의존성을 가질 수 있다. 이를 유연하게 지원하도록 가상 환경을 만들 수 있다.
        li 최신 파이썬 버전에는 venv 모듈이 포함되어 있다.
        +asCode('shell') python3 -m venv my-env1
        p my-env1 디렉터리가 존재하지 않으면 생성한다. 이 디렉터리에 파이썬 인터프리터, 표준 라이브러리 등이 복사된다.
        li Windows에서 실행 : my-env1\Scripts\activate.bat
        li Unix에서 실행 : source my-env1/bin/activate

    h1 pip
    ol
        li pip : 파이썬 패키지 설치, 제거에 관한 프로그램
        li 기본적으로
            +asA('https://pypi.org/')
            | 의 패키지들이 대상이다.
    +asCode('shell').
        pip install requests
        pip install requests==2.6.0
        pip install --upgrade requests
        pip show requests
        pip list
        pip freeze > requirements.txt
        pip install -r requirements.txt

    h1 __debug__와 assert
    ol
        li __debug__는 파이썬이 -O 옵션으로 시작되지 않았다면 참이 되는 상수다. 인터프리터 실행 시 설정된다.
        li -O 옵션으로 시작한 경우, __debug__에 대한 조건부 코드와 assert문이 제거된다.
        li assert_stmt ::=
        +asCode('python') assert EXPRESSION [, EXPRESSION]
        li assert EXPRESSION ::=
        +asCode('python').
            if __debug__:
                if not expression:
                    raise AssertionError
        li assert EXPRESSION1, EXPRESSION2 ::=
        +asCode('python').
            if __debug__:
                if not expression1:
                    raise AssertionError(expression2)

    h1 weakref
    ol
        li 약한 참조 : 캐시와 같이 객체 카운트를 증가시키지 않고 객체를 참조.
            +codeBtn('/Repositories/Python/Basic/weakref_example.py', 'python')
        li WeakValueDictionary : 약한 참조를 값으로 가지는 가변 매핑. 객체가 GC 수집되면 키가 자동으로 제거된다. + WeakSet
        li weakref.finalize(참조변수, 콜백) # 객체 소멸시 실행될 콜백 등록

    h1 Python 3.7
    ol
        li CPython UTF-8 강제 설정
        p -X utf8 옵션 또는 PYTHONUTF8 환경 변수 설정
        li CPython 개발 환경 실행
        p -X dev 옵션 또는 PYTHONDEVMODE 환경 변수 설정
        li 모듈에 대한 __getattr__(), __dir__() 정의 허용
        li @dataclass
        p 단순 DTO 클래스에 대해 __repr__(), __eq__(), __hash__()를 자동 생성한다.
        li 일반적인 dict는 삽입 순대로 정렬된다(공식 스펙)

    h1 Python 3.8
    ol
        li 새로운 할당 연산 := Since 3.8
        +asCode('python') if (x := True):
        p 처럼 할당 후 사용이 가능
        li 키워드 매개변수 비허용 / Since 3.8
        +asCode('python') def func(a, b, /, c, d, *, e, f):
        p a, b는 키워드 인자로 보낼 수 없다
        li f-string : 디버깅을 위한 자기 서술적 문자열 표기법
        +asCode('python').
            f'{user=} {member_since=}'
                # "user='eric_idle' member_since=datetime.date(1975, 7, 31)"
        li reserved() 빌트인 함수를 통해 dict, dictview 객체를 삽입 순서대로 순회할 수 있다
        li python -m asyncio
        p 로 실행하면 asyncio.run()을 호출할 필요없이 최상위 수준에서 await 구문을 이용할 수 있다.
            br
            | compile() 빌트인 함수에 ast.PyCF_ALLOW_TOP_LEVEL_AWAIT를 넘기면 최상위 레벨에서 await, async for, async with 사용이 허용된다
