include ../../source/skeleton.pug
+post('HTML', 'HTML', 'HTML 정리', true)
    h1 태그
    ul
        li 문서 요소의 타입을 나타내는 이름으로, 사용자가 임의로 만들 수도 있다.
        li 태그는 &lt;과 > 사이에 이름을 적음으로써 표현되며, 여는 태그와 닫는 태그 사이에 내용이 포함될 수 있다.
        li 여는 태그는 &lt;name>, 닫는 태그는 &lt;/name>로 표현한다. 아래는 HTML 문서의 기본 골격을 나타내는 태그들이다.
        ol
            li &lt;!DOCTYPE html> : 문서가 HTML5로 작성되었음을 의미한다.
            li &lt;html>&lt;/html> : root HTML element
            li &lt;head>&lt;/head> : 문서에 대한 meta information
            li &lt;title>&lt;/title> : 제목표시줄에 표시될 제목
            li &lt;body>&lt;/body> : page content

    h1 속성
    ol
        li 모든 HTML 태그는 속성을 가질 수 있다. 속성은 여는 태그 내부에 이름='값' 쌍으로 표현한다.
        li 속성 값을 표현하기 위해 '', "" 모두 이용 가능하다. 아래는 대표적인 속성들이다.
        ul
            li html태그 lang : 문서의 국가 언어.
            li title : 노드에 대한 툴팁(마우스 올려두면 표시).
            li style : CSS 속성을 지시
            li disabled : 입력 태그 요소를 사용할 수 없음.
            li id : 태그에 고유한 id를 부여한다.
            li class : 태그에 특정 그룹의 class를 부여한다.

    h1 기본 태그
    ul
        li heading : h1 ~ h6
        li paragraph : p
        li link : a
        ol
            li href 속성 : 이동할 위치나 주소
            p # : 현재 페이지의 특정 위치(id)로 이동하기 위한 표기. '#here'은 현재 페이지의 HTML 요소 중 id가 'here'인 것을 가리킨다.
            li 링크 상태를 나타내는 속성 : link, visited, hover, active
            li target 속성 : _blank(새탭이나 새창에서 열기), _self, _parent, _top, framename
        li 이미지 : img
        ol
            li src 속성 : 이미지 리소스의 위치나 주소
            li alt 속성 : 이미지를 불러오지 못할 때, 혹은 시각장애인을 위한 대체 문자열
            li width, height 속성 : 이미지 크기
        li line break : br
        li 수평선 : hr
        li 해석 없이 출력 : pre
        li text
        ol
            li &lt;b>&lt;/b> : bold
            li &lt;strong>&lt;/strong> : bold & important
            li &lt;i>&lt;/i> : italic
            li &lt;em>&lt;/em> : italic & important
            li &lt;small>&lt;/small> : 작은 글자
            li &lt;mark>&lt;/mark> : 형광펜으로 칠한 것처럼
            li &lt;del>&lt;/del> : 취소선
            li &lt;ins>&lt;/ins> : 삽입 문구에 밑줄
            li &lt;sub>&lt;/sub>, &lt;sup>&lt;/sup> : 아랫첨자, 윗첨자
        li 주석 : &lt;!-- 주석 -->
        li table
        ol
            li table은 thead와 tbody로 이루어진다.
            li thead와 tbody는 tr들로 이루어진다.
            li tr은 th와 td들로 이루어진다.
            li colgroup을 이용해 열들을 논리적으로 분리할 수 있다.
        li list
        ol
            li unordered list : &lt;ul>&lt;/ul>
            li ordered list : &lt;ol>&lt;/ol>
            p type 속성 : "1"(default), "A", "a", "I"(로마숫자), "i"
            li list item : &lt;li>&lt;/li>
        li div : 가로 100%를 점유하는 block element 대표
        li span : 가로 공간이 여유롭다면 병렬로 표시되는 inline element 대표
        li script
        ol
            li &lt;script>&lt;/script> 사이에 JavaScript 코드 작성
            li &lt;noscript>&lt;/noscript> 사이에 지원하지 않는 브라우저에 대한 메시지 작성
            li &lt;a href:"javascript:;">처럼 속성으로 넣는 것도 가능
        li meta
        ol
            li 인코딩 명시 : &lt;meta charset="UTF-8">
            li 검색엔진을 위한 키워드 설정 : &lt;meta name="keywords" content="Word1, Word2, Word3">
            li 페이지 설명 : &lt;meta name="description" content="~~">
            li 페이지 업데이트 설정 : &lt;meta http-equiv="refresh" content="30"> (30초마다 갱신)
            li 반응형 웹을 위한 viewport 설정 : &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
        li base : 페이지에서 사용하는 모든 상대주소의 시작점
        p 예. &lt;base href:"https://dong-gi.github.io/" target="_blank">

    h1 Form
    ol
        li form은 HTML 페이지로부터 데이터를 전송하기 위한 정형화된 틀이다. form 내부는 input 태그들로 채워진다.
        li &lt;input type=""> : text, password, radio, checkbox, submit, reset...
        li form 속성 : action="주소", target="_blank | _top | ...", method="get | post"
        li &lt;fieldset> : 입력 요소 그루핑, &lt;legend> : 그룹 설명
        li &lt;select name="">&lt;option value="">&lt;/option> ~ &lt;/select>
        li &lt;textarea rows="" cols="">, &lt;button onclick="">
        li &lt;input type=""> : color, date, email, month, number, range, time, ...
        li 입력 요소 속성 : name, max, maxlength, min, pattern, readonly, required, disabled, size, ...
        +asA('https://www.w3schools.com/html/html_form_attributes.asp')

    h1HTML5
    ul
        li 시맨틱; Semantic
        p HTML5 이전의 웹페이지들은 table 태그를 주로 사용하여 디자인했다. 중첩된 table들로 이루어진 웹페이지는 검색 엔진을 비롯한 프로그램이 기계적으로 의미를 찾기 어려워 HTML5는 문서에 대한 의미를 태그가 포함하는 방향을 모색했다.
        li 시맨틱 태그
        p header, nav, section, article, aside, footer, ...
        +asA('https://www.w3schools.com/html/html5_semantic_elements.asp')
        li 시맨틱 CSS
        p HTML5로 접어들면서 HTML 태그들은 골격만을 정의하고, 디자인은 JavaScript와 CSS로 보다 확실히 분리되었다. 디자인의 특징은 의미 범주가 같은 것들을(class) 비슷하게 표현한다는 것이며, 따라서 CSS 선택자들은 문서의 의미 정보를 내포하고 있다고 할 수 있다.
            br
            | Bootstrap, W3C.CSS과 같은 인기 있는 CSS Framework들을 사용하면 체계적으로 정의된 클래스들 덕분에 수월하게 문서의 의미 정보를 뽑아낼 수 있다.
        li 반응형 웹
        ol
            li 스마트폰 대중화 이전의 일반 사용자 컴퓨팅 환경은 가로 768px 이상의 직사각형 모니터가 대부분이었다.
            li 스마트폰이 대중화 되면서 다양한 사용자 웹서핑 환경에 맞춰 알맞게 페이지를 보여줄 필요가 생겼다.
            li viewport로 대표되는 screen 속성을 이용해 페이지를 다시 로드할 필요 없이 디자인이 변경되는 반응형 웹 기술이 발전하게 되었다.
        li 반응형 태그
        ol
            li picture : 스크린에 따라 다른 이미지 소스를 이용.
            +asCode('HTML').
                출처 : https://www.w3schools.com/html/html_responsive.asp
                &lt;picture>
                    &lt;source srcset="img_smallflower.jpg" media="(max-width: 600px)">
                    &lt;source srcset="img_flowers.jpg" media="(max-width: 1500px)">
                    &lt;source srcset="flowers.jpg">
                    &lt;img src="img_smallflower.jpg" alt="Flowers">
                &lt;/picture>
        li 멀티미디어
        +asA('https://www.w3schools.com/tags/ref_av_dom.asp', 'Audio/Video')
        +asA('https://www.w3schools.com/graphics/default.asp', 'Graphic')
        +asA('https://www.w3schools.com/html/html_object.asp', 'Plug-in')

    h1 Canvas
    ul
        li canvas를 지원하지 않는 브라우저를 위해 안에 fallback content(대체 텍스트 또는 DOM)를 적어주면 좋다
        li 스크립트에서 canvas의 지원을 확인하는 방법 : DOM이 HTMLCanvasElement 클래스인지 확인
            +codeBtn('/posts/front/canvas/draw1.js', 'javascript')
        li 캔버스의 기본 그리기 요소는 직사각형과 path(일련의 점들을 선분으로 연결) 두 가지
    div
        h2
            | interface
            +asA('https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement', 'HTMLCanvasElement')
            |  : HTMLElement
        ul
            li width, height : 각각 캔버스의 너비, 높이. 기본값은 300, 150
            li getContext(contextType[, contextAttributes])
            p contextType : '2d'(CanvasRenderingContext2D), 'webgl'(WebGLRenderingContext), 'webgl2'(WebGL2RenderingContext), 'bitmaprenderer'(ImageBitmapRenderingContext)
            li toDataURL([type][, encoderOptions])
            p type : default 'image/png', encoderOptions : default 0.92, 이미지 퀄리티[0, 1]
            li toBlob(callback[, mimeType][, qualityArgument])
            p callback : Blob을 먹는 함수, mimeType : default 'image/png', qualityArgument : 이미지 퀄리티[0, 1]
        h2
            | interface
            +asA('https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D', 'CanvasRenderingContext2D')
        div
            h3 사각형 그리기
            ul
                li clearRect(x, y, width, height)
                p 지정 사각형을 rgba(0,0,0,0)로 초기화. 이후 path를 그릴 땐 beginPath()를 다시 호출해야 함에 유의.
                li fillRect(x, y, width, height)
                p 지정 사각형을 현재 fillStyle로 채우기 == rect() + fill()
                li strokeRect(x, y, width, height)
                p 지정 사각형에 현재 strokeStyle로 외각선 그리기 == rect() + stroke()
            h3 텍스트 그리기
            ul
                li fillText(text, x, y[, maxWidth])
                p 텍스트를 그리고 글자 내부는 현재 fillStyle로 채운다.
                li strokeText(text, x, y,[, maxWidth])
                p 텍스트를 그리고 글자 외각선은 현재 fillStyle로 채운다.
                li measureText(text)
                p 텍스트를 그린 결과가 어떻게 될지 미리 알 수 있는
                    +asA('https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics', 'TextMetrics')
                    |  객체 반환.
            h3 path 생성
            ul
                p 아래 메서드들은 실제 그리기 작업을 수행하지는 않는다.
                li beginPath() : 그리기 시작 명시
                li closePath() : path 조각이 하나 이상 추가되었고, 마지막 정점이 시작점과 다른 경우 두 점을 잇는 선분을 추가한다.
                li moveTo(x, y) : path 조각의 시작점을 설정
                li lineTo(x, y) : 마지막 정점으로부터 (x, y)까지의 선분을 추가.
                li bazierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)
                p 마지막 정점으로부터 (x, y)까지를 잇는, 2개의 조절점을 이용하는
                    +asA('https://ko.wikipedia.org/wiki/베지에_곡선', '베지에 곡선')
                    | 을 추가한다.
                li quadraticCurveTo(cpx, cpy, x, y)
                p 마지막 정점으로부터 (x, y)까지를 잇는, 1개의 조절점을 이용하는
                    +asA('https://ko.wikipedia.org/wiki/베지에_곡선', '베지에 곡선')
                    | 을 추가한다.
                li arc(x, y, radius, startAngle, endAngle[, anticlockwise])
                p (x, y)를 기준점으로 하는 반지름 radius인 호를 추가한다. anticlockwise의 기본값은 false. anticlockwise를 true로 한다고 각도의 증감 방향이 바뀌진 않는다
                li arcTo(x1, y1, x2, y2, radius)
                ol
                    li 조절점1(x1, y1), 조절점2(x2, y2), 선분1(마지막 정점-조절점1), 선분2(조절점1-조절점2)를 생각한다
                    li 선분1, 선분2 모두와 거리가 radius만큼 떨어진 정점2를 생각한다. 그러면 정점2에서 반지름 radius인 원을 그렸을 때 선분1, 선분2와의 교점1, 교점2가 존재한다
                    li lineTo(교점1)
                    li 교점1부터 교점2까지의 호를 추가한다. arc(정점2, radius, ...)
                li ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle[, anticlockwise])
                p rotation은 라디안 단위의 값으로, 해당 값만큼 타원을 회전시킨다
                li rect(x, y, width, height)
            h3 path 그리기
            ul
                li fill([fillRule])
                    br
                    | fill(path[, fillRule])
                ul 현재 또는 지정된 path의 영역 내부를 칠한다.
                    li fillRule : '
                        +asA('https://en.wikipedia.org/wiki/Nonzero-rule', 'nonzero')
                        | '(default) | '
                        +asA('https://en.wikipedia.org/wiki/Even-odd_rule', 'evenodd')
                        | '
                    li path :
                        +asA('https://developer.mozilla.org/en-US/docs/Web/API/Path2D', 'Path2D')
                        |  인스턴스
                li stroke([path])
                p 현재 또는 지정된 path의 외각선을 그린다(outline)
                li drawFocusIfNeeded(element)
                    br
                    | drawFocusIfNeeded(path, element)
                p element가 focus를 얻은 상태면 현재 또는 지정된 path 주변에 강조선을 그린다
                li scrollPathIntoView([path])
                p Experimental. Element.scrollIntoView()와 유사하게, 현재 또는 지정된 path가 스크린에 표시되도록 스크롤을 이동한다.
                li clip([fillRule])
                    br
                    | clip(path[, fillRule])
                p fillRule은 fill()과 동일. 현재 또는 지정된 path를 관심영역으로 설정한다. 이후의 그리기는 관심영역 내부의 것만 렌더링된다.
                li isPointInPath(x, y[, fillRule])
                    br
                    | isPointInPath(path, x, y[, fillRule])
                p fillRule은 fill()과 동일. 정점이 현재 또는 지정된 path의 내부에 있는지 판별한다
                li isPointInStroke(x, y)
                    br
                    | isPointInStroke(path, x, y)
                p 정점이 현재 또는 지정된 path의 외각선 위에 있는지 판별한다
            h3 path 스타일
            ul
                li lineWidth : default 1.0
                li lineCap : 종점 표시 종류. 'butt'(default), 'round', 'square'
                li lineJoin : 교점 표시 종류. 'round', 'bevel', 'miter'(default)
                p + miterLimit
                li getLineDash() + setter
                p 선분 요소와 공백(gap)의 길이로 이루어진 배열. 원소가 홀수개라면 자동으로 뒤에 똑같은 배열이 덧붙여져 짝수 크기가 된다.
                    br
                    | + lineDashOffset : 선분을 그리기 시작할 offset. default 0.0
            h3 텍스트 스타일
            ul
                li font : default '10px sans-serif'
                li textAlign : 'start'(default), 'end', 'left', 'right', 'center'
                li textBaseline : 'top', 'hanging', 'middle', 'alphabetic'(default), 'ideographic', 'bottom'
                li direction : 'inherit'(default), 'ltr'(left to right), 'rtl'
            h3 fillStyle, strokeStyle
            ol
                p default '#000', 값으로 가능한 타입은 아래 3가지.
                li DOMString : CSS 색상으로 파싱될 수 있는 문자열
                li CanvasGradient
                ul
                    li CanvasRenderingContext2D.createLinearGradient(x0, y0, x1, y1)
                    p 선형 그래디언트의 시작점(x0, y0), 종점(x1, y1)
                    li CanvasRenderingContext2D.createRadialGradient(x0, y0, r0, x1, y1, r1)
                    p 원형 그래디언트의 시작 원(x0, y0, r0), 끝 원(x1, y1, r1)
                li CanvasPattern
                ul
                    li CanvasRenderingContext2D.createPattern(image, repetition)
                    ul
                        li image : HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, OffscreenCanvas
                        li repetition : 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat'
            h3 그림자 그리기
            ul
                li shadowBlur : default 0
                li shadowColor : CSS 색상으로 파싱될 수 있는 문자열
                li shadowOffsetX : default 0
                li shadowOffsetY : default 0
            h3 이미지 그리기
            ul
                li drawImage(image, dx, dy);
                    +codeBtn('/posts/front/canvas/draw2.js', 'javascript')
                li drawImage(image, dx, dy, dWidth, dHeight);
                li drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
            h3 변환
            div
                h4 DOMMatrix
                ul
                    li 2D 및 3D 변환을 나타내는 4x4 행렬
                    li 속성
                    ul
                        li readonly is2D : true면 2D 변환행렬, false면 3D
                        li readonly isIdentity : 단위행렬인지 여부
                        li m11, m12, ..., m43, m44 : 행렬 성분. double
                        li a, b, c, d, e, f : 2D 변환에 사용되는 값. 차례로 2x2 변환행렬, dx, dy에 해당하며, m11, m12, m21, m22, m41, m42에 대응한다
            ul
                li setTransform(a, b, c, d, e, f)
                    br
                    | setTransform(matrix) + getTransform()
                li transform(a, b, c, d, e, f)
                p old = ctx.getTransform();
                    br
                    | 식[m_{old} = \begin{bmatrix} old.a & old.c & old.e \\ old.b & old.d & old.f \\ 0 & 0 & 1 \end{bmatrix}]식
                    br
                    | 식[m_{new} = m_{old} \begin{bmatrix} a & c & e \\ b & d & f \\ 0 & 0 & 1 \end{bmatrix}]식
                li scale(x, y)
                p 기본적으로 캔버스 내의 단위는 정확히 px과 같지만 이를 변경할 수 있다. 음수 스케일링은 요소를 뒤집는 효과가 있다
                li rotate(angle) : (0, 0)을 기준으로 시계방향 회전. 단위는 라디안.
                li translate(x, y)
                p 현재의 dx, dy에 각각 x, y만큼 추가한다

            h3 전역 속성
            ul
                li globalAlpha
                p 캔버스에 그려지기 전에 도형, 이미지 등에 적용되는 투명도. default 1.0
                li: +asA('https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation', 'globalCompositeOperation')
                p 캔버스의 기존 내용에 새로운 도형, 이미지를 추가할 때의 합성 방법. 기본값은 덮어쓰기('source-over').

            h3 비트 조작
            div
                h4 ImageData
                ul
                    li 캔버스 비트 배열 정보를 갖는 인터페이스. CanvasRenderingContext2D 메서드 또는 생성자로 인스턴스를 얻을 수 있다
                    li 생성자
                    ul
                        li ImageData(array, width[, height])
                        p array는 RGBA값을 담은 Uint8ClampedArray. 길이가 정확하지 않으면 에러 발생
                        li ImageData(width, height) : 검은 사각형
                    li 속성
                    ul
                        li data : RGBA값을 가진 Uint8ClampedArray
                        li width, height
            ul
                li getImageData(sx, sy, sw, sh)
                p 지정 사각형 영역의 정보를 가진 ImageData 반환. 여기서 지정한 사각형은 변환 행렬의 영향을 받지 않으며, 캔버스 바깥을 포함하는 경우 RGBA(0, 0, 0, 0)로 채워진다
                li putImageData(imageData, dx, dy[, dirtyX, dirtyY, dirtyWidth, dirtyHeight])
                p 지정 위치에 imageData를 덮어쓴다. dirty* 매개변수로 그릴 imageData 영역을 지정할 수 있다.
                li createImageData(width, height)
                    br
                    | createImageData(imagedata)
                p RGBA(0, 0, 0, 0)으로 채워진 새 ImageData 인스턴스를 반환한다. imagedata로 호출한 경우, imagedata의 width, height만 사용된다

            h3 상태 저장/복구
            ul
                li canvas : 연관 HTMLCanvasElement 객체. null일 수 있음
                li save()
                p 다음 항목들을 저장한다 : 변환행렬, 관심영역, lineDash, strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin, miterLimit, lineDashOffset, shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor, globalCompositeOperation, font, textAlign, textBaseline, direction, imageSmoothingEnabled
                li restore() : save()로 저장한 사항 복구

    canvas#tutorial-canvas(width='100%', height='33%') 연습용 캔버스

    h1 참고
    ul
        li: +asA('https://www.w3.org/TR/2dcontext/')
        li: +asA('https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API')
        li: +asA('https://joshondesign.com/p/books/canvasdeepdive/title.html')

