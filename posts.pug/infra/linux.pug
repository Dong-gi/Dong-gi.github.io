include ../../source/skeleton.pug
+post('Linux', 'Linux, AmazonLinux, CentOS', 'Linux 정리')
    h1 참고자료
    ul
        li: +asA('https://tldp.org/', 'The Linux Documentation Project')
        li: +asA('https://centoshelp.org/resources/commands/linux-system-commands/', 'CentOS - commands')
    div
        h2: +asA('https://tldp.org/guides.html', 'LDP Guides')
        ul
            li: +asA('https://tldp.org/LDP/abs/html/index.html', 'Advancd Bash-Scripting Guide; 03/2014')
            p Public Domain. No copyright!
            li: +asA('https://tldp.org/LDP/Bash-Beginners-Guide/html/index.html', 'Bash Guide for Beginners; 12/2008')
            details
                summary Copyright
                +asCode('text').
                    * Copyright (c) 2002-2007, Machtelt Garrels
                    * All rights reserved.
                    * Redistribution and use in source and binary forms, with or without
                    * modification, are permitted provided that the following conditions are met:
                    *
                    *     * Redistributions of source code must retain the above copyright
                    *       notice, this list of conditions and the following disclaimer.
                    *     * Redistributions in binary form must reproduce the above copyright
                    *       notice, this list of conditions and the following disclaimer in the
                    *       documentation and/or other materials provided with the distribution.
                    *     * Neither the name of the author, Machtelt Garrels, nor the
                    *       names of its contributors may be used to endorse or promote products
                    *       derived from this software without specific prior written permission.
                    *
                    * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND ANY
                    * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                    * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR AND CONTRIBUTORS BE LIABLE FOR ANY
                    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            li: +asA('https://tldp.org/LDP/intro-linux/html/index.html', 'Introduction to Linux; 06/2008')
            details
                summary Copyright
                +asCode('text').
                    * Copyright (c) 2002-2007, Machtelt Garrels
                    * All rights reserved.
                    * Redistribution and use in source and binary forms, with or without
                    * modification, are permitted provided that the following conditions are met:
                    *
                    *     * Redistributions of source code must retain the above copyright
                    *       notice, this list of conditions and the following disclaimer.
                    *     * Redistributions in binary form must reproduce the above copyright
                    *       notice, this list of conditions and the following disclaimer in the
                    *       documentation and/or other materials provided with the distribution.
                    *     * Neither the name of the author, Machtelt Garrels, nor the
                    *       names of its contributors may be used to endorse or promote products
                    *       derived from this software without specific prior written permission.
                    *
                    * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND ANY
                    * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                    * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR AND CONTRIBUTORS BE LIABLE FOR ANY
                    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        h2 Linux(kernel) Manual
        ul
            li: +asA('https://www.kernel.org/doc/man-pages/')
            li: +asA('https://tldp.org/manpages/man.html')

    h1 Linux 개요
    div
        h2 History
        ul
            li 표준이 없던 초창기. 크고 비싼 컴퓨터들은 제각기의 운영체제를 갖고 있었고, 한 컴퓨터에서 작동하는 프로그램이 다른 컴퓨터에서 작동할 것이라는 보장도 할 수 없었다.
            li Bell Labs에서 재사용 가능한 C 기반의 운영체제 UNIX를 개발했다.
            li UNIX를 이용함으로써 각 시스템을 위한 전용 코드의 작성을 줄일 수 있게 되었다. <- 이 전용 코드가 바로 커널(kernel)
            li Linux는 리눅스 커널(리누스 토발즈 최초 개발)을 이용하는 UNIX 구현체로, 다수의 GNU tool을 이용한다.

        h2 Quickstart
        div
            h3 Absolute basics
            div
                h4 commands
                p ls, cd, passwd, file filename, cat textfile, pwd, exit, logout, man command, info command, whatis command, apropos string, command --help
                h4 Bash features
                p
                    | Ctrl+A : 커서를 맨 앞으로
                    | C : 실행 중인 프로그램 종료
                    | D : 현재 쉘 로그아웃
                    | E : 커서를 맨 끝으로
                    | H : backspace
                    | L : Clear
                    | R : 히스토리 탐색
                    | Z : 실행 중인 프로그램 일시 정지
                    | ArrowLeft, ArrowRight : 커서 이동
                    | ArrowUp, ArrowDown : 히스토리 탐색
                    | Shift+PageUp/PageDown : 터미널 버퍼 이동
                    | Tab : 자동 완성
                    | Tab Tab : 완성 가능 목록

    h1 부팅 과정
    ol
        li BIOS 실행
        li POST 수행 : 장치 검사, 초기화
        li 부트로더 실행 : 커널 로드. BIOS 종료
        p GRUB : GNU 프로젝트의 부트로더. 대부분 운영 체제의 커널을 불러올 수 있다
        li init 프로세스 실행 : /etc/inittab
        p systemd가 사용되는 경우, inittab은 사용되지 않는다
        li init 프로세스 중에 /etc/rc.d/rc.local 스크립트를 실행한다
        p 해당 파일은 호환을 위해 아직 남아있지만, 사용자 정의 systemd 서비스나 udev 규칙을 만드는 것이 권장된다

    h1 shutdown : 시스템 종료
    +asCode('shell') $ shutdown [OPTIONS...] time [warning-message]
    ol
        li -H : 시스템 종료
        li -P : 시스템 종료 + 전원 차단(하드웨어 지원 필요)
        li -r : 재부팅
        li -c : 대기중인 shutdown 취소
        li time : now | +
            i number
            |  | yymmddhhmm
        p +number 단위(기본: 분)를 지정하려면 접미사 "s", "sec", "m", "min", "h", "hour" 이용
        li warning-message : 로그인한 유저들에게 보낼 브로드캐스팅 메시지

    h1 init : 일시적인 runlevel 변경
    +asCode('shell') $ init runlevel
    ol
        li runlevel : 0(종료), 6(재부팅), 1(복구), 2(multiuser without NFS), 3(multiuser; TUI), 5(X11; GUI)
        li 시스템 기본 runlevel 확인
        +asCode('shell') $ systemctl get-default

    h1 사용자 관리
    ol
        li useradd : 사용자 추가
        +asCode('shell') $ useradd [options] USER_NAME
        p -d(HOME_DIR), -g(group id or name), -p(password), -D(기본값 출력/설정), 등...

        li passwd : 비밀번호 설정
        +asCode('shell') $ passwd [options] USER_NAME
        p -d(삭제), -l(잠금), -u(잠금 해제), -e(강제 만료)

        li usermod : 사용자 수정
        +asCode('shell') $ usermod [options] USER_NAME
        p -d(HOME_DIR), -m(HOME_DIR 변경 시 파일 이동), -L(잠금), -p(password), 등...

        li userdel : 사용자 삭제
        +asCode('shell') $ userdel [options] USER_NAME

        li groupadd : 사용자 그룹 추가
        +asCode('shell') $ groupadd [options] GROUP_NAME
        p -g(수동 GID), -p(password)

        li groupdel : 사용자 그룹 삭제
        +asCode('shell') $ groupdel [options] GROUP_NAME

        li su : 다른 사용자 권한 사용
        +asCode('shell') $ su [options] [-] [USER_NAME [arg]...]
        p 다른 사용자의 권한으로 쉘을 실행한다. USER_NAME이 없으면 root로 간주한다. 단순히 '-'만 있으면 '-l'과 동일하다.

        li 사용자 목록 : /etc/passwd
        +asCode().
            ID:Password(x):UID:GID:Comment:HOME_DIR:SHELL
            root:x:0:0:root:/root:/bin/bash
            dgkim:x:1000:1000:dgkim:/home/dgkim:/bin/bash
        li 비밀번호 목록 : /etc/shadow
        p !!는 비밀번호가 설정되지 않았음을 의미
        li 사용자의 홈디렉터리는 /etc/skel의 파일을 /home/${USER_NAME}에 복사하여 만들어진다

    h1 파일 시스템
    +asCode() UNIX에서 모든 것은 파일이다. 파일이 아닌 것이 있다면, 프로세스다.
    ol
        li 파일 종류
        ul
            li regular file(-) : 일반적인 데이터(텍스트, 바이너리)를 갖는 파일
            li directory(d) : 다른 파일의 목록을 갖는 파일
            li special file(c) : IO에 이용. 대부분 /dev 경로에 존재
            li link(l) : 다른 파일/디렉터리를 가리키는 파일
            li socket(s) : 프로세스 간 통신에 이용. TCP/IP 소켓과 유사
            li named pipe(p) : 프로세스 간 통신에 이용. 네트워크 소켓 semantic를 사용하지 않음
            li block device(b) : 하드디스크, DVD 등 블록/섹터 단위 IO 장치파일

        li 디렉터리 구조
        table
            +ths('디렉터리', '내용')
            +tds('/bin', '시스템, 관리자, 일반 사용가 모두가 공유하는 명령어')
            +tds('/boot', '시동에 필요한 파일')
            +tds('/dev', '주변장치파일')
            +tds('/etc', '환경설정')
            +tds('/home', '유저 개인 파일')
            +tds('/lib', '라이브러리, 커널 모듈')
            +tds('/mnt, /media', '보조기억장치 mount point')
            +tds('/net', '원격 파일 시스템 mount point')
            +tds('/opt', '3rd party 프로그램')
            +tds('/proc', '시스템 리소스 정보')
            +tds('/root', '관리자 전용 홈 디렉터리')
            +tds('/sbin', '시스템 및 관리자용 프로그램')
            +tds('/tmp', '임시 파일. 재부팅 시 삭제되므로 저장용으로 사용하지 말 것')
            +tds('/usr', '응용(not system)프로그램')
            +tds('/var', '자주 변경하는 파일')

        li 자신의 홈 디렉터리 확인 : echo $HOME

        li I-node
        p 파일의 이름을 제외한 모든 정보. ID는 각 파일에 고유하게 부여된다

        li pwd : 작업 디렉터리 절대경로 출력. Print working directory
        +asCode('shell') $ pwd

        li cd : 작업 디렉터리 변경
        +asCode('shell').
            $ cd            # 자신의 HOME_DIR로
            $ cd DIR        # 지정 디렉터리로
            $ cd ~USER_NAME # 유저 HOME_DIR로

        li ls : 파일 목록 출력
        +asCode('shell') $ ls [options] [paths]
        ul
            li options
            p -a(.로 시작하는 경로 포함), -c(with -lt: 시간순, with -l: 이름순), -X(확장자순), -S(크기순), -r(역정렬), -l(자세히), 등...
            li 출력 예
            +asCode('shell').
                d rwx r-x r-x # 디렉터리, 소유자 권한, 그룹 권한, 기타 사용자 권한 755(read, write, execute)
                - rw- r-- r-- # 파일, (상동) 644
                l r-- r-- r-- # 링크, (상동) 444

        li mkdir : 디렉터리 생성
        +asCode('shell') $ mkdir [options] [directories]
        p -m(권한, 기본 755), -p(경로상의 모든 디렉터리 생성)

        li rm : 파일 삭제
        +asCode('shell') $ rm [options] [paths]
        ul
            li options
            p -f(파일이 없으면 무시), -i(각 파일 삭제 확인), -r(재귀 실행), 등...
            li 예. my_dir 디렉터리 및 내부 파일 모두 삭제
            +asCode('shell') $ rm -rf ./my_dir

        li touch : 파일 시각 변경
        +asCode('shell') $ touch [options] [files]
        p 각 파일에 대해 시간 정보를 현재 시각으로 변경한다. 파일이 없으면 생성한다(크기 0).

        li 파일 권한 변경
        +asCode('shell').
            $ chmod [options] 8진수 [paths]
            # 예. 모든 .sh 파일 실행 권한 부여
            $ chmod +x *.sh
            # 예. bin/ 디렉터리 하위 전체에 실행 권한 부여
            $ chmod -R +x ./bin/

            # 예. tmp/ 디렉터리 하위 전체 소유자 변경
            $ chown -R readonly ./tmp/

            # 예. tmp/ 디렉터리 하위 전체 소유 그룹 변경
            $ chgrp -R readonly ./tmp/

        li cp : 파일 복사
        +asCode('shell').
            $ cp [options] source dest_path
            $ cp [options] [sources] [target_directory]
        p -a(파일 속성 유지), -b(목적지에 이미 있으면 백업하고 복사), -r(재귀 실행), -s(심볼릭 링크 생성), 등...

        li mv : cp + 원본 삭제

        li cat : 파일 텍스트 출력
        +asCode('shell') $ cat [options] [files]
        p -n(줄 번호), -E(줄 끝에 $), -s(반복적인 빈 라인 생략), -T(탭을 ^T로 표기)

        li find
        p 파일명 표현에 와일드카드 *, ?가 허용된다. 표현식 앞에 !이나 -not을 붙일 수 있다. 표현식들 사이를 -and, -or로 엮을 수 있다.

        li grep : 텍스트 검색
        +asCode('shell') $ grep [options] pattern [files]
        p -E(ERE), -G(BRE), -P(Perl Regexp), -e(정규표현식), -i(ignore case), -w(패턴에 단어 전체가 매칭되는 경우만), -x(패턴에 줄 전체가 매칭되는 경우만), -m(최대 출력 개수), -n(줄 번호 같이 출력), -o(매칭된 부분만 출력), -l(매칭된 파일들의 이름만 출력), -L(매칭되지 않는 파일들의 이름만 출력), -A(매칭 후 n개 라인도 출력), -B(매칭 전 n개 라인도 출력) 등...

        li | : 파이프라인
        p 프로세스들의 출력과 입력을 잇는 파이프라인을 구성한다.
        +asCode('shell') $ history | grep psql

        li 리다이렉션
        p > : 파일이 없다면 생성하고, 있다면 덮어쓴다
            br
            | >> : 파일이 없다면 생성하고, 있다면 append
            br
            | &lt; : 파일로부터 표준 입력을 받는다
        li tar : 압축
        +asCode('shell').
            $ tar [options] file       # 압축해제
            $ tar [options] file paths # 압축
        p Main Operation : -A(append), -r(append), -c(create), -d(파일 시스템과의 차분 출력), -t(목록 출력), -u(update), -x(압축해제)
            br
            | 포맷 : --bzip2, --xz, --lzip, --lzma, --gzip
            br
            | -h(링크 자체 대신, 링크가 가리키는 파일을 압축한다)

    h1 서비스 관리
    table
        tr
            th 구분
            th init
            th systemd
        tr
            td 시작
            td /etc/init.d/${service} start
            td systemctl start ${service}
        tr
            td 종료
            td /etc/init.d/${service} stop
            td systemctl stop ${service}
        tr
            td 재시작
            td /etc/init.d/${service} restart
            td systemctl restart ${service}
        tr
            td 상태
            td /etc/init.d/${service} status
            td systemctl status ${service}
        tr
            td 자동 시작 O
            td chkconfig ${service} on
            td systemctl enable ${service}
        tr
            td 자동 시작 X
            td chkconfig ${service} off
            td systemctl disable ${service}
        tr
            td 자동 시작 상태
            td chkconfig --list ${service}
            td systemctl is-enabled ${service}
        tr
            td 서비스 목록
            td ls /etc/init.d
            td systemctl --type service

    h1 패키지 관리
    ol
        li RPM : Redhat Package Manager
        p {package_name}-{version}-{release}.{architecture}.rpm
        +asCode('shell') $ rpm [options]
        p -a(전체 패키지 검증), -i(install), -U(설치 또는 upgrade), -F(기존 패키지 upgrade), -v(verbose), -h(진행과정을 #로), -e(erase), -qa(설치된 패키지 목록), -qi(패키지 상세 정보) 등...
        li yum
        p 인터넷 저장소로부터 패키지를 다운로드하여 설치. 의존 패키지까지 자동 설치한다.
            br
            | Commands : clean(캐시 삭제), check-update, downgrade, erase, info, install, list, reinstall, search, update, version, 등...

    h1 EPEL(Extra Packages for Enterprise Linux) 허용
    ol
        li 서드 파티 패키지를 설치하려면 EPEL을 허용해야 한다
        li RHEL 6.x / CentOS 6.x
        +asCode('shell') $ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
        li RHEL 7.x / CentOS 7.x
        +asCode('shell') $ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        p 또는
        +asCode('shell') $ yum install epel-release.noarch

    h1 시간 관련
    ol
        li date : 시각 출력/변경
        +asCode('shell').
            $ date                # 현재 시각 출력
            $ date "+%Y-%m-%d %T" # 포맷 지정

            $ date -s time_string # 시각 변경
            $ date -s "2019-01-01 12:34:56"

        li
            +asA('https://nxmnpg.lemoda.net/8/ntpdate', 'ntpdate')
            |  : 시각 동기화
        +asCode('shell').
            $ ntpdate server    # 동기화
            $ ntpdate -d server # 오차 출력
        p NTP : Network Time Protocol. 시간 동기화를 위한 프로토콜.
        +asA('https://zetawiki.com/wiki/공용_NTP_서버_목록')

    h1 crond : 작업 예약
    +asCode('shell').
        $ systemctl status crond # 상태 확인
        $ crontab -l             # 작업 목록 출력
            # -e : edit
            # -u : 사용자 지정
    ul
        li 유저가 아닌 시스템 단위의 작업은 /etc/crontab 직접 수정
        li crontab path 설정
        +asCode() PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin

    h1 프로세스 관련
    ol
        li 새 프로세스 실행
        ol
            li fork : 새 프로세스는 기존 프로세스(parent)가 PID만 다른 복제본을 생성함으로써 만들어진다.
            li exec : 새 프로세스의 정보로 주소 공간을 덮어쓴다

        li ps : 프로세스 출력. Process Snapshot
        +asCode('shell') $ ps -ef # -e(전체 프로세스), -f(full-format)

        li w : 로그인한 유저와 무엇을 실행중인지 출력

        li kill : 프로세스 종료
        +asCode('shell') $ kill -9 pid # 15(일반 종료), 2(종료; 무시 가능), 9(강제종료; 무시 불가), 1(구성 파일 다시 읽기; 데몬 프로세스)

        li top : 실행 중인 작업 보기.

        li 백그라운드 작업
        ul
            li %n : 모든 백그라운드 프로세스는 번호를 할당받으며, %n으로 참조할 수 있다
            li Ctrl + Z : 현재 프로세스를 백그라운드로 전환하고 suspend
            li bg : 백그라운드 job으로 계속 실행 ↔ fg %n
            li jobs : 백그라운드 job 리스트
            p 명령행 끝에 &를 붙이면 즉시 백그라운드 job으로 실행시킬 수 있다
                br
                | 현재 터미널 세션이 종료해도 n번 백그라운드 job을 계속하게 하려는 경우 : disown -h %n
            li nohup name.sh > /dev/null 2>&1 &
            ul
                li nohup : 세션이 종료해도 프로세스는 계속 실행
                li > /dev/null : stdout은 버림
                li 2>&1 : strerr를 stdout으로 출력 - 따라서 같이 버림
                li & : 백그라운드로 실행

    h1 메모리 관련
    ol
        li vmstat : Report virtual memory statistics
        +asCode('shell') $ vmstat 1 # 1초마다 출력

        li free : Display amount of free and used memory in the system.
        +asCode('shell').
            $ free -m -w -h -s 1
                # -m : 메가바이트 단위
                # -w : wide output
                # -h : human-readable output
                # -s 1 : 1초마다

    h1 환경변수
    +asCode('shell').
        $ printenv [VAR_NAMES]
        $ echo $VAR_NAME
        $ export VAR_NAME[=value]
        # export PATH="$PATH:/usr/java/jdk-13.0.2/bin

    h1 쉘
    ol
        li 유저의 기본 쉘은 /etc/passwd에 설정된다
        li echo $SHELL : 사용중인 쉘 확인
        li 종류
        ul
            li Login shell
            p 최초 실행 시 유저명과 비밀번호를 묻고 진입하는 쉘.
            li Non login shell
            p 기존 쉘에서 인증없이 새로 시작한 쉘.

    h1 Bash
    div        
        h2 자동 실행 스크립트
        ul
            li Login shell : /etc/profile, ~/.bash_profile, ~/.bash_login or ~/.profile, ~/.bash_logout
            li Non login shell : ~/.bashrc
            p ~/.bashrc 파일은 ~/.bash_profile or ~/.profile에서 자동으로 포함한다
        h2 Commands
        ul
            li echo
            p end-of-line 문자를 덧붙여 stdout으로 단순 출력. 항상 0 종료
            li printf
            p 포맷대로 stdout 출력. 처리에 따라 종료 상태 다를 수 있음.
        h2 스크립트 디버깅
        ul
            li 전체 스크립트 : bash -x filename
            li 일부분 : 스크립트 내에서 플래그 조정
            +asCode('shell').
                # ...
                set -x # start debugging
                w
                set +x # stop debugging
            li 현재 쉘에서 직접 플래그 조정
            ul
                li set -f : disable file name generation using metacaracters
                li set -v : print shell input lines
                li set -x : print command traces before executing command
        p 스크립트
        +codeBtn('/Repositories/sh/0_basic.sh', 'bash')
        +codeBtn('/Repositories/sh/0_basic.txt', 'text') 실행 결과 »
        p 특별 전역 변수
        p $?(마지막 명령 리턴값), $>(프로세스의 사용자 ID), $0(현재 Perl 스크립트 이름), 등...
        // https://tldp.org/LDP/Bash-Beginners-Guide/html/chap_03.html 부터
    h1 FTP Server : vsftpd
    ol
        li 설치
        +asCode('shell') $ yum install vsftpd

        li 설정 : /etc/vsftpd/vsftpd.conf
        +asCode('ini').
            anonymous_enable=NO # 익명 차단
            listen_ipv6=NO # IPv4 사용

        li 방화벽 허용
        +asCode('shell').
            $ firewall-cmd --permanent --add-service=ftp
            $ firewall-cmd --permanent --add-port=21/tcp
            $ firewall-cmd --reload
            # ↓ 잘 됐는지 확인
            $ firewall-cmd --zone=public --list-all

        li SELinux 관련 정책 확인
        +asCode('shell').
            $ getsebool -a | grep ftp
            $ setsebool ftp_home_dir on # 필요한 권한은 허용

        li 시스템 시작
        +asCode('shell').
            $ systemctl enable vsftpd
            $ systemctl restart vsftpd
    ul
        li root 로그인 허용
        p /etc/vsftpd/ftpusers, /etc/vsftpd/user_list에서 root 제거

        li 사용자 홈 디렉터리 외부 접근 허용
        p /etc/vsftpd/chroot_list : chroot_list_enable=YES

        li Active Mode 사용 : 20포트
        p /etc/vsftpd/vsftpd.conf : pasv_enable=NO

        li Passive Mode 사용
        ol
            li /etc/vsftpd/vsftpd.conf
            +asCode('ini').
                connect_from_port_20=NO
                pasv_enable=YES
                pasv_min_port=50000
                pasv_max_port=50010
            li 방화벽에서 [pasv_min_port,pasv_max_port]/tcp 허용

    h1 SELinux
    ol
        li SELinux 모드 : enforce, permissive, disable
        p setenforce 1 # enforce로 임시 변경
            br
            | setenforce 0 # permissive로 임시 변경
            br
            | getenforce # 모드 확인
        li 부팅시 사용되는 기본 모드는 /etc/selinux/config에 정의돼있다
        li SELinux 로그 위치 : /var/log/audit/audit.log
        li SELinux 로그 분석 유티릴티 : setroubleshoot
        +asCode('shell').
            $ yum install setroubleshoot
            $ sealert -a /var/log/audit/audit.log

    h1 /etc/hosts
    p: strong address hostname[[ alias1]...]
    +asCode().
        127.0.0.1   localhost localhost4
        ::1         localhost localhost6

    h1 vi
    div
        +asA('https://vim.rtorr.com/lang/ko/', 'Vim Cheat Sheet »')

        h2 모드
        ol
            li 처음 vi를 실행하면 normal mode(command mode)
            p insert mode와 visual mode에서 esc를 누르면 normal mode로 회귀.
            li i를 누르면 insert mode
            li v를 누르면 visual mode
            li :를 누르고 명령어 실행
            ul
                li :set nu # 줄 번호 표시
                li :syn on, :syn enable # 키워드 및 문맥 강조

        h2 저장
        ol
            li :w
            li :w! 덮어쓰기
            li :w 파일명 // 새 파일인 경우
            li :saveas 파일명

        h2 종료
        ol
            li :q
            li :wq : 저장 후 종료
            li :q! : 저장하지 않고 종료

        h2 이동
        div
            img.w3-round(src='http://cfile8.uf.tistory.com/image/141F57474F4732890DE706')

        h2 vim
        ol
            li 열기
            ul
                li :edit 파일명
                li :tabnew 파일명
                li $ vim 파일명1 파일명2 ...
                p :n으로 열린 파일 선택. 파일을 탭으로 열고 싶다면 -p 옵션
            li 복사/붙여넣기
            ul
                li 복사 : Ctrl + Insert
                li 붙여넣기 : Shift + Insert
                p ~/.vimrc 에서
                    br
                    | set mouse=a 로 되어있던게 문제였습니다. set mouse=c 로 변경하니까 vim 에서 텍스트의 복사하기 붙여넣기 잘 되는군요.
                    br
                    | a 는 마우스를 사용하겠다는 것이고 c 는 마우스를 사용치 않겠다는 것 같은데, c 로 해놔도 마우스로 커서 옮기고 스크롤하는 것 등은 잘 되더군요.. 출처 : https://kldp.org/node/129456

        h2 지우기
        ol
            li n dd : 커서로부터 n 줄 삭제
            li n dw : 커서로부터 n 단어 삭제
            li gg -> dG : 첫줄로 이동 -> 끝까지 삭제

    h1: +asA('https://tldp.org/HOWTO/HOWTO-INDEX/index.html', 'Linux HOWTO')
    div
        h2: +asA('https://tldp.org/HOWTO/HOWTO-INDEX/os.html', 'The Linux OS')
        div
            h3 Getting Started
