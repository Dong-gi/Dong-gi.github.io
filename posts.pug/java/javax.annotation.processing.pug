include ../../source/skeleton.pug
+post('Annotation Processing API', 'Java, Annotation Processing', 'Annotation Processing API 정리')
    h1 참고 자료
    ol
        li: +asA('https://docs.oracle.com/en/java/javase/12/docs/api/java.compiler/javax/annotation/processing/package-summary.html')
        li: +asA('https://cloudogu.com/en/blog/Java-Annotation-Processors_1-Intro')
        li: +asA('https://www.baeldung.com/java-annotation-processing-builder')
        li: +asA('https://medium.com/@iammert/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657')
        li: +asA('https://pluu.github.io/blog/android/2015/12/24/annotation-processing-api/')

    h1 애너테이션 처리 절차
    ol
        li 컴파일러가 소스 파일에서 발견한 각 annotated element들에 대해 적절한(@SupportedAnnotationTypes) 프로세서를 호출한다
        p 애너테이션 프로세서들은 미리 컴파일러에 알려져야 한다
        li 위 과정을 하나의 라운드라고 부르며, 각 라운드에서 출력된 새로운 소스 파일들은 다음 라운드의 입력이 된다
        li 라운드에서 더 이상 새로운 소스 파일 생성이 없다면 애너테이션 처리는 종료된다
        li 애너테이션 프로세서는 연관 정보(~Environment)가 담긴 객체들을 넘겨 받는다

    h1 @interface SupportedAnnotationTypes
    +asCode('java').
        String[] value
            // 지원하는 애너테이션 타입 목록
            // 와일드카드 * 사용 가능. 모듈을 지정하려면 "module_name/"를 앞에 붙이면 된다

    h1 ProcessingEnvironment
    +asCode('java').
        Map&lt;String,String> getOptions() // 프로세서에 특정된 옵션들
        Messager getMessager()             // 에러, 경고, 알림을 보고할 메신저
        Filer getFiler()                   // 새로운 소스 파일을 만들기 위한 파일러
        SourceVersion getSourceVersion()

    h1 RoundEnvironmnent
    +asCode('java').
        boolean processingOver() // 이번 라운드의 결과가 다음 라운드로 넘어갈 것인지 여부
        boolean errorRaised()    // 이전 라운드에서 에러가 발생했는지 여부
        Set&lt;? extends Element> getRootElements()
        Set&lt;? extends Element> getElementsAnnotatedWith(TypeElement a)
            // + 오버로딩 + getElementsAnnotatedWithAny

    h1 Processor
    ol
        li 서브클래스는 외부에서 생성하기 위한 기본 생성자를 하나 가져야 한다
        li 생성된 후, init 메서드를 통해 적절한 ProcessingEnvironment를 제공받는다
        li 이후 getSupportedAnnotationTypes, getSupportedOptions, getSupportedSourceVersion이 한번씩 호출된다
        li 대상을 찾은 경우 process 메서드를 호출한다; Processor 인스턴스는 전체 라운드에서 한 번만 생성된다
        li: +asCode('java') boolean process(Set&lt;? extends TypeElement> annotations, RoundEnvironmnent roundEnv)
        p 처리하는 애너테이션이 설정된 요소들을 받아 처리한다. 처리했다면 true를 반환하고, 이번 라운드에서 해당 요소들은 더 이상 다른 프로세서들이 처리할 수 없다
            br
            | 모든 애터네이션(*)을 처리할 수 있다고 했지만, 애너테이션된 요소를 발견하지 못한 경우에만 annotations가 비어있을 수 있다

    h1 AbstractProcessor
    +asCode('java').
        Set&lt;String> getSupportedOptions()         // @SupportedOptions가 있다면 해당 값 반환. 없으면 빈 집합
        Set&lt;String> getSupportedAnnotationTypes() // @SupportedAnnotationTypes가 있다면 해당 값 반환. 없으면 빈 집합. 9 미만이면 모듈 prefix는 제거된다
        SourceVersion getSupportedSourceVersion()    // @SupportedSourceVersion이 있다면 해당 값 반환. 없으면 RELEASE_6

    h1 IDE에서 애너테이션 프로세싱 켜기
    ol
        li Eclipse : 프로젝트 설정 변경
        +w3img('/imgs/20191128_134424.png')
        +w3img('/imgs/20191128_134459.png')
        li Android Studio : 안드로이드 스튜디오(프로젝트 X) 설정 변경
        +w3img('/imgs/20191128_133722.png')

    h1 javac -processor 이용 예
    ol
        li 애너테이션 정의 :
            +codeBtn('/Repositories/Eclipse/annotation-processing1/src/main/java/io/github/donggi/annotation/MyTarget.java', 'java') MyTarget »
        li 애너테이션 프로세서 정의 :
            +codeBtn('/Repositories/Eclipse/annotation-processing1/src/main/java/io/github/donggi/annotation/processor/MyTargetProcessor.java', 'java') MyTargetProcessor »
        li 애너테이션 컴파일
        +asCode('shell') D:\>javac -encoding UTF-8 io/github/donggi/annotation/MyTarget.java
        li 애너테이션 프로세서 컴파일
        +asCode('shell') D:\>javac -encoding UTF-8 io/github/donggi/annotation/processor/MyTargetProcessor.java
        li 애너테이션 프로세서 지정하여 컴파일
            +codeBtn('/Repositories/Eclipse/annotation-processing1/src/main/java/io/github/donggi/annotation/test/MyTargetTest.java', 'java') MyTargetTest »
        +asCode('shell').
            D:\>javac -encoding UTF-8 -processor io.github.donggi.annotation.processor.MyTargetProcessor io/github/donggi/annotation/test/MyTargetTest.java
            Note: [ROUND  1] It's my turn.
            io\github\donggi\annotation\test\MyTargetTest.java:6: Note:
            public class MyTargetTest {
                          ^
            Note: Annotation 'io.github.donggi.annotation.MyTarget' found at 'io.github.donggi.annotation.test.MyTargetTest'
            Note: Annotation value : Hello MyTargetTest
            Note: Creating 'io.github.donggi.annotation.test.MyTargetTest' -> 'io.github.donggi.annotation.test.MyTargetTestGenerated'
            Note: [ROUND  2] It's my turn.
            D:\io\github\donggi\annotation\test\MyTargetTestGenerated.java:6: Note:
            public class MyTargetTestGenerated {
                          ^
            Note: Annotation 'io.github.donggi.annotation.MyTarget' found at 'io.github.donggi.annotation.test.MyTargetTestGenerated'
            Note: Annotation value :
            Note: Skipping generated file 'io.github.donggi.annotation.test.MyTargetTestGenerated'
            Note: [ROUND  3] It's my turn.

    h1 javac -cp 이용 예
    ol
        li 위 "javac -processor 이용 예" 프로젝트 그대로 jar 빌드
        li META-INF/services/javax.annotation.processing.Processor 파일에 애너테이션 프로세서 클래스
            +codeBtn('/Repositories/Eclipse/annotation-processing1/src/main/resources/META-INF/services/javax.annotation.processing.Processor', 'text') 명시 »
        +w3img('/imgs/20191128_164401.png')
        +w3img('/imgs/20191128_164656.png')
        li jar 포함하여 컴파일
        +asCode('shell').
            D:\>javac -encoding UTF-8 -cp annotation-processing1-1.0.jar io/github/donggi/annotation/test/MyTargetTest.java
            Note: [ROUND  1] It's my turn.
            // 이하 생략

    h1 Eclipse에서 프로세서 jar 이용 예
    ol
        li 위 "javac -cp 이용 예" jar 그대로 이용
        li 위 "IDE에서 애너테이션 프로세싱 켜기"와 같이 애너테이션 프로세싱 허용하고 jar 등록
        li 소스 작성에 따라 자동적으로 호출되고, Error Log 뷰에 아래와 같이 표시된다
        +w3img('/imgs/20191128_170023.png')

    h1 Eclipse Gradle 프로젝트 예
    ol
        table.marker
            caption 프로젝트 구성
            tr
                th annotation-processing3
                td 루트 프로젝트
            tr
                th annotation-processing3-definition
                td 애너테이션 정의 프로젝트
            tr
                th annotation-processing3-processor
                td 프로세서 프로젝트
            tr
                th annotation-processing3-test
                td 테스트 프로젝트
        +codeBtn('/Repositories/Eclipse/annotation-processing3/settings.gradle', 'text') 루트 settings.gradle »
        +codeBtn('/Repositories/Eclipse/annotation-processing3/build.gradle', 'text') 루트 build.gradle »
        +codeBtn('/Repositories/Eclipse/annotation-processing3/annotation-processing3-processor/build.gradle', 'text') processor build.gradle »
        +codeBtn('/Repositories/Eclipse/annotation-processing3/annotation-processing3-test/build.gradle', 'text') test build.gradle »
        li 프로세서 프로젝트는 위 "javac -cp 이용 예"와 마찬가지로 javax.annotation.processing.Processor를 포함한다
        +w3img('/imgs/20191128_180107.png')
        li Gradle 빌드
        +asCode('shell').
            D:\annotation-processing3>set GRADLE_OPTS=-Dfile.encoding=UTF-8
            D:\annotation-processing3>gradle annotation-processing3-test:compileJava
            > Task :annotation-processing3-test:compileJava
            Note: [ROUND  1] It's my turn.
            D:\annotation-processing3\annotation-processing3-test\src\main\java\io\github\donggi\annotation\test\MyTargetTest.java:6: Note:
            public class MyTargetTest {}
                          ^
            Note: Annotation 'io.github.donggi.annotation.MyTarget' found at 'io.github.donggi.annotation.test.MyTargetTest'
            Note: Annotation value : Hello MyTargetTest
            Note: Creating 'io.github.donggi.annotation.test.MyTargetTest' -> 'io.github.donggi.annotation.test.MyTargetTestGenerated'
            Note: [ROUND  2] It's my turn.
            D:\annotation-processing3\annotation-processing3-test\build\generated\sources\annotationProcessor\java\main\io\github\donggi\annotation\test\MyTargetTestGenerated.java:6: Note:
            public class MyTargetTestGenerated {
                          ^
            Note: Annotation 'io.github.donggi.annotation.MyTarget' found at 'io.github.donggi.annotation.test.MyTargetTestGenerated'
            Note: Annotation value :
            Note: Skipping generated file 'io.github.donggi.annotation.test.MyTargetTestGenerated'
            Note: [ROUND  3] It's my turn.
            Note: [ROUND  4] It's my turn.
            BUILD SUCCESSFUL in 3s
            6 actionable tasks: 6 executed
