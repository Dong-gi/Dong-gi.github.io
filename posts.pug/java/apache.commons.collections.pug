include ../../source/skeleton.pug
+post('Apache Commons Collections 4.4', 'Apache Commons Collections', 'Apache Commons Collections 정리')
    h1 org.apache.commons.collections4
    div
        h2 컬렉션 자료형 인터페이스
        div
            h3 BoundedCollection&lt;E> Since 3.0
            ol
                li 크기 제한을 갖는 컬렉션
                li isFull(), maxSize()

            h3 Bag&lt;E> Since 2.0
            ol
                li 컬렉션이 보유한 객체에 대한 개수를 유지한다.
                li 예를 들어, Bag {a, b, c, a} 인스턴스에 대해 getCount(a) == 2, uniqueSet() == {a, b, c}
                li Bag의 일부 메서드는 Collection API와 다르게 작동하므로, Collection으로 참조하지 않을 것을 권장하고 있다
            +asCode('java').
                boolean add(E object)
                    // uniqueSet()에 있다면 카운트만 1 증가하고 false 반환.
                    // uniqueSet()에 없다면 사본 추가 → 카운트 1 설정 → true 반환.
                boolean remove(Object object)
                    // object를 모두 제거하고, 컬렉션의 변동이 있다면 true를 반환한다.
                boolean remove(Object object, int nCopies)

                boolean containsAll(Collection&lt;?> coll)
                    // coll의 모든 요소가 uniqueSet()에 존재하고, 각 요소에 대한 getCount(Object)가 coll에 존재하는 개수보다 크거나 같은 경우 true 반환
                boolean removeAll(Collection&lt;?> coll)
                    // coll의 모든 요소에 대해 한 번씩 remove(Object)를 호출한 것과 같다.
                boolean retainAll(Collection&lt;?> coll)
                    // coll에 포함된 요소만 Bag에 유지하되, coll에 존재하는 개수만큼만 최대로 유지한다.

            h3 SortedBag&lt;E> Since 2.0
            p Comparator&lt;? super E>를 이용해 원소 정렬

            h3 MultiSet&lt;E> Since 4.1
            p Bag과 유사하지만, Collection API를 좀 더 적절하게 따른다.

            h3 IterableMap&lt;K, V> Since 3.0
            p 엔트리 집합을 만들지 않고 MapIterator를 지원

            h3 IterableSortedMap&lt;K, V> Since 4.0
            p
                +goto('SortedMap', 'java.base.html')
                |  + 
                +goto('OrderedMap')

            h3 BoundedMap&lt;K, V> Since 3.0
            p 크기 제한이 있는 맵

            h3 BidiMap&lt;K, V> Since 3.0
            ol
                li 키와 값이 일대일 대응을 만족하도록 강제하여, 값을 통한 키의 탐색이 가능하게 한다.
                li 값을 통한 키의 탐색은 키를 통한 값의 탐색과 동일한 성능으로 이루어져야 한다.
                li 키와 값의 위치를 뒤집은 BidiMap을 반환하는 inverseBidiMap() 연산도 지원한다

            h3 SortedBidiMap&lt;K, V> Since 3.0
            p 키, 값 모두에 대한 Comparator를 갖고 있어, inverseBidiMap() 또한 SortedBidiMap

            h3 MultiValuedMap&lt;K, V> Since 4.1
            ol
                li 키에 대한 값들을 컬렉션에 보관하는 맵을 정의한다
                li 키를 통해 얻은 컬렉션의 변경 가능 여부는 구현에 따라 다를 수 있다
                li ListValuedMap&lt;K, V> + SetValuedMap

            +pos('OrderedMap')
            h3 OrderedMap&lt;K, V> Since 3.0
            p 키를 정렬하여 보존하고, 앞뒤로 순회 가능한 맵

            h3 OrderedBidiMap&lt;K, V> Since 3.0
            p inverseBidiMap() 또한 OrderedBidiMap

            h3 Trie&lt;K, V> Since 4.0
            p Prefix tree에 대해 정의한다.
                +codeBtn('/Repositories/Eclipse/apache-commons-collections-example/src/test/java/TrieTest.java', 'java', '[13,32]')
                +w3img('https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/1024px-Trie_example.svg.png')&attributes({style:'max-width:300px'})

        h2 컬렉션 연산 인터페이스
        div
            h3 Unmodifiable Since 3.0
            p 컬렉션 변경 연산이 제공되지 않음을 표시하는 마커 인터페이스

            h3 Get&lt;K, V> Since 4.0
            p Map 인터페이스의 읽기 기능에 대한 정의를 담고 있다. 라고 적혀있지만 remove(Object) 메서드는 여기에 있다.

            h3 IterableGet&lt;K, V> Since 4.0
            p 이 인터페이스를 구현한 Map은 mapIterator() 메서드를 통해 MapIterator&lt;K, V>를 제공한다.

            h3 Put&lt;K, V> Since 4.0
            p Map 인터페이스의 쓰기 기능에 대한 정의를 담고 있다.  Put(K, V)는 V가 아닌 Object를 반환함에 유의.

            h3 FluentIterable&lt;E> Since 4.1
            p Stream과 유사한 기능을 제공하는 Iterable 
            +asCode('java').
                FluentIterable&lt;E> eval() // 독립적인 새로운 뷰 반환
                FluentIterable&lt;E> append(E... elements)
                FluentIterable&lt;E> collate(Iterable&lt;? extends E> other[, Comparator&lt;? super E> comparator])
                    // 현재 뷰 + other로 구성된 새로운 뷰를 정렬하여 반환
                    // comparator 지정하지 않은 경우 ComparatorUtils.NATURAL_COMPARATOR 사용

                FluentIterable&lt;E> loop()
                FluentIterable&lt;E> reverse()
                FluentIterable&lt;E> skip(long elementsToSkip)
                &lt;O> FluentIterable&lt;O> transform(Transformer&lt;? super E, ? extends O> transformer)
                FluentIterable&lt;E> unique()
                FluentIterable&lt;E> zip(Iterable&lt;? extends E> others...)

                boolean contains(Object object)
                E get(int position)

            h3 OrderedIterator&lt;E> Since 3.0
            p 역방향 순회를 추가로 지원한다

            h3 MapIterator&lt;K, V> Since 3.0
            ol
                li 이 인터페이스를 제공하는 Map은 내부에서 데이터를 Entry 객체로 유지하지 않는다(불필요한 객체 생성 방지).
                p Entry 대신 키를 이용해 순회
                li remove(), setValue() 연산은 구현에 따라 지원하지 않을 수 있다.

            h3 OrderedMapIterator&lt;K, V> Since 3.0
            p OrderedMap에 대한 MapIterator

            h3 ResettableIterator&lt;E> Since 3.0 + ResettableListIterator
            p reset() : Iterator가 생성됐을 때 초기 위치로 돌아간다.

        h2 유틸리티 클래스
        div
            h3 BagUtils Since 2.1
            +asCode('java').
                static &lt;E> Bag&lt;E> collectionBag(Bag&lt;E> bag)
                    // Since 4.0 : Collection API를 따르는 백

                // 아래의 함수들에 대하여, SortedBag 버전이 존재한다
                static &lt;E> Bag&lt;E> synchronizedBag(Bag&lt;E> bag)                                         // 스레드-안전
                static &lt;E> Bag&lt;E&Gt; unmodifiableBag(Bag&lt;? extends E> bag)                            // 변경 불가능한 뷰
                static &lt;E> Bag&lt;E> predicatedBag(Bag&lt;E> bag, Predicate&lt;? super E> predicate)        // 아이템 추가 전 테스트 추가
                static &lt;E> Bag&lt;E> transformingBag(Bag&lt;E> bag, Transformer&lt;? super E, ? extends E>) // 아이템 추가 전 변환기 추가

            h3 CollectionUtils Since 1.0
            +asCode('java').
                static &lt;T> Collection&lt;O> union(Iterable&lt;? extends O> a, Iterable&lt;? extends O> b)
                    // a, b의 합집합(Multiset; Bag) 표현을 반환한다. + intersection, disjunction(대칭 차집합), subtract
                    // Since 4.0; subtract에 한하여 3번째 인자로 Predicate을 받는 함수가 존재한다

                    // 각 원소의 cardinality
                    // union : a, b중 큰 쪽과 같다
                    // intersection : a, b중 작은 쪽과 같다
                    // disjunction : cardinality_of_union - cardinality_of_intersection
                    // subtract : cardinality_of_a - cardinality_of_b

                static boolean containsAny(Collection&lt;?> coll1, Collection&lt;?> coll2) // Since 2.1
                static boolean containsAll(Collection&lt;?> coll1, Collection&lt;?> coll2)
                    // Since 4.0; coll1이 coll2의 모든 원소를 포함하는지 여부를 반환한다. 각 원소에 대한 cardinality는 고려 대상이 아니다.

                static &lt;?O> Map&lt;O, Integer> getCardinalityMap(Iterable&lt;? extends O> coll)
                static boolean isSubCollection(Collection&lt;?> a, Collection&lt;?> b)
                    // a가 b의 부분 컬렉션인지(cardinality 고려) 여부 반환
                static boolean isProperSubCollection(Collection&lt;?> a, Collection&lt;?> b)
                    // isSubCollection() && cardinality_of_b > cardinality_of_a를 만족하는 원소가 적어도 하나 존재
                static boolean isEqualCollection(Collection&lt;?> a, Collection&lt;?> b)
                
                static &lt;E> Collection&lt;List&lt;E>> permutations(COllection&lt;E> collection)
                    // Since 4.0; 구성 요소들에 대한 순열을 반환한다. 사이즈가 큰 경우, PermutationIterator를 이용
                
                static &lt;C> Collection&lt;C> retainAll(Collection&lt;C> collection, Collection&lt;?> retain)
                    // Since 3.2; retain에 담긴 요소들만으로 구성된 컬렉션을 반환한다. 반환된 컬렉션 각 요소의 cardinality는 기존과 동일하다. retain 컬렉션의 탐색 속도가 빠를수록 함수 완료가 빨라진다
                
                static &lt;C> Collection&lt;C> predicatedCollection(Collection&lt;C> collection, Predicate&lt;? super C> predicate)
                    // 삽입 제약 추가

            h3 IterableUtils Since 4.1
            p + IteratorUtils. 접합, 변환, 순회 관련 다양한 유틸리티 제공

            h3 ListUtils Since 1.0
            +asCode('java').
                static &lt;T> List&lt;T> intersection(List&lt;? extends E> list1, List&lt;? extends E> list2)
                    // + subtract, union, sum(union - intersection)

                static &lt;T> List&lt;T> longestCommonSubsequence(List&lt;T> a, List&lt;T> b) // Since 4.0

                static &lt;T> List&lt;T> lazyList(List&lt;E> list, Factory&lt;? extends E> factory)
                    // 요청된 인덱스에 한해서만 객체를 생성한다. 빈 구역은 null로 채워진다.

                static &lt;T> List&lt;List&lt;T>> partition(List&lt;T> list, int size) // Since 4.0

            h3 MapUtils Since 1.0
            +asCode('java').
                static &lt;K> String getString(Map&lt;? super K, ?> map, K key)
                    // 조회된 객체에 대하여 toString() 호출. map이 null이면 null 반환. key가 map에 없어도 null 반환.
                    // + Boolean, Number, Byte, Short, Integer, Long, Float, Double, Map, Object

                static &lt;K, V> Properties toProperties(Map&lt;K, V> map)
                static Map&lt;String, Object> toMap(ResourceBundle resourceBundle)

                static &lt;K, V> Map&lt;K, V> invertMap(Map&lt;K, V> map)
                    // 키-값 위치를 바꾼 새 HashMap 반환

                static void verbosePrint(PrintStream out, Object label, Map&lt;?, ?> map)
                    // + debugPrint

            h3 MultiMapUtils Since 4.1
            +asCode('java').
                static &lt;K, V> ListValuedMap&lt;K, V> newListValuedHashMap()
                    // + newSetValuedHashMap

            h3 SetUtils Since 2.1
            +asCode('java').
                static &lt;E> SetUtils.SetView&lt;E> difference(Set&lt;? extends E> a, Set&lt;? extends E> b)
                    // Since 4.1; 차집합 a-b
                    // + disjunction(대칭 차집합), intersection(교집합), union(합집합)

    h1 org.apache.commons.collections4.bag
    ol
        li class HashBag&lt;E> extends AbstractMapBag&lt;E> implements Serializable Since 3.0
        p 저장소로 HashMap을 이용하는 표준 Bag 구현을 제공한다.
        li class TreeBag&lt;E> extends AbstractMapBag&lt;E> implements SortedBag&lt;E>, Serializable Since 3.0
        p 저장소로 TreeMap을 이용하는 표준 SortedBag 구현을 제공한다.
        li final class CollectionBag&lt;E> extends AbstractBagDecorator&lt;E> Since 4.0 + CollectionSortedBag
        p Bag 인스턴스가 Collection API에 맞게 동작하도록 래핑하는 생성자 CollectionBag(Bag&lt;E> bag)를 제공한다
        li final class UnmodifiableBag&lt;E> extends AbstractBagDecorator&lt;E> implements Unmodifiable Since 3.0 + UnmodifiableSortedBag
        p Bag 인스턴스가 변경되지 않도록 래핑하는 팩터리 메서드 unmodifiableBag(Bag&lt;? extends E> bag)을 제공한다.
        li class PredicatedBag&lt;E> extends PredicatedCollection&lt;E> implements Bag&lt;E> Since 3.0 + PredicatedSortedBag
        p Bag 인스턴스에 요소 추가 제약을 거는 팩터리 메서드 predicatedBag(Bag&lt;E> bag, Predicate&lt;? super E> predicate) // Since 4.0을 제공한다. 요소 추가에 실패하는 경우 IllegalArgumentException 발생.
        li class SynchronizedBag&lt;E> extends SynchronizedCollection&lt;E> implements Bag&lt;E> Since 3.0 + SynchronizedSortedBag
        p Bag 인스턴스가 스레드-안전하도록 래핑하는 팩터리 메서드 synchronizedBag(Bag&lt;E> bag) // Since 4.0을 제공한다.
        li class TransformedBag&lt;E> extends TransformedCollection&lt;E> implements Bag&lt;E> Since 3.0 + TransformedSortedBag
        p Bag 인스턴스의 요소 변환 제약을 거는 팩터리 메서드를 제공한다. 기존 요소를 포함하여 변환하는 경우 transformedBag(...) // Since 4.0, 신규 요소들만 변환하는 경우 transformingBag(...) // Since 4.0

    h1 org.apache.commons.collections4.bidimap
    ol
        li class DualHashBidiMap&lt;K, V> extends AbstractDualBidiMap&lt;K, V> implements Serializable Since 3.0 + DualLinkedHashBidiMap Since 4.0, DualTreeBidiMap Since 3.0
        p 2개의 HashMap 인스턴스를 이용한 BidiMap 구현을 제공한다.
        li class TreeBidiMap&lt;K extends Comparable&lt;K>, V extends Comparable&lt;V>> implements OrderedBidiMap&lt;K, V>, Serializable Since 3.0
        p 키, 값이 모두 정렬 가능할 때, red-black 트리를 이용한 BidiMap 구현을 제공한다.
        li class UnmodifiableBidiMap&lt;K, V> extends AbstractBidiMapDecorator&lt;K, V> implements Unmodifiable Since 3.0 + UnmodifiableOrderedBidiMap, UnmodifiableSortedBidiMap
        p 인스턴스가 변경되지 않도록 래핑하는 팩터리 메서드 unmodifiableBidiMap(...) // Since 4.0을 제공한다.

    h1 org.apache.commons.collections4.collection
    ol
        li class CompositeCollection&lt;E> implements Collection&lt;E>, Serializable Since 3.0
        p 다른 컬렉션(들)에 대해 하나의 뷰를 제공하는 장식자 컬렉션 구현. 뷰에 대한 add/remove 연산이 기저 컬렉션에 적용돼야 한다면 CompositeCollection.CollectionMutator를 제공해야 한다.
        li class IndexedCollection&lt;K, C> extends AbstractCollectionDecorator&lt;C> Since 4.0
        p 컬렉션에 대해 맵과 비슷한 뷰를 제공하는 장식자 컬렉션 구현. 뷰에 대한 변경은 키와 기저 컬렉션의 갱신이 자동으로 이루어지지만, 기저 컬렉션이 직접 변경된 경우 reindex()를 통해 직접 동기화해야 한다.
        li class PredicatedCollection&lt;E> extends AbstractCollectionDecorator&lt;E> Since 3.0
        p 컬렉션에 대해 삽입 제약을 거는 장식자 컬렉션 구현. Builder 팩터리 클래스도 제공한다.
        li class SynchronizedCollection&lt;E> implements Collection&lt;E>, Serializable Since 3.0
        p 컬렉션이 스레드-안전하도록 래핑하는 팩터리 메서드를 제공한다
        li class TransformedCollection&lt;E> extends AbstractCollectionDecorator Since 3.0
        p 컬렉션에 요소 변환 제약을 거는 팩터리 메서드를 제공한다. 기존 요소를 포함하여 변환하는 경우 transformedCollection(...) // Since 4.0, 신규 요소들만 변환하는 경우 transformingCollection(...) // Since 4.0
        li final class UnmodifiableCollection&lt;E> extends AbstractCollectionDecorator&lt;E> implements Unmodifiable Since 3.0 + UnmodifiableBoundedCollection
        p 컬렉션이 변경되지 않도록 래핑하는 팩터리 메서드 제공

    h1 org.apache.commons.collections4.comparators
    ol
        li final class Boolean Comparator implements Comparator&lt;Boolean>, Serializable SInce 3.0
        p Boolean 정렬을 위한 비교자를 제공한다
        li class ComparableComparator&lt;E extends Comparable&lt;? super E>> implements Comparator&lt;E>, Serializable Since 2.0
        p Comparable에 대한 Comparator를 반환하는 유틸리티 메서드를 제공한다
        li class ComparatorChain&lt;E> implements Comparator&lt;E>, Serializable Since 2.0
        li class FixedOrderComparator&lt;T> implements Comparator&lt;T>, Serializable Since 3.0
        p 객체들의 고정된 순서를 비교하는 비교자를 제공한다.
            +codeBtn('/Repositories/Eclipse/apache-commons-collections-example/src/test/java/ComparatorTest.java', 'java')
        li class NullComparator&lt;E> implements Comparator&lt;E>, Serializable Since 2.0
        li class ReverseComparator&lt;E> implements Comparator&lt;E>, Serializable Since 2.0
        li class TransformingComparator&lt;I, O> implements Comparator&lt;I>, Serializable Since 2.1

    h1 org.apache.commons.collections4.iterators
    ol
        li class ArrayIterator&lt;E> implements ResettableIterator&lt;E> Since 1.0
        p 배열에 대한 이터레이터 제공. + ArrayListIterator(java.util.ListIterator 프로토콜 추가 제공), ObjectArrayIterator, ObjectArrayListIterator
        li class ListIteratorWrapper&lt;E> implements ResettableListIterator&lt;E> Since 2.1
        li class PeekingIterator&lt;E> implements Iterator&lt;E> Since 4.0
        li class LoopingIterator&lt;E> implements ResettableIterator&lt;E> Since 3.0
        p + LoopingListIterator Since 3.2
        li class SingletonIterator&lt;E> Since 2.0 + SingletonListIterator
        li class ReverseListIterator&lt;E> implements  ResettableListIterator&lt;E> Since 3.2
        li class PushbackIterator&lt;E> implements Iterator&lt;E> Since 4.0
        p next()를 취소할 수 있다. next()에서 반환하지 않은 객체도 pushback()으로 넣을 수 있으며, 래핑된 실제 iterator에는 영향을 끼치지 않는다.
        li class EnumerationIterator&lt;E> implements Iterator&lt;E> Since 1.0
        p Enumeration이 이터레이터로 동작하도록 하는 어댑터 제공 + IteratorEnumeration, IteratorIterable
        li class TransformIterator&lt;I, O> implements Iterator&lt;O> Since 1.0
        li class EntrySetMapIterator&lt;K, V> implements MapIterator&lt;K, V>, ResettableIterator&lt;K> Since 3.0
        p 맵의 entrySet을 이용한 MapIterator 구현 제공
        li class EmptyIterator&lt;E> implements ResettableIterator&lt;E> Since 3.1
        p + EmptyListIterator, EmptyMapIterator, EmptyOrderedIterator, EmptyOrderedMapIterator, UnmodifiableIterator, UnmodifiableListIterator, UnmodifiableMapIterator, UnmodifiableOrderedMapIterator
        li class BoundedIterator&lt;E> implements Iterator&lt;E> Since 4.1
        p 다른 이터레이터의 특정 범위만 조회하는 래퍼를 제공. + SkippingIterator
        li class FilterIterator&lt;E> implements Iterator&lt;E> Since 1.0
        p + FilterListIterator, UniqueFilterIterator
        li class CollatingIterator&lt;E> implements Iterator&lt;E> Since 2.1
        p 여러 이터레이터들을 특정 순서대로 소비하는 래퍼를 제공. + ZippingIterator(각 이터레이터 1개씩 순회 조회), IteratorChain(넘겨진 순서대로 소비), LazyIteratorChain
        li class ObjectGraphIterator&lt;E> implements Iterator&lt;E> Since 3.1
        p 이터레이터들로 구성된 객체를 하나의 이터레이터로 순회할 수 있는 기능을 제공한다.
            +codeBtn('/Repositories/Eclipse/apache-commons-collections-example/src/test/java/IteratorTest.java', 'java')
        li class PermutationIterator&lt;E> implements Iterator&lt;List&lt;E>> Since 4.0
        p 순열을 조회하는 이터레이터를 제공한다.

    h1 org.apache.commons.collections4.keyvalue
    ol
        li class MultiKey&lt;K> implements Serializable Since 3.0
        p 여러 키 값을 하나의 키로 이용할 수 있게 해준다. 이를 통해 다중 맵을 이용하지 않고 문제를 해결할 수 있다.
        li class DefaultKeyValue&lt;K, V> extends AbstractKeyValue&lt;K, V> Since 3.0
        p Map.Entry를 구현하지 않는 키-값 쌍 기능 제공. 키와 값이 null일 수 있다. + DefaultMapEntry
        li class TiedMapEntry&lt;K, V> implements Map.Entry&lt;K, V>, KeyValue&lt;K, V>, Serializable Since 3.0
        p 맵과 결합된 Map.Entry
        li final class UnmodifiableMapEntry&lt;K, V> extends AbstractMapEntry&lt;K, V> implements Unmodifiable Since 3.0

    h1 org.apache.commons.collections4.list
    ol
        li class CursorableLinkedList&lt;E> extends AbstractLinkedList&lt;E> implements Serializable Since 1.0
        p ListIterator를 통한 동시 수정이 가능한 리스트 구현을 제공한다. listIterator(), cursor() 메서드로 Cursor 객체를 얻을 수 있다.
        li class FixedSizeList&lt;E> extends AbstractSerializableListDecorator&lt;E> implements BoundedCollection&lt;E> Since 3.0
        p 다른 리스트의 크기를 제한하는 래퍼를 제공한다. 요소를 변경하는 작업만 지원된다.
        li class GrowthList&lt;E> extends AbstractSerializableListDecorator&lt;E> Since 3.2
        p 리스트의 크기를 벗어난 인덱스에 대한 add/set 호출이 있을 때, 자동으로 null로 채운다. 음수 인덱스에 대해서는 IndexOutofBoundsException 발생
        li class LazyList&lt;E> extends AbstractSerializableListDecorator&lt;E> Since 3.0
        p GrowthList와 비슷. get 요청된 인덱스에 대한 요소를 특정 인스턴스로 할당한다.
        li class PredicatedList&lt;E> extends PredicatedCollection&lt;E> implements List&lt;E> Since 3.0 + TransformedList
        li class SetUniqueList&lt;E> extends AbstractSerializableListDecorator&lt;E> Since 3.0
        li class TreeList&lt;E> extends AbstractList&lt;E> Since 3.1
        p 임의 인덱스 삽입/제거에 최적화된 리스트 구현 제공.add, get, iterator만 이용한다면 ArrayList가 좋다
        li final class UnmodifiableList&lt;E> extends AbstractSerializableListDecorator&lt;E> implements Unmodifiable Since 3.0

    h1 org.apache.commons.collections4.map
    ol
        li class CaseInsensitiveMap&lt;K, V> extends AbstractHashedMap&lt;K, V> implements Serializable, Cloneable Since 3.0
        p 키의 삽입, 비교 시 모두 소문자로 변환된다. keySet() 역시 소문자로 변환된 키를 반환한다
        li class CompositeMap&lt;K, V> extends AbstractIterableMap&lt;K, V> implements Serializable Since 3.0
        li class CompositeMap&lt;K, V> extends AbstractIterableMap&lt;K, V> implements Serializable Since 3.0
        p 여러 맵들에 대해 하나의 뷰를 제공하는 장식자 맵 제공. 뷰에 대한 삽입/삭제 연산이 기저 맵에 적용되야 한다면 CompositeMap.MapMutator를 제공하면 된다.
        li class DefaultedMap&lt;K, V> extends AbstractMapDecorator&lt;K, V> implements Serializable Since 3.2 + LazyMap, LazySortedMap
        li class FixedSizeMap&lt;K, V> extends AbstractMapDecorator&lt;K, V> implements BoundedMap&lt;K, V>, Serializable Since 3.2 + FixedSizeSortedMap
        li class Flat3Map&lt;K, V> implements IterableMap&lt;K, V>, Serializable, Cloneable Since 3.0
        p 요소가 3개 이하일 때 최적으로 동작하는 맵 제공
        li class HashedMap&lt;K, V> extends AbstractHashedMap&lt;K, V> implements Serializable, Cloneable Since 3.0
        p JDK HashMap + MapIterator + Cloneable
        li class LinkedMap&lt;K, V> extends AbstractLinkedMap&lt;K, V> implements Serializable, Cloneable Since 3.0
        p JDK LinkedHashMap + MapIterator + Cloneable
        p + ListOrderedMap : 삽입 순서를 List에 저장
        li class LRUMap&lt;K, V> extends AbstractLinkedMap&lt;K, V> implements BoundedMap&lt;K, V>, Serializable, Cloneable Since 3.0
        p 임계 크기를 초과하면 가장 마지막으로 사용(get/put)된 entry 제거. DEFAULT_MAX_SIZE == 100
        li class MultiKeyMap&lt;K, V> extends AbstractMapDecorator&lt;MultiKey&lt;? extends K>, V> implements Serializable, Cloneable Since 3.1
        li class PassiveExpiringMap&lt;K, V> extends AbstractMapDecorator&lt;K, V> implements Serializable Since 4.0
        p 맵에 entry를 유지할 시간을 정의. 각 시간이 지나면 맵에서 제거된다.
        li class PredicatedMap&lt;K, V> extends AbstractMapDecorator&lt;K, V> implements Serializable Since 3.0 + PredicatedSortedMap, TransformedMap, TransformedSortedMap
        li class ReferenceIdentityMap&lt;K, V> extends AbstractReferenceMap&lt;K, V> implements Serializable Since 3.0
        p 키, 값의 GC를 허용하고, equals() 대신 ==로 일치를 판별하는 맵을 제공한다. + ReferenceMap
        li final class StaticBucketMap&lt;K, V> extends AbstractIterableMap&lt;K, V> Since 3.0
        p 주어진 한도 내에서는 고성능의 스레드-안전한 java.util.Map 구현을 제공한다. 크기가 한도를 벗어나면 O(n)에 가까워진다.
        li class SingletonMap&lt;K, V> implements OrderedMap&lt;K, V>, BoundedMap&lt;K, V>, KeyValue&lt;K, V>, Serializable, Cloneable Since 3.1
        li class UnmodifiableEntrySet&lt;K, V> extends AbstractSetDecorator&lt;Map.Entry&lt;K, V>> implements Unmodifiable Since 3.0
        p 변결할 수 없는 entry 집합을 반환하는 팩터리 메서드 제공 + UnmodifiableMap, UnmodifiableOrderedMap, UnmodifiableSortedMap
        li class EntrySetToMapIteratorAdapter&lt;K, V> implements MapIterator&lt;K, V>, ResettableIterator Since 4.0

    h1 org.apache.commons.collections4.multimap
    ol
        li class ArrayListValuedHashMap&lt;K, V> extends AbstractListValuedMap&lt;K, V> implements Serializable SInce 4.1 + HashSetValuedHashMap
        li class TransformedMultiValuedMap&lt;K, V> extends AbstractMultiValuedMapDecorator&lt;K, V> Since 4.1
        li final class UnmodifiableMultiValuedMap&lt;K, V> extends AbstractMultiValuedMapDecorator&lt;K, V> implements Unmodifiable Since 4.1

    h1 org.apache.commons.collections4.multiset
    ol
        li class HashMultiSet&lt;E> extends AbstractMapMultiSet&lt;E> implements Serializable Since 4.1
        li class PredicatedMultiSet&lt;E> extends PredicatedCollection&lt;E> implements MultiSet&lt;E> Since 4.1
        li class SynchronizedMultiSet&lt;E> extends SynchronizedCollection&lt;E> implements MultiSet&lt;E> Since 4.1
        li final class UnmodifiableMultiSet&lt;E> extends AbstractMultiSetDecorator&lt;E> implements Unmodifiable Since 4.1

    h1 org.apache.commons.collections4.queue
    ol
        li class CircularFifoQueue&lt;E> extends AbstractCollection&lt;E> implements Queue&lt;E>, BoundedCollection&lt;E>, Serializable Since 4.0
        p 고정 크기의 큐로써 가장 마지막 요소가 null이면 덮어쓴다
        li PredicatedQueue, SynchronizedQueue, TransformedQueue, UnmodifiableQueue

    h1 org.apache.commons.collections4.set
    ol
        li class CompositeSet&lt;E> implements Set&lt;E>, Serializable Since 3.0
        p 여러 셋에 대한 하나의 뷰를 제공. 뷰에 대한 연산이 기저 셋에 적용돼야 한다면 CompositeSet.SetMutator를 제공해야 한다
        li class ListOrderedSet&lt;E> extends AbstractSerializableSetDecorator&lt;E> Since 3.0
        p 같은 요소에 대해 2번째 add 호출이 있는 경우, 1번째 위치를 유지한다
        li final class MapBackedSet&lt;E, V> implements Set&lt;E>, Serializable Since 3.1
        p Map을 Set처럼 이용하게 해준다
        li PredicatedSet, PredicatedSortedSet, PredicatedNavigableSet, TransformedSet, TransformedSortedSet, TrnasformedNavigableSet, UnmodifiableSet, UnmodifiableSortedSet, UnmodifiableNavigableSet
