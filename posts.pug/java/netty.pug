include ../../source/skeleton.pug
+post('Netty', 'Netty', 'Netty 정리')
    h1 참고 문서
    ul
        li: +asA('https://netty.io/4.1/api/index.html', 'Netty Doc')
        li: +asA('https://netty.io/wiki/user-guide-for-4.x.html')
        li: +asA('https://github.com/hatemogi/netty-startup')

    h1 Netty?
    ul
        li 비동기, event-driven 네트워크 애플리케이션 프레임워크
        li FTP, SMTP, HTTP, WebSocket 등 주요 프로토콜 구현 제공

    h1 예. Discard Server
    div
        h2 개요
        p TCP 서버. 클라이언트 메시지를 받으면 무시.
        h2 Server Handler
        ul
            li 코드 
                +codeBtn('/Repositories/STS/netty-tutorial/src/main/java/test1/DiscardServerHandler.java', 'java', [10], true)
            li ByteBuf를 비롯한 ReferenceCounted 객체들은 명시적인 해제가 필요하다.
        h2 Server
        ul
            li 코드 
                +codeBtn('/Repositories/STS/netty-tutorial/src/main/java/test1/DiscardServer.java', 'java', [13], true)
            li 서버는 이벤트 루프가 2개 필요하다
            p 들어오는 연결을 처리하는 boss + 각 연결의 데이터를 처리하는 worker
            li ServerBootstrap 서버 작성을 도와주는 헬퍼 클래스
            ul
                li channel(Class) : 연결을 어떤 Channel로 받을 지 지정 == 서버 채널
                li childHandler(ChannelHandler) : 새로운 연결(=자식 채널)이 수립될 때마다 설정 진행
                li option(ChannelOption, T) : 서버 채널 옵션 설정
                p
                    +asA('https://netty.io/4.1/api/io/netty/channel/ChannelOption.html')
                    | , 
                    +asA('https://netty.io/4.1/api/io/netty/channel/ChannelConfig.html')
                    |  참고
                li childOption(ChannelOption, T) : 자식 채널 옵션 설정
                li bind(...) : PC의 모든 NIC에 대해 바인딩 수행
        h2 Test
        p 코드 
            +codeBtn('/Repositories/STS/netty-tutorial/src/test/java/test1/NettyTest.java', 'java', [15], true)

    h2 예. Echo Server
    div
        h2 개요
        p TCP 서버. 클라이언트 메시지를 받으면 그대로 응답.
        h2 Server Handler
        ul
            li 코드 
                +codeBtn('/Repositories/STS/netty-tutorial/src/main/java/test2/EchoServerHandler.java', 'java', [9], true)
        h2 Server
        ul
            li 코드 
                +codeBtn('/Repositories/STS/netty-tutorial/src/main/java/test2/EchoServer.java', 'java', [13], true)
        h2 Test
        p 코드 
            +codeBtn('/Repositories/STS/netty-tutorial/src/test/java/test2/NettyTest.java', 'java', [18], true)

    h1 주요 인터페이스
    div
        h2 Channel
        p I/O 작업을 지원하는 네트워크 연결. 모든 I/O 작업은 비동기적으로 실행되어 ChannelFuture를 즉시 반환한다
        h2 ChannelFuture
        ul
            li Channel의 I/O 작업 결과
            li 가능한 상태 : Uncompleted(!isDone), Success(isDone &amp;&amp; isSuccess), Failed(isDone &amp;&amp; cause != null), Cacelled(isDone &amp;&amp; isCancelled)
            li addListener(s) 메서드를 이용해 콜백 설정 가능
        h2 ChannelHandler
        ul
            li I/O 이벤트 수신
            li ChannelInboundHandler, ChannelOutboundHandler
        h2 ChannelHandlerContext
        ul
            li ChannelHandler는 Context를 통해 ChannelPipeline 및 다른 핸들러와 상호작용한다.
            p ChannelHandler는 여러 ChannelPipeline에 등록될 수 있으므로, Context 또한 여러 개 가질 수 있다
            li 이벤트 통지 : ChannelPipeline 상의 다음 핸들러에 이벤트 전달
            li Pipeline 수정 : pipeline()으로 ChannelPipeline를 획득하여 직접 수정 가능
            li 나중에 사용 : 획득한 ChannelHandlerContext는 다른 스레드에서도 사용 가능하다
            li 상태 저장 : attr(AttributeKey)로 상태 저장 및 공유
        h2 ChannelPipeline
        ul
            li 하나의 Channel 상에서 inbound 이벤트와 outbound 작업을 처리하는 ChannelHandler 리스트
            p 각 Channel 생성 시 자동으로 ChannelPipeline을 신규로 하나 갖는다
            li Inbound 핸들러는 순서대로, outbound 핸들러는 역순으로 실행된다

    h1 ByteBuf
    ul
        li java.nio.ByteBuffer와 유사하다. 읽기/쓰기 위치를 각각 관리하므로 flip() 연산 불필요
        li Unpooled 클래스가 ByteBuf 생성에 관한 유틸리티를 제공한다
        li ReferenceCounted 인터페이스를 구현하며, 명시적인 retain/release 호출이 필요하다
        ul
            li 최초 생성 시 refCnt = 1
            li retain() -> refCnt++
            li release() -> refCnt--
            li refCnt가 0이 된 객체는 해제된다
            li ReferenceCounted를 구현한 컨테이너는 ReferenceCounted 원소들에 대해 retain()을 하며, 컨테이너 소멸 시 각각에 대해 release() 호출한다
