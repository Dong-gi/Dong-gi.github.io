include ../../source/skeleton.pug
+post('Spring Reactive', 'Spring WebFlux, WebClient, WebSocket, RSocket', 'Spring Reactive 정리')
    h1 Web on Reactive Stack
    div
        h2 개요
        ul
            li 원본 문서 : 
                +asA('https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html')
            li 작업 기준 버전 : 5.3.5
            li 논블로킹 서버(Netty, Undertow, Servlet 3.1+) 위에서 리액티브 스트림 API 기반의 리액티브-스택 웹앱에 관한 사항을 다룬다.

        h2 리액티브 스트림
        div
            h3 java.util.concurrent.Flow Since 9 
                +goto('reactive-stream', 'java.base.html')
            ul
                li Publisher : 발행자. subscribe​(Subscriber)
                li Subscriber : 구독자. onSubscribe(Subscription), onNext(T), onError(Throwable), onComplete(Void)
                li Subscription : 구독. request(long), cancel(Void)
                li Processor extends Subscriber, Publisher : 발행자 + 구독자
            h3
                +asA('https://projectreactor.io/', '리액터')
                | 의 발행자 Processor
            ul
                li reactor.core.publisher.Mono : 0..1개의 이벤트 발행
                li reactor.core.publisher.Flux : 0..n개의 이벤트 발행
            h3 예시 코드
            +codeBtn('/Repositories/STS/reactive-webflux/pom.xml', 'xml') pom.xml
            +codeBtn('/Repositories/STS/reactive-webflux/src/main/java/io/github/donggi/controller/HelloController.java', 'java') HelloController.java
            +codeBtn('/Repositories/STS/reactive-webflux/src/test/java/io/github/donggi/controller/HelloControllerTest.java', 'java') HelloControllerTest.java
            +w3img('/imgs/20191008_110029.png')

    h1 Spring WebFlux
    div
        h2 Overview
        ul
            li 개발 이유 1 : 더 적은 스레드와 하드웨어 리소스로 동시성을 처리하는 논-블로킹 웹 스택이 필요했기 때문
            p Servlet 3.1에서 논-블로킹 I/O를 제공했지만, 다른 여타 동기적 또는 블로킹하는 서블릿 API와 같이 사용하기는 어려움이 있다. 이에 여느 논-블로킹 런타임과도 동작할 수 있는 공통 API의 수요가 생겼다.
            li 개발 이유 2 : Java 8에 도입된 람다를 활용할 수 있는 함수형 엔드포인트 개발을 위해
        div
            h3 Define "Reactive"
            ul
                li 리액티브 ::= 변화에 반응하는 것을 중심으로 한 프로그래밍 모델 - I/O 이벤트, UI 이벤트 등
                li 스프링 팀은 여기에 "논-블로킹 back pressure"를 주요 매커니즘으로 더했다
                p 생산자가 소비자를 호출하는 경우, 빠른 생산으로 생산자가 소비자를 압도할 수 있다. WebFlux는 리액티브 스트림을 이용하여, subscriber가 publisher 속도를 제어하도록 한다.
                li Publisher의 속도를 늦츨 수 없다면?
                p 리액티브 스트림은 잉여 생산물에 대한 규정은 하지 않는다. 버퍼에 담을 지, 버릴 지, 실패로 처리할 지는 개발자가 결정해야 한다

            h3 Reactive API
            p 리액티브 스트림의 저수준 API를 사용자가 직접 이용하기에는 부적절하다. 이에 WebFlux는 
                +asA('https://projectreactor.io/', '리액터')
                | 를 채택하였다.

            h3 Programming Models
            p WebFlux는 HTTP 추상화, 지원 서버(Netty 등)를 위한 
                +goto('HttpHandler')
                | , Servlet API에 대응하는 
                +goto('WebHandler API')
                |  등을 포함하며, 이를 기초로 2가지 프로그래밍 모델을 지원한다.
            ul
                li: +goto('Annotated Controllers')
                p Spring MVC와 같은 애너테이션을 사용한다. Spring MVC와 WebFlux 컨트롤러 모두 리액티브 반환 타입을 지원하므로, 둘을 떼어 놓고 이야기하기는 어렵다. 한 가지 큰 차이점으로, WebFlux는 리액티브 @RequestBody 인자를 지원한다.
                li: +goto('Functional Endpoints')
                p 람다 기반, 경량, 함수형 프로그래밍 모델. 애너테이트된 컨트롤러와 다르게 앱이 요청의 시작부터 끝까지 제어하며, 요청을 라우팅하는 라이브러리나 유틸리티 집합이라고 생각해도 된다.

            h3 Applicability
            p 굳이 잘 동작하는 Spring MVC 앱을 바꿀 필요는 없다.
            +w3img('/imgs/spring-mvc-and-webflux-venn.png')

            h3 Servers
            p WebFlux 자체에 서버를 시작/종료하는 기능은 없지만, Spring Boot WebFlux starter에서는 이 단계를 자동화해준다.

            h3 Concurrency Model
            div
                h4.fake Invoking a Blocking API
                ul
                    li 리액터의 publishOn, subscribeOn을 이용해 호출을 다른 스레드를 이용해 처리할 수 있다
                    p
                        +codeBtn('/Repositories/STS/webflux/src/main/java/tutorial/webflux/action/CallBlockingAction.java', 'java')
                    li 지원하는 
                        +asA('https://projectreactor.io/docs/core/release/api/reactor/core/scheduler/Schedulers.html')
                    table.no-sort
                        +ths('method', '실행 적합')
                        +tds('parallel()', '병렬 non-blocking Runnable')
                        +tds('single()', '저지연 Runnable 단일 실행. 반환 Scheduler는 재사용된다.')
                        tr
                            td boundedElastic()
                            td 실행 시간이 긴 여러 (블로킹) 작업 실행. 동시 실행 제한(bound) 존재
                                ul
                                    li 유저 스레드는 idle 60초를 넘으면 동적으로 삭제된다
                                    p 기본 유저 스레드지만, 오버라이딩 메서드로 데몬 스레드 지정 가능
                                    li threadCap : 최대 스레드 수. 기본값은 (코어 수) * 10
                                    li queuedTaskCap : 최대 큐잉 작업 수. 초과하면 RejectedExecutionException 발생. Integer.MAX_VALUE으로 무제한 설정 가능
                                    li name : 스레드 이름 prefix
                        +tds('immediate()', '호출자 스레드로 즉시 실행')
                        +tds('fromExecutorService()', 'Backing ExecutorService 지정')

        h2 Reactive Core
        div
            h3 HttpHandler
                +pos('HttpHandler')
            div
                p 지원하는 HTTP 서버들에 대한 최소한의 추상화
                +asCode('java', 'interface HttpHandler') Mono&lt;Void&gt; handle(ServerHttpRequest request, ServerHttpResponse response)
                +asCode('java', 'Reactor Netty').
                    HttpHandler handler = ...
                    ReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(handler);
                    HttpServer.create().host(host).port(port).handle(adapter).bind().block();

            h3 WebHandler API
                +pos('WebHandler API')
            div
                p org.springframework.web.server 패키지는 HttpHandler 규약 위에서, 컴포넌트 체인(N개 WebExceptionHandler, N개 WebFilter, 1개 WebHandler)을 이용해 요청을 처리한다.
                p WebHttpHandlerBuilder를 이용해 체인을 구성할 수 있는데, 직접 builder에 등록하거나, 컴포넌트를 자동 감지한 ApplicationContext를 지정해주면 된다.
                p WebHandler API는 웹앱 공통 기능들을 지원한다 : 유저 세션 with 속성, 요청 속성, 요청 Locale/Principal 결정, form data, multipart data 등
                h4.fake WebHttpHandlerBuilder 자동 감지 빈
                table
                    +ths('Bean name', 'Bean type', 'Count', 'Description')
                    +tds('<any>', 'WebExceptionHandler', '0..N', '예외 처리')
                    +tds('<any>', 'WebFilter', '0..N', '전후 처리')
                    +tds('webHandler', 'WebHandler', '1', '요청 처리')
                    tr
                        td webSessionManager
                        td WebSessionManager
                        td 0..1
                        td WebSession 인스턴스 관리. ServerWebExchange로 획득 가능. 기본값 DefaultWebSessionManager
                            +codeBtn('/Repositories/STS/webflux/src/main/java/tutorial/webflux/action/CookieAndSessionAction.java', 'java')
                            details
                                summary 실행 스크린샷
                                +w3img('/imgs/2021-04-04 154616.png', '최초 get 헤더')
                                +w3img('/imgs/2021-04-04 154628.png', '최초 get body')
                                +w3img('/imgs/2021-04-04 154648.png', '1번째 set')
                                +w3img('/imgs/2021-04-04 154709.png', '2번째 set')
                                +w3img('/imgs/2021-04-04 154726.png', '2번째 get 헤더')
                                +w3img('/imgs/2021-04-04 154740.png', '2번째 get body')
                            p Redis를 이용해 세션을 관리하고 싶은 경우 : spring-session-data-redis 사용 고려
                                +asA('https://docs.spring.io/spring-session/docs/2.4.2/reference/html5/#samples')
                                +asA('https://www.baeldung.com/spring-session-reactive')
                    +tds('serverCodecConfigurer', 'ServerCodecConfigurer', '0..1', 'form, multipart 데이터를 파싱하는 HttpMessageReader 인스턴스에 접근. ServerWebExchange로 획득 가능. 기본값 ServerCodecConfigurer.create()')
                    +tds('localeContextResolver', 'LocaleContextResolver', '0..1', 'ServerWebExchange로 획득 가능. 기본값 AcceptHeaderLocaleContextResolver')
                    +tds('forwardedHeaderTransformer', 'ForwardedHeaderTransformer', '0..1', '프록시가 추가한 forwarded 헤더 조작. 기본적으로 사용되지 않는다.')

                h4.fake Form Data(application/x-www-form-urlencoded)
                +asCode('java', 'ServerWebExchange').
                    Mono&lt;MultiValueMap&lt;String,String&gt;&gt; getFormData()
                p DefaultServerWebExchange는 설정된 HttpMessageReader 인스턴스를 이용해 form을 MultiValueMap으로 파싱한다. 기본적으로 ServerCodecConfigurer 빈이 FormHttpMessageReader 빈을 사용 설정한다.

                h4.fake Multipart Data(multipart/form-data)
                +asCode('java', 'ServerWebExchange').
                    Mono&lt;MultiValueMap&lt;String,Part&gt;&gt; getMultipartData()
                p DefaultServerWebExchange는 설정된 HttpMessageReader&lt;MultiValueMap&lt;String, Part&gt;&gt; 인스턴스를 이용해 multipart를 MultiValueMap으로 파싱한다. 기본적으로 DefaultPartHttpMessageReader 빈이 이용된다.

            h3 Filters
            ul
                li WebFilter 사이의 실행 순서는 빈 정의에 @Order를 이용하거나, Ordered 인터페이스를 구현함으로써 조절할 수 있다.
                li Controller 클래스에 애너테이션을 붙여 CORS 설정을 할 수 있지만, Spring Security를 이용하는 경우 CorsFilter를 이용해 Security보다 먼저 실행되도록 설정할 것이 권장된다
                    +goto('CORS')

            h3 Exceptions
            ul
                li ResponseStatusExceptionHandler : Throwable -&gt; int(HttpStatus) 결정
                li WebFluxResponseStatusExceptionHandler : @ResponseStatus로부터 HttpStatus 자동 획득
                li REST API의 경우, ResponseEntity를 이용함이 권장된다
                +codeBtn('/Repositories/STS/webflux/src/main/java/tutorial/webflux/action/SimpleExceptionAction.java', 'java')

            h3 Codecs
            ul
                li Encoder, Decoder는 HTTP 스펙과 무관하게, 임의 타입과 DataBuffer 사이의 변환을 정의한다
                li HttpMessageReader, HttpMessageWriter는 HTTP 메시지의 읽기/쓰기를 담당한다
                li Encoder는 EncoderHttpMessageWriter로, Decoder는 DecoderHttpMessageReader로 래핑 가능하다
                li DataBuffer는 기존 byte buffer들(Netty의 ByteBuf, java.nio.ByteBuffer, ...)에 대한 추상화다.
            p spring-core 모듈은 byte[], ByteBuffer, DataBuffer, Resource, String에 대한 encoder/decoder를 제공하고, spring-web 모듈은 Jackson JSON, Jackson Smile(binary JSON), JAXB2 encoder/decoder 및 HTTP(form, multipart, ...) reader/writer를 제공한다
            p 전형적으로 ClientCodecConfigurer, ServerCodecConfigurer를 이용해 코덱을 커스터마이징한다. 
                +goto('HTTP message codecs')
            div
                h4.fake Jackson JSON
                ul
                    li Jackson 라이브러리가 존재하는 경우, JSON 및 binary JSON(Smile)이 지원된다
                    li Jackson2Decoder의 동작
                    ol
                        li Jackson의 비동기, 논블로킹 파서가 하나의 JSON 객체를 표현하는 TokenBuffer로 바이트 스트림을 모은다.
                        li 각 TokenBuffer는 Jackson의 ObjectMapper로 넘겨져 고수준 객체로 변환된다.
                        li single-value publisher(e.g. Mono)의 디코딩의 경우, TokenBuffer가 하나만 필요하다.
                        li multi-value publisher(e.g. Flux)의 디코딩의 경우, 각 TokenBuffer가 객체를 구성할 수 있게 되면 ObjectMapper로 전달된다. 입력 컨텐츠로 JSON 배열, line-delimited JSON(application/stream+json)이 가능하다.
                    li Jackson2Encoder의 동작
                    ol
                        li single-value publisher(e.g. Mono)는 바로 ObjectMapper에서 직렬화한다.
                        li multi-value publisher를 application/json로 직렬화하는 경우, Flux#collectToList()의 반환 컬렉션을 직렬화한다.
                        li application/x-ndjson, application/stream+x-jackson-smile 같은 스트리밍 타입으로 multi-value publisher를 직렬화하는 경우, line-delimited JSON 포맷으로 각 값을 따로 write, flush한다.
                        li SSE의 경우, 이벤트가 발생할 때마다 Jackson2Encoder를 1회 호출하고 flush하여 저지연을 보장한다.
                    li 커스텀 JsonSerializer 등록
                    +asCode('java').
                        @JsonComponent
                        public class EntityResponseSerializer&lt;T&gt; extends JsonSerializer&lt;EntityResponse&lt;T&gt;&gt; {
                            @Override
                            public void serialize(EntityResponse&lt;T&gt; value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
                                var v = value.entity();
                                if (v == null)
                                    gen.writeNull();
                                else if (v instanceof String)
                                    gen.writeString((String) v);
                                else
                                    gen.writeObject(v);
                            }
                        }

            h3 Logging

        h2 DispatcherHandler
        div
            h3 Special Bean Types
            h3 WebFlux Config
            h3 Processing
            h3 Result Handling
            h3 Exceptions
            h3 View Resolution

        h2 Annotated Controllers
            +pos('Annotated Controllers')
        div
            h3 @Controller
            h3 Request Mapping
            h3 Handler Methods
            h3 Model
            h3 DataBinder
            h3 Managing Exceptions
            h3 Controller Advice

        h2 Functional Endpoints
            +pos('Functional Endpoints')
        div
            h3 Overview
            h3 HandlerFunction
            h3 RouterFunction
            h3 Running a Server
            h3 Filtering Handler Functions

        h2 URI Links
        h2 CORS
            +goto('CORS')
        h2 Web Security
        h2 View Technologies
        h2 HTTP Caching
        h2 WebFlux Config
        div
            h3 HTTP message codecs
                +pos('HTTP message codecs')