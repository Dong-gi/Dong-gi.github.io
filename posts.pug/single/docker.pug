include ../../source/skeleton.pug
+post('Docker', 'Docker', 'Docker 정리')
    h1 시작하기
    ol
        li 도커 엔진(Apache 2.0 license)은 REST API로 통신하는 서버-클라이언트로 구성된다
        li.marker Docker daemon
        p 도커 서버는 오랫동안 실행되는 dockerd 데몬 프로세스로, Docker object들을 관리한다
        li.marker Docker client
        p CLI 클라이언트로 docker 커맨드가 사용된다. 도커 서버, 클라이언트는 서로 별개의 호스트에서 작동할 수 있다
        li Docker registry
        p 이미지 저장소
            +asA('https://hub.docker.com/', 'Docker Hub')
            | 는 누구나 이용할 수 있는 퍼블릭 레지스트리로, 도커에서 기본적으로 검색하는 저장소다
        p Private registry 생성
        +asCode('shell') $ docker service create --name registry -p 5000:5000 registry
        li Docker object
        ul
            li IMAGE : 컨테이너를 작성하는 절차를 담은 읽기 전용 템플릿
            li CONTAINER : 실행 가능한 IMAGE 인스턴스
            li
                +asA('https://docs.docker.com/engine/reference/builder/', 'Dockerfile')
                |  : 이미지 빌드 절차

    h1 Dockerfile
    ul
        li.marker Format
        ul
            li # 주석
            li INSTRUCTION param...
            p INSTRUCTION은 대소문자 구별이 없지만, 관례적으로 대문자만 사용한다
        li.marker Directive
        ul
            li # directive=value 형태의 특별한 주석
            p directive가 아닌 줄을 읽으면 더 이상 directive를 찾지 않으므로, Dockerfile의 최상단에 있어야 한다
            li # syntax=[remote image reference]
            p Buildkit을 이용하는 경우 유효
            li # escape=`
            p 기본값은 \
        li.marker 환경 변수
        ul
            li 환경 변수 참조1 : $var_name 또는 ${var_name}
            li 환경 변수 참조2 : ${var_name:-word}
            p 환경 변수가 없다면 word가 사용된다. word는 임의의 문자열이며, 다른 환경변수를 포함할 수도 있다
            li 환경 변수 참조3 : ${var_name:+word}
            p 환경 변수가 있다면 word가 사용된다. 없으면 빈 문자열. word는 임의의 문자열이며, 다른 환경변수를 포함할 수도 있다
            li 환경 변수 설정 : ENV key=value 또는 ENV key value
            li 환경 변수 지원 명령어 : ADD, COPY, ENV, EXPOSE, FROM, LABEL, STOPSIGNAL, USER, VOLUME, WORKDIR, ONBUILD(Since 1.4)
        li.marker FROM
        ul
            li FROM &lt;image>[:&lt;tag>] [AS &lt;name>]
            li FROM &lt;image>[@&lt;digest>] [AS &lt;name>]
            li 한 Dockerfile 내에서 FROM을 여러 번 사용할 수 있다 : 여러 중간 이미지 + 최종 이미지
        li.marker RUN
        ul
            li RUN &lt;command>
            p 쉘(기본값 /bin/sh -c, SHELL 명령으로 변경 가능)로 실행. \로 여러 줄 작성 가능
            li RUN ["executable", "param1", "param2"]
            p JSON 배열로 파싱되어 실행에 이용된다. 반드시 "로 감싸야 하며, \ 이스케이핑에 주의해야 한다
            li RUN apt-get update와 apt-get install은 항상 한 번에 실행할 것
            +asCode().
                RUN apt-get update && apt-get install -y \
                    package-bar \
                    package-foo=1.3.* \
            li RUN rm -rf /var/lib/apt/lists/*, RUN apt-get clean 등으로 캐시를 지워주면 용량에 좋다
        li.marker CMD
        ul
            li CMD ["executable", "param1", "param2"]
            p JSON 배열로 파싱되어 실행에 이용된다
            li CMD command param1 param2
            p 쉘로 실행
            li CMD의 목적은 컨테이너 실행 시 기본값을 제공하는 것으로, Dockerfile내에서 여러 번 작성됐더라도 마지막 것만 사용된다. 항상 동일하게 실행된다면 ENTRYPOINT 사용을 고려
            p docker run 인자로 명시하는 경우, CMD를 오버라이딩한다
        li.marker ENTRYPOINT
        ul
            li ENTRYPOINT ["executable", "param1", "param2"]
            p JSON 배열로 파싱되어 실행에 이용된다. CMD는 ENTRYPOINT의 매개변수로 뒤에 덧붙여진다
            li ENTRYPOINT command param1 param2
            p 쉘 실행. CMD directive와 docker run 매개변수를 모두 무시한다. 컨테이너의 실행은 docker exec을 통해 이루어져야 한다
        li.marker LABEL
        ul
            li LABEL &lt;key>=&lt;value>
            p 이미지 메타데이터 설정. 공백이 필요하다면 "로 감싸면 된다. LABEL 하나에 여러 값을 설정하는 것은 이미지 크기에 영향을 미치지 않는다(Since 1.10)
        li.marker EXPOSE
        ul
            li EXPOSE &lt;port>[/&lt;protocol>]...
            p 리스닝하는 포트들을 명시한다(여기서 개방해주는 것은 아님). 프로토콜 기본값은 TCP. 실제 포트를 개방하기 위해서는 docker run에서 -p 옵션으로 포워딩 설정
        li.marker ADD
        ul
            li ADD [--chown=&lt;user>:&lt;group>] &lt;src>... &lt;dest>
            li ADD [--chown=&lt;user>:&lt;group>] ["&lt;src>",... "&lt;dest>"]
            p 경로에 공백이 있는 경우 " 이용
            li dest로 파일들을 복사한다. 파일명 이스케이핑, 와일드카드 사용은 Go 언어 규칙을 따른다. chown이 주어지지 않으면 UID, GID 모두 0으로 설정된다. 유저와 그룹을 직접 ID로 지정한 경우, /etc/passwd, /etc/group 파일을 조사하지 않는다
            li src가 원격지 파일 URL인 경우, 복사된 파일의 권한은 600. 인증이 필요한 경우 wget, crul 등을 이용
            li 컨텍스트 안의 파일들만 데몬으로 전송되므로, src는 "../something"처럼 컨텍스트 밖의 파일을 가리킬 수 없다
            li src가 컨텍스트 내의 tar 압축 파일인 경우, 디렉터리로 압축 해제된다
            li dest가 존재하지 않는 경우, 모든 필요한 디렉터리를 생성한다
        li.marker COPY
        ul
            li COPY [--chown=&lt;user>:&lt;group>] &lt;src>... &lt;dest>
            li COPY [--chown=&lt;user>:&lt;group>] ["&lt;src>",... "&lt;dest>"]
            p 경로에 공백이 있는 경우 " 이용
            li ADD보다 제한됨 : 컨테이너 내부 파일만 복사 가능. 로컬 tar 자동 압축 해제 X
            p 중간 이미지로부터 복사 예 : COPY --from=build /bin/project /bin/project
        li.marker VOLUME
        ul
            li 예. VOLUME /var/log /var/db
            p Mount point를 정의한다. 호스트나 다른 컨테이너에 마운트되어 공유될 수 있다. VOLUME 선언 이후 해당 볼륨 내 변경은 무시된다. Dockerfile 내부에서 마운트될 호스트 디렉터리를 지정할 수는 없다 → 컨테이너 생성 시 지정해야 한다
        li.marker WORKDIR
        ul
            li 예. WORKDIR /path/to/workdir
            p RUN, CMD, ENTRYPOINT, COPY, ADD의 작업 디렉터리를 설정한다
        li.marker ARG
        ul
            li ARG &lt;name>[=&lt;default value>]
            p docker build --build-arg &lt;varname>=&lt;value>로 넘겨받는 변수를 선언한다. docker history로 넘긴 변수를 볼 수 있으므로, 비밀 정보를 이를 통해 넘기는 건 부적절하다
            li ARG는 빌드 단계에서만 유효하며, 새로운 FROM 이후엔 새로 선언해야 한다
        li.marker ONBUILD
        ul
            li ONBUILD [INSTRUCTION]
            p 이미지가 베이스로 이용되는 경우, 마치 FROM 이후에 바로 삽입된 것처럼 실행된다
        li.marker SHELL
        ul
            li SHELL ["executable", "param1", "param2"]
            li RUN, CMD, ENTRYPOINT 기본 쉘 변경

    h1
        | Commands 
        +asA('https://docs.docker.com/engine/reference/commandline/docker/')
    div
        h2 docker build : 절차대로 이미지 생성
        +asCode('shell').
            $ docker build [OPTIONS] PATH | URL | -
            $ docker image build [OPTIONS] PATH | URL | -

            # OPTIONS
            --build-arg                  # 빌드 환경변수 설정
            --compress                   # 컨텍스트 gzip 압축
            --disable-content-trust true # 이미지 검증 생략
            --file, -f                   # Dockerfile 파일명. 기본값은 'PATH/Dockerfile'
            --label                      # 이미지 메타데이터 설정
            --no-cache                   # 빌드 캐시 미사용
            --tag, -t                    # 이미지 태그 설정
        ol
            li 향상된 기능을 제공하는 moby/buildkit을 이용하려면(Since 18.09) 실행 전에 환경 변수 DOCKER_BUILDKIT=1를 설정하면 된다
            li 빌드 과정에서 "컨텍스트"란 지정된 PATH | URL에 존재하는 파일들을 의미한다. 빌드 과정에서 컨텍스트 임의의 파일을 참조할 수 있다
            p .dockerignore 파일을 통해 컨텍스트에서 파일/디렉터리들을 제외할 수 있다
            li URL은 다음 중 하나가 될 수 있다 : Git 저장소, pre-packaged tarball, plain text file
            ul
                li 예. container 브랜치의 docker 디렉터리 지정
                +asCode('shell') $ docker build https://github.com/docker/rootfs.git#container:docker
                p Git 저장소를 가리키는 경우, 해당 저장소의 서브모듈까지 재귀적으로 가져온다
                table.no-sort
                    tr
                        th Build Syntax Suffix
                        th Commit Used
                        th Build Context Used
                    tr
                        td myrepo.git
                        td refs/heads/master
                        td /
                    tr
                        td myrepo.git#mytag
                        td refs/tags/mytag
                        td /
                    tr
                        td myrepo.git#mybranch
                        td refs/heads/mybranch
                        td /
                    tr
                        td myrepo.git#pull/42/head
                        td refs/pull/42/head
                        td /
                    tr
                        td myrepo.git#:myfolder
                        td refs/heads/master
                        td /myfolder
                    tr
                        td myrepo.git#master:myfolder
                        td refs/heads/master
                        td /myfolder
                    tr
                        td myrepo.git#mytag:myfolder
                        td refs/tags/mytag
                        td /myfolder
                    tr
                        td myrepo.git#mybranch:myfolder
                        td refs/heads/mybranch
                        td /myfolder
                li 예. tarball 지정
                +asCode('shell') $ docker build http://server/context.tar.gz
                p 표준 tar 포맷이어야 한다. 압축 기법은 xz, bzip2, gzip, identity 중 하나
                li 예. STDIN 입력
                +asCode('shell') $ docker build - &lt; Dockerfile
                li 예. 텍스트 입력
                +asCode('shell') $ curl example.com/remote/Dockerfile | docker build -f - .

        h2 docker commit : 컨테이너로부터 이미지 생성
        +asCode('shell').
            $ docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]

            # OPTIONS
            --author, -a  # 저자
            --change, -c  # 새 이미지에 적용할 INSTRUCTION 추가
                          # $ docker commit --change "ENV DEBUG true" c3f279d17e0a  svendowideit/testimage:version3
            --message, -m # 커밋 메시지
            --pause, -p   # 커밋 도중 컨테이너 일시 정지(default true)

        h2 docker tag : 이미지 태그 설정
        +asCode('shell') $ docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
        ol
            li 예
            +asCode('shell') $ docker tag 0e5574283393 fedora/httpd:version1.0
            li Docker Hub로 올리려는 경우, {Docker Hub Id}/{Repository Name}:{tag}
            +asCode('shell') $ docker tag bulletinboard:1.0 gordon/bulletinboard:1.0
            li Private repository로 푸시하려면 해당 주소를 붙여줘야 한다
            +asCode('shell') $ docker tag 0e5574283393 myregistryhost:5000/fedora/httpd:version1.0

        h2 docker push : 이미지 업로드
        +asCode('shell').
            $ docker push [OPTIONS] NAME[:TAG]
            $ docker image push [OPTIONS] NAME[:TAG]
        p 이미지를 저장소로 업로드한다. 올바른 이미지 태그에 대해서는 docker tag 명령 참고

        h2 docker run : 컨테이너 생성 후 실행
        +asCode('shell').
            $ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
            $ docker container run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
        ol
            li 새 컨테이너를 만들고(create) 실행(start)한 뒤, 그 안에서 명령을 실행한다
            li 옵션 순서에 따라 실행에 실패하기도 한다...
            +asCode('shell').
                # 성공 예시
                docker run --name my-postgres -p 5432:5432 -d -it --privileged=true --network="my-net" -e "POSTGRES_PASSWORD=xxx" -e PGDATA=/var/lib/postgresql/data/pgdata -v /free100/postgres:/var/lib/postgresql/data postgres
                docker run --name node-rendezvous -p 50000:50000/udp -p 50001:50001 -d -it --network="my-net" -v $PWD/Dong-gi.github.io/Repositories/Rendezvous/:/home/node/app node
            li OPTIONS
            +asCode('shell').
                --publish, -p # 포트 포워딩. -p 80:8080, -p 8888:8080/tcp
                --detach, -d  # 지정한 경우 백그라운드 실행. 커맨드가 리턴하면 컨테이너도 종료
                              # -d를 지정하지 않은 경우(default) 포그라운드로 실행되며, STDIN, STDOUT, STDERR가 콘솔에 연결된다(default).
                -it           # -i(--interactive, STDIN 계속 열어두기) + -t(-tty, Pseudo-tty 할당)
                --name        # 컨테이너 이름 할당. 지정하지 않는 경우 docker 데몬이 랜덤하게 할당
                --pid         # 기본적으로 각 컨테이너는 별개의 프로세스 네임스페이스에서 실행된다
                              # --pid=host, --pid="container:{name|id}"를 이용해 네임스페이스 공유 가능

                --network=""                        # bridge(default), none, container:&lt;name|id>, host(빠름)
                                                    # host      : --mac-address 무효
                                                    # container : --add-host, --hostname, --dns, --dns-search, --dns-option, --mac-address, --publish, --publish-all, --expose 무효
                --add-host=""                       # host:IP형식으로 적으면 /etc/hosts에 추가한다
                --ip="", --ip6="", --mac-address="" # 주소 할당

                --restart       # no(default), on-failure[:max-retries](0이 아닌 상태로 종료된 경우 재시작), always(항상 재시작), unless-stopped(명시적으로 stop하기 전까지 항상 재시작)
                --rm            # 컨테이너 종료 시 삭제
                --memory="", -m # 메모리 제한. 최소 4m
                --stop-timeout  # 지정 시간 경과 뒤 종료
                --privileged    # 컨테이너에 모든 커널 작업 권한 부여
        div
            h3 Dockerfile 오버라이딩
            +asCode('shell').
                CMD                   # r run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
                ENTRYPOINT            # --entrypoint=""
                                      # $ --entrypoint /bin/bash example/redis -c ls -l
                EXPOSE(incoming port) # --expose=[]
                ENV                   # -e, --env, --env-file
                                      # $ -e "deep=purple" -e today # 값을 지정하지 않으면 현재 값이 전파된다
                VOLUME                # -v, --volume=[host-src:]container-dest[:&lt;options>]
                USER                  # -u="", --user=""
                WORKDIR               # -w=""

        h2 docker logs : 로그 출력
        p 컨테이너 로그 : /var/lib/docker/containers/${containerId}/${containerId}-json.log
        +asCode('shell').
            $ docker logs [OPTIONS] CONTAINER

            # OPTIONS
            -n ${n}                 # 마지막 n개 줄만
            --since ${timestamp}    # timestamp 이후 로그만; ISO 포맷(e.g. 2013-01-02T13:23:37Z) or 상대적 표현(e.g. 42m)
            --until ${timestamp}    # timestamp 이전 로그만
            -f                      # 실시간 확인
            -t                      # 타임스탬프 출력

        h2 docker rm : 컨테이너 제거
        +asCode('shell').
            $ docker rm [OPTIONS] CONTAINER [CONTAINER...]
            $ docker container rm [OPTIONS] CONTAINER [CONTAINER...]

            # OPTIONS
            --force, -f   # 실행 중인 컨테이너 중지 후 제거
            --link, -l    # 링크 제거
            --volumes, -v # 볼륨 제거
        ol
            li 예. 중지한 컨테이너 모두 제거
            +asCode('shell') $ docker rm $(docker ps -a -q)

        h2 파일 복사
        ol
            li docker-machine scp
            +asCode('shell').
                $ docker-machine scp source destination
                # 예. 파일을 가상 머신으로 복사
                $ docker-machine scp /root/file.war devvm:/home/docker/
                $ # 예. 디렉터리 복사
                docker-machine scp -r /root/directory/ devvm:/home/docker/
            li docker cp
            +asCode('shell').
                $ docker cp source destination
                # 예. 파일을 컨테이너로 복사
                $ docker cp file.war web:/usr/local/tomcat/webapps/
                # 예. 디렉터리 복사
                $ docker cp directory/ web:/root/

        h2 docker ps : 컨테이너 리스트
        +asCode('shell').
            $ docker ps [OPTIONS]

            # OPTIONS
            --all, -a    # 실행중이지 않은 컨테이너도 표시
            --filter, -f # 옵션은 https://docs.docker.com/engine/reference/commandline/ps/#filtering 참고
            --format     # Go 템플릿 포맷. https://docs.docker.com/engine/reference/commandline/ps/#formatting 참고
                         # $ docker ps --format "{{.ID}}: {{.Command}}"
            --size, -s   # 전체 파일 크기 표시

        h2 docker images : 이미지 리스트
        +asCode('shell').
            $ docker images [OPTIONS] [REPOSITORY[:TAG]]

            # OPTIONS
            --all, -a # 중간 이미지도 표시
            --digests # Digest 표시

        h2 docker start : 컨테이너 시작
        +asCode('shell').
            $ docker start [OPTIONS] CONTAINER [CONTAINER...]
            $ docker container start [OPTIONS] CONTAINER [CONTAINER...]

        h2 docker search : Docker Hub 이미지 검색
        +asCode('shell').
            $ docker search [OPTIONS] TERM

            # OPTIONS
            --filter stars=3            # 최소 3성 이상
            --filter "is-official=true" # 공식 이미지만

        h2 docker pull : 저장소 이미지 다운로드
        +asCode('shell').
            $ docker pull [OPTIONS] NAME[:TAG|@DIGEST]

            $ docker pull ubuntu:14.04
            $ docker pull ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2
            $ docker pull myregistry.local:5000/testing/test-image

        h2 docker rmi : 이미지 제거
        +asCode('shell') $ docker rmi [OPTIONS] IMAGE [IMAGE...]
        p 컨테이너가 이미지를 사용중임에도 -f 옵션으로 강제로 이미지를 삭제하려고 하는 경우, 이미지의 이름만 제거되어 &lt;none>으로 변경된다. 이들을 dangling 이미지라고 부르며, 사용하지 않는 dangling 이미지들은 docker image prune으로 삭제할 수 있다

        h2 docker attach : 컨테이너에 스트림 연결
        +asCode('shell').
            # STDIN, STDOUT, STDERR를 실행 중인 컨테이너에 연결한다
            $ docker attach [OPTIONS] CONTAINER
            $ docker container attach [OPTIONS] CONTAINER

            # OPTIONS
            --detach-keys # 스트림 연결 해제 키 재설정
                          # -it 옵션으로 실행중이라면, Ctrl + P, Ctrl + Q로 컨테이너를 정지하지 않고 나올 수 있다
            --no-stdin    # STDIN은 연결하지 않음

        h2 docker exec : 컨테이너 안에서 명령 실행
        +asCode('shell').
            $ docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
            $ docker container exec [OPTIONS] CONTAINER COMMAND [ARG...]

            # 예. $ docker exec -it tomcat /bin/bash
            # OPTIONS
            --detach, -d  # 백그라운드로 실행시킨다
            --env, -e     # 환경 변수 설정 Since 1.25
            --workdir, -w # 워킹 디렉터리 설정 Since 1.35
        p docker-machine 예
        +asCode('shell').
            docker-machine ssh dbvm -- docker exec postgres1 /bin/bash /home/postgres/something.sh

    h1 컨테이너 오케스트레이션
    div
        h2 Kubernetes; K8s
        p Empty
        h2 Swarm
        +asCode().
            $ docker swarm init

            $ docker service create --name demo alpine:3.5 ping 1.1.1.1
            $ docker service ps
            $ docker service logs demo
            $ docker service rm demo
            # docker service scale
