include ../../source/skeleton.pug
+post('SF Document', 'SF, Webapp Framework, HTML Framework', 'Why do more? Here\'s Simplest html Framework.')
    h1 SF; Simplest HTML Framework
    div
        h2 Goal
        p The most simplest HTML library

        h2 Versions
        table
            +ths('version', 'size', 'link')
            tr
                td 0.4.0
                td 20.1KB
                td: +asA('https://github.com/Dong-gi/SF/releases/download/0.4.0/sf.min.js')
            tr
                td 0.3.2
                td 10.9KB
                td: +asA('https://github.com/Dong-gi/SF/releases/download/0.3.2/sf.min.js')
            tr
                td 0.2.1
                td 6.61KB
                td: +asA('https://github.com/Dong-gi/SF/releases/download/0.2.1/sf.min.js')
            tr
                td 0.1.3
                td 2.02KB
                td: +asA('https://github.com/Dong-gi/SF/releases/download/0.1.3/sf.min.js')

        h2 Terms
        ol
            li SFNode
            ul
                li Proxy object of other object(Usually HTMLElement instance)
                li Returned by SF.build, SF.asSF, SF.asSFarr
                li Original object can be accessed by SFNode.$
            li App instance
            p SFNode returned by SF.build

    h1 Demos
    div
        h2 Version 0.1.3
        div
            h3 Get app instance
            +asCode('javascript').
                const app = SF.build()              // root = document.querySelector('[sf]')
                const app = SF.build(document.body) // root = document.body

            h3 Hello World
            +asCode('javascript').
                const app = SF.build();
                app.head.$title.innerText = 'Title : Hello World';
                app.body.innerText = 'Body : Hello World';
            +codeBtn('/Repositories/JavaScript/SF/demo/demo1.html', 'html')
            +asA('/Repositories/JavaScript/SF/demo/demo1.html', 'View on new tab')&attributes({ target: '_blank' })

            h3 Template Example 1
            +asCode('javascript').
                const Card = app.newTemplate(templateName, htmlMaker)
                    // templateName : anything which can be used as map's key
                    // htmlMaker    : void   -> HTML string
                const Card = app.asTemplate(templateName, element)
                    // element      : HTMLElement
                app.$.append(Card(callback).$)
                    // callback     : SFNode, ... -> ?
            +codeBtn('/Repositories/JavaScript/SF/demo/demo2.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo2.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo2.html', 'View on new tab')&attributes({ target: '_blank' })

            h3 Template Example 2 : Roman numeral calculator
            +codeBtn('/Repositories/JavaScript/SF/demo/demo3.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo3.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo3.html', 'View on new tab')&attributes({ target: '_blank' })

        h2 Version 0.2.2
        div
            h3 Form Binding Example
            +asCode('javascript').
                const app = SF.build(document.getElementById('demo4-1'));
                const boundForm = SF.bindForm(app['demo4-1-form']);
            p Changed from <mark>0.4.0</mark> : SF.formToObject set input[type=file] as File[]
            +codeBtn('/Repositories/JavaScript/SF/demo/demo4.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo4.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo4.html', 'View on new tab')&attributes({ target: '_blank' })

            h3 Object Binding Example
            +asCode('javascript') SF.bindTwoWay(x, y);
            +codeBtn('/Repositories/JavaScript/SF/demo/demo5.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo5.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo5.html', 'View on new tab')&attributes({ target: '_blank' })

        h2 Version 0.3.2
        div
            h3 DataGrid Example 1 : CSV. One data per one line
            +asCode('javascript').
                SF.asDataGrid(csv);
                DataGrid.fromCSV(csv);
            +codeBtn('/Repositories/JavaScript/SF/demo/demo6.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo6.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo6.html', 'View on new tab')&attributes({ target: '_blank' })

            h3 DataGrid Example 2 : CSV. Has multiple line quoted data
            +codeBtn('/Repositories/JavaScript/SF/demo/demo7.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo7.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo7.html', 'View on new tab')&attributes({ target: '_blank' })

            h3 DataGrid Example 3 : Array of Array, Array of Object
            +codeBtn('/Repositories/JavaScript/SF/demo/demo8.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo8.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo8.html', 'View on new tab')&attributes({ target: '_blank' })

            h3 DataGrid Example 4 : Object of Array, Object of Object
            +codeBtn('/Repositories/JavaScript/SF/demo/demo9.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo9.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo9.html', 'View on new tab')&attributes({ target: '_blank' })

        h2 Version 0.4.0
        div
            h3 SFUtil.compareString()
            p Do natural string compare
            +asCode('javascript').
                let list = ['video-10.mp4', 'video-1.mp4', 'video-5.mp4', '2020-2-15', '2020-2', '2020', '2020-02-8', '$1,234.00', '$-1,234.00', '1,200.00', '-1200']
                list.sort((i1, i2) => i1.compareString(i2))
                JSON.stringify(list)
                >> ["$-1,234.00","-1200","1,200.00","$1,234.00","2020","2020-2","2020-02-8","2020-2-15","video-1.mp4","video-5.mp4","video-10.mp4"]
            h3 SFUtil.makeLSlikeText()
            p return 'ls -R' like text
            +asCode('javascript').
                let o = {
                    list: ['file1', 'file2'],
                    dir1: {
                        list: ['file11', 'file22']
                    },
                    dir2: {
                        list: ['file111', 'file222'],
                        dir3: {},
                    },
                }
                SFUtil.makeLSlikeText('root', o, 'list')
                >> root:
                file1
                file2
                dir1
                dir2
                root/dir2:
                file111
                file222
                dir3
                root/dir2/dir3:
                root/dir1:
                file11
                file22
            h3 SFUtil.highlight()
            +codeBtn('/Repositories/JavaScript/SF/demo/demo10.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo10.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo10.html', 'View on new tab')&attributes({ target: '_blank' })
            h3 SFUtil.showSnackbar()
            +codeBtn('/Repositories/JavaScript/SF/demo/demo11.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo11.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo11.html', 'View on new tab')&attributes({ target: '_blank' })
            h3 SFUtil.addHoverContent()
            +codeBtn('/Repositories/JavaScript/SF/demo/demo12.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo12.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo12.html', 'View on new tab')&attributes({ target: '_blank' })
            h3 SFUtil.addInputSelection()
            +codeBtn('/Repositories/JavaScript/SF/demo/demo13.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo13.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo13.html', 'View on new tab')&attributes({ target: '_blank' })
            h3
                | SFUtil.copyElementToClipboard()
                br
                | SFUtil.copyTextToCilpboard()
            +codeBtn('/Repositories/JavaScript/SF/demo/demo14.html', 'html')
            +codeBtn('/Repositories/JavaScript/SF/demo/demo14.html', 'nohighlight') View live here
            +asA('/Repositories/JavaScript/SF/demo/demo14.html', 'View on new tab')&attributes({ target: '_blank' })

    h1 Change Logs
    table
        tr
            th(pre-sort=1, sort-order='â–²') version
            th category
            th detail
        tr
            td 0.1.3
            td Fix
            td Solve ambiguous situation like below
                +asCode('javascript').
                    // Before
                    app.head[0].title = 'Welcome'               // 'title' attribute? or 'title' node?
                    // After
                    app.head[0].title = 'Welcome'               // 'title' attribute
                    app.head[0].$title[0].innerText = 'Welcome' // 'title' node
        tr
            td 0.1.1
            td Improve
            td If there's only one node with the specific node name, then return that node instead of array of children
                +asCode('javascript').
                    // Before
                    app.head[0].$title[0].innerText = 'Welcome'
                    // After
                    app.head.$title.innerText = 'Welcome'
        +tds('0.1.2', 'New', 'Now app instance has "__isRoot" property as true')
        +tds('0.1.2', 'Remove', 'Removed callback parameter from SFNode.newTemplate, SFNode.asTemplate')
        +tds('0.1.2', 'Change', 'SFNode.asTemplate(String templateName, String id) â†’ (String templateName, HTMLElement element)')
        +tds('0.1.2', 'Improve', 'When get a property from SFNode, do childNodes searching before calling querySelectorAll()')
        +tds('0.1.3', 'Fix', 'Renamed SF.map to SF.__map, SF.templates to SF.__templates')
        +tds('0.1.3', 'Remove', "Removed app instance's 'templates' property")
        +tds('0.2.0', 'Fix', 'Now SFNode can handle Symbol properties.')
        +tds('0.2.0', 'Change', "Startswith('__') properties changed to Symbols.")
        +tds('0.2.0', 'New', '4 kinds hooks : SF.beforePropertySet, SF.afterPropertySet, SF.beforePropertyDel, SF.afterPropertyDel')
        +tds('0.2.0', 'New', 'Form handling : SF.formToObject, SF.jsonToForm, SF.observeForm')
        +tds('0.2.0', 'New', 'Binding : SF.bindOneWay, SF.bindTwoWay, SF.bindForm')
        +tds('0.2.0', 'New', 'Higher-order function : SF.throttle, SF.debounce')
        +tds('0.2.1', 'Fix', 'Prevents running same hook at once')
        +tds('0.2.2', 'Fix', 'By misjudgement, had removed 0.1.1 fixed codes...')
        +tds('0.3.0', 'Fix', "Now function returned by SF.throttle, SF.debounce has it's own timer")
        +tds('0.3.0', 'New', 'DataGrid : SF.asDataGrid, DataGrid.fromCSV, DataGrid.fromArray, DataGrid.fromObject')
        +tds('0.3.2', 'Fix', 'CSV parsing error')
        +tds('0.4.0', 'Fix', 'String.prototype.asSF\'s <script> tags not run')
        +tds('0.4.0', 'Change', 'Move SF.throttle, SF.debounce to SFUtil')
        +tds('0.4.0', 'Change', 'SF.formToObject set input[type=file] as File[]')
        +tds('0.4.0', 'New', 'SFUtil class has several functions')
